[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Poetry

[tool.poetry]
name = 'planetary-coverage'
version = '1.1.1'
description = 'Planetary coverage package'
license = "BSD 3-Clause License"
authors = [
    "Seignovert et al. <contact@planetary-coverage.org>",
]
readme = 'README.md'
documentation = 'https://docs.planetary-coverage.org'
repository = 'https://juigitlab.esac.esa.int/python/planetary-coverage'
keywords = ['planetary', 'coverage', 'spice', 'esa', 'juice']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Astronomy',
    'Topic :: Scientific/Engineering :: Atmospheric Science',
]
packages = [{ include = "planetary_coverage", from = "src"}]

[tool.poetry.scripts]
mk-download = 'planetary_coverage.cli:cli_metakernel_download'
kernel-download = 'planetary_coverage.cli:cli_kernel_download'

[tool.poetry.urls]
"Bug Tracker" = 'https://juigitlab.esac.esa.int/python/planetary-coverage/-/issues'
"Changelog" = 'https://docs.planetary-coverage.org/en/latest/CHANGELOG.html'

# Package depedencies

[tool.poetry.dependencies]
python = "^3.10"
numpy = ">=1.25"
matplotlib = "^3.7.2"
spiceypy = "^6.0.0"
Pillow = "^10.0.0"
defusedxml = "^0.7.1"
esa-ptr = { version = "^1.4", optional = true }

[tool.poetry.extras]
juice = ["esa-ptr"]

# Tests depedencies

[tool.poetry.group.test.dependencies]
ruff = "^0.5.2"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"

# Docs depedencies

[tool.poetry.group.docs.dependencies]
Sphinx = "^7.4.4"
sphinx-copybutton = "^0.5.2"
sphinx-tabs = "^3.4.5"
sphinx-book-theme = "^1.1.3"
sphinx-gallery = "^0.16.0"
myst-nb = "^1.1.1"
jupyterlab = "^4.2.3"
jupytext = "^1.16.3"
pypandoc = "^1.13"
sphinxcontrib-svg2pdfconverter = {version = "^1.2.2", extras = ["CairoSVG"]}
sphinx-autobuild = "^2024.4.16"

# Deployment depedencies

[tool.poetry.group.deploy.dependencies]
bump2version = "^1.0.1"

# Pytest configuration

[tool.pytest.ini_options]
minversion = '6.0'
addopts = '-vv --color=yes --cov=planetary_coverage --cov-report term-missing'
testpaths = ['tests']

# Pytest coverage configuration

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'def __repr__',
    'pragma: no cover',
    'raise NotImplementedError',
]

# Ruff config
[tool.ruff]
line-length = 90

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle
    "PL",   # Pylint
    "I",    # isort
    "N",    # pep8-naming
    "C90",  # mccabe
    "UP",   # pyupgrade
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
]
ignore = [
    "COM812",  # disable ruff format warning
    "S603",    # disable subprocess-without-shell-equals-true (see PyCQA/bandit#333)
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-statements = 100
max-args = 10
max-public-methods = 30
allow-dunder-method-names = ["_ipython_key_completions_", "_repr_html_", "_repr_png_"]

[tool.ruff.lint.per-file-ignores]
"docs/trim_kernels/*.py" = [
    "S404",  # suspicious-subprocess-import
    "S607",  # start-process-with-partial-path
]
"examples/*.py" = [
    "B018",     # useless-expression
    "PLR2004",  # magic-value-comparison
]
"tests/*.py" = [
    "S101",     # assert
    "PLR2004",  # magic-value-comparison
]

# Isort configuration

[tool.ruff.lint.isort]
lines-after-imports = 2
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "standard-library",
  "numpy",
  "matplotlib",
  "spiceypy",
  "pytest",
  "third-party",
  "first-party",
  "local-folder",
]

extra-standard-library = ["defusedxml"]
known-first-party = ["planetary_coverage"]

[tool.ruff.lint.isort.sections]
numpy = ["numpy"]
matplotlib = ["matplotlib"]
spiceypy = ["spiceypy"]
pytest = ["pytest"]
