# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
from aivm_grpc import share_service_pb2 as aivm__grpc_dot_share__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = "1.66.2"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in aivm_grpc/share_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ProxyStub(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerConfiguration = channel.unary_unary(
            "/share_service.Proxy/GetServerConfiguration",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.ServerConfiguration.FromString,
            _registered_method=True,
        )
        self.GetPrediction = channel.unary_unary(
            "/share_service.Proxy/GetPrediction",
            request_serializer=aivm__grpc_dot_share__service__pb2.ClientShares.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.ClientShares.FromString,
            _registered_method=True,
        )
        self.GetPreprocessing = channel.unary_unary(
            "/share_service.Proxy/GetPreprocessing",
            request_serializer=aivm__grpc_dot_share__service__pb2.PreprocessingRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.SendModel = channel.stream_unary(
            "/share_service.Proxy/SendModel",
            request_serializer=aivm__grpc_dot_share__service__pb2.ModelChunk.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.ModelResponse.FromString,
            _registered_method=True,
        )


class ProxyServicer(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    def GetServerConfiguration(self, request, context):
        """Retrieves the server configuration, including world size, precision, and available models.
        The request is empty and uses the well-known Empty type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPrediction(self, request, context):
        """Sends a batch of shares to the server for prediction, and returns the server's prediction.
        The request and response are both of type `Shares`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPreprocessing(self, request, context):
        """Requests preprocessing of data for a specific model.
        The server processes the request and returns an empty response upon completion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendModel(self, request_iterator, context):
        """Streams model data to the server in chunks. The client sends chunks of the model sequentially.
        The server responds with a `ModelResponse` once the entire model is received.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetServerConfiguration": grpc.unary_unary_rpc_method_handler(
            servicer.GetServerConfiguration,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.ServerConfiguration.SerializeToString,
        ),
        "GetPrediction": grpc.unary_unary_rpc_method_handler(
            servicer.GetPrediction,
            request_deserializer=aivm__grpc_dot_share__service__pb2.ClientShares.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.ClientShares.SerializeToString,
        ),
        "GetPreprocessing": grpc.unary_unary_rpc_method_handler(
            servicer.GetPreprocessing,
            request_deserializer=aivm__grpc_dot_share__service__pb2.PreprocessingRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        "SendModel": grpc.stream_unary_rpc_method_handler(
            servicer.SendModel,
            request_deserializer=aivm__grpc_dot_share__service__pb2.ModelChunk.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.ModelResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "share_service.Proxy", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("share_service.Proxy", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Proxy(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    @staticmethod
    def GetServerConfiguration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Proxy/GetServerConfiguration",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            aivm__grpc_dot_share__service__pb2.ServerConfiguration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPrediction(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Proxy/GetPrediction",
            aivm__grpc_dot_share__service__pb2.ClientShares.SerializeToString,
            aivm__grpc_dot_share__service__pb2.ClientShares.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPreprocessing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Proxy/GetPreprocessing",
            aivm__grpc_dot_share__service__pb2.PreprocessingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendModel(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/share_service.Proxy/SendModel",
            aivm__grpc_dot_share__service__pb2.ModelChunk.SerializeToString,
            aivm__grpc_dot_share__service__pb2.ModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ShareStub(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerConfiguration = channel.unary_unary(
            "/share_service.Share/GetServerConfiguration",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.ServerConfiguration.FromString,
            _registered_method=True,
        )
        self.GetPrediction = channel.unary_unary(
            "/share_service.Share/GetPrediction",
            request_serializer=aivm__grpc_dot_share__service__pb2.Shares.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.Shares.FromString,
            _registered_method=True,
        )
        self.GetPreprocessing = channel.unary_unary(
            "/share_service.Share/GetPreprocessing",
            request_serializer=aivm__grpc_dot_share__service__pb2.PreprocessingRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            _registered_method=True,
        )


class ShareServicer(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    def GetServerConfiguration(self, request, context):
        """Retrieves the server configuration, including world size, precision, and available models.
        The request is empty and uses the well-known Empty type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPrediction(self, request, context):
        """Sends a batch of shares to the server for prediction, and returns the server's prediction.
        The request and response are both of type `Shares`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPreprocessing(self, request, context):
        """Requests preprocessing of data for a specific model.
        The server processes the request and returns an empty response upon completion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ShareServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetServerConfiguration": grpc.unary_unary_rpc_method_handler(
            servicer.GetServerConfiguration,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.ServerConfiguration.SerializeToString,
        ),
        "GetPrediction": grpc.unary_unary_rpc_method_handler(
            servicer.GetPrediction,
            request_deserializer=aivm__grpc_dot_share__service__pb2.Shares.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.Shares.SerializeToString,
        ),
        "GetPreprocessing": grpc.unary_unary_rpc_method_handler(
            servicer.GetPreprocessing,
            request_deserializer=aivm__grpc_dot_share__service__pb2.PreprocessingRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "share_service.Share", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("share_service.Share", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Share(object):
    """Service for secret sharing-related operations, such as configuration and predictions."""

    @staticmethod
    def GetServerConfiguration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Share/GetServerConfiguration",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            aivm__grpc_dot_share__service__pb2.ServerConfiguration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPrediction(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Share/GetPrediction",
            aivm__grpc_dot_share__service__pb2.Shares.SerializeToString,
            aivm__grpc_dot_share__service__pb2.Shares.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPreprocessing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/share_service.Share/GetPreprocessing",
            aivm__grpc_dot_share__service__pb2.PreprocessingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ModelStub(object):
    """Service for model-related operations, specifically for transferring models to the server."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendModel = channel.stream_unary(
            "/share_service.Model/SendModel",
            request_serializer=aivm__grpc_dot_share__service__pb2.ModelChunk.SerializeToString,
            response_deserializer=aivm__grpc_dot_share__service__pb2.ModelResponse.FromString,
            _registered_method=True,
        )


class ModelServicer(object):
    """Service for model-related operations, specifically for transferring models to the server."""

    def SendModel(self, request_iterator, context):
        """Streams model data to the server in chunks. The client sends chunks of the model sequentially.
        The server responds with a `ModelResponse` once the entire model is received.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendModel": grpc.stream_unary_rpc_method_handler(
            servicer.SendModel,
            request_deserializer=aivm__grpc_dot_share__service__pb2.ModelChunk.FromString,
            response_serializer=aivm__grpc_dot_share__service__pb2.ModelResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "share_service.Model", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("share_service.Model", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Model(object):
    """Service for model-related operations, specifically for transferring models to the server."""

    @staticmethod
    def SendModel(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/share_service.Model/SendModel",
            aivm__grpc_dot_share__service__pb2.ModelChunk.SerializeToString,
            aivm__grpc_dot_share__service__pb2.ModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
