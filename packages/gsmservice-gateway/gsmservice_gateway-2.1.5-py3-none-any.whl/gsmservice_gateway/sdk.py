"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from gsmservice_gateway import models, utils
from gsmservice_gateway._hooks import SDKHooks
from gsmservice_gateway.accounts import Accounts
from gsmservice_gateway.common import Common
from gsmservice_gateway.incoming import Incoming
from gsmservice_gateway.outgoing import Outgoing
from gsmservice_gateway.senders import Senders
from gsmservice_gateway.types import OptionalNullable, UNSET
import httpx
from typing import Any, Callable, Dict, Optional, Union


class Client(BaseSDK):
    r"""Messaging Gateway GSMService.pl: This package includes Messaging SDK for Python to send SMS and MMS messages directly from your app via [https://bramka.gsmservice.pl](https://bramka.gsmservice.pl) messaging platform.

    *Client* class is used to initialize SDK environment.

    Please initialize it this way:

    ```
    from gsmservice_gateway import Client
    import os

    s = Client(
    bearer=os.getenv(\"GATEWAY_API_BEARER\", \"\"),
    )
    ```

    If you want to use a Sandbox test system please initialize it as follows:

    ```
    from gsmservice_gateway import Client, SERVER_SANDBOX

    s = Client(
    bearer=os.getenv(\"GATEWAY_API_BEARER\", \"\"),
    server=SERVER_SANDBOX
    ) var sdk = new Client(bearer: \"YOUR API ACCESS TOKEN\", null, SDKConfig.Server.Sandbox);

    ```
    https://bramka.gsmservice.pl - Bramka GSMService.pl
    """

    accounts: Accounts
    outgoing: Outgoing
    incoming: Incoming
    common: Common
    senders: Senders

    def __init__(
        self,
        bearer: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        server: Optional[str] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bearer: The bearer required for authentication
        :param server: The server by name to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bearer):
            security = lambda: models.Security(bearer=bearer())  # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(bearer=bearer)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server=server,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.accounts = Accounts(self.sdk_configuration)
        self.outgoing = Outgoing(self.sdk_configuration)
        self.incoming = Incoming(self.sdk_configuration)
        self.common = Common(self.sdk_configuration)
        self.senders = Senders(self.sdk_configuration)
