import hashlib
import time
import requests
import concurrent.futures
import pandas as pd
import numpy as np

access_key = None
secret_key = None
res_method = None
server_ip = None

def set_global_info(AccessKey,SecretKey,ResMethod,ServerIp):
    global access_key
    global secret_key
    global res_method
    global server_ip
    access_key = AccessKey
    secret_key = SecretKey
    res_method = ResMethod
    server_ip = ServerIp

def generate_request_body(method,path,params):
    request_body = {
        "method":method,
        "path":path,
        "requestParams":params
    }
    return str(request_body)

def get_headers(body, access_key, secret_key):
    headers = {
        "accessKey": access_key,
        "body": hashlib.md5(body.encode()).hexdigest(),
        "timestamp": str(int(time.time())),
        "sign": get_sign(hashlib.md5(body.encode()).hexdigest(), secret_key),
		"Accept-Encoding":"gzip,deflate,br",
		"Connection":"close"
    }
    return headers

def get_sign(body, secret_key):
    return hashlib.md5((body + '.' + secret_key).encode()).hexdigest()


def process_function(field_name, func_name, kwargs, max_retries=5):
    func = globals().get(func_name)  # 获取函数对象
    if func is not None and callable(func):
        for attempt in range(max_retries + 1):
            try:
                result = func(**kwargs)  # 调用函数
                result = dict(result)
                result['field_name'] = field_name
                return result
            except Exception as e:
                print(f"Function '{func_name}' call failed on attempt {attempt + 1}. Retrying...")
                if attempt == max_retries:
                    print(f"Function '{func_name}' failed after {max_retries} attempts.")
                    return None
    else:
        print(f"Function '{func_name}' not found or is not callable.")
        return None

def get_query_builder(field, functions_and_args):
    functions_and_args = [(field_name, func_name, kwargs) for field_name, func_name, kwargs in functions_and_args if field_name in field]

    results = []
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(process_function, field_name, func_name, kwargs) for field_name, func_name, kwargs in functions_and_args]

        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            if result is not None:
                results.append(result)

    merged_crosssection_data = pd.DataFrame()
    merged_temporal_data = pd.DataFrame()
    for result in results:
        symbol_colname = result['symbol_colname']
        date_colname = result['date_colname']
        value_colname = result['value_colname']
        field_name = result['field_name']
        df = pd.DataFrame(result['data_frame'])

        if ',' in field_name:
            print(',' * 10)
        else:
            # Rename symbol_colname and date_colname to fixed values SYMBOL and DATE
            df = df.rename(columns={symbol_colname: 'symbol', date_colname: 'date', value_colname: field_name})

        # Convert value_colname to numeric type
        if result['value_coltype'] == 'number':
            df[field_name] = pd.to_numeric(df[field_name])
        # Merge data
        if 'date' in df.columns.tolist():
            if merged_temporal_data.empty:
                merged_temporal_data = df
            else:
                merged_temporal_data = pd.merge(merged_temporal_data, df, on=['symbol', 'date'], how='outer')
        else:
            if merged_crosssection_data.empty:
                merged_crosssection_data = df
            else:
                merged_crosssection_data = pd.merge(merged_crosssection_data, df, on=['symbol'], how='outer')

    if merged_temporal_data.empty or merged_crosssection_data.empty:
       if merged_temporal_data.empty:
           return merged_crosssection_data.fillna(np.nan)
       else:
           return merged_temporal_data.fillna(np.nan)
    else:
        merged_temporal_data = pd.merge(merged_temporal_data, merged_crosssection_data, on=['symbol'], how='outer')
        return merged_temporal_data.fillna(np.nan)


def get_s_info_mainbusiness(symbols): 

	"""
	公司资料-详细情况-主营业务（最新）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MAJORBIZ,单位为nan,数据类型为string
	"""
	path = server_ip + '/get_s_info_mainbusiness'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_majorbiz(code,trade_date): 

	"""
	主营业务 - 历史

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAJORBIZ,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_majorbiz'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_industry_sw(symbols): 

	"""
	公司资料-详细情况-所属申万行业(1-2级) 最新

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列INDUSTRY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_industry_sw'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_swindus_industry(code,level,trade_date): 

	"""
	申万行业分类(20210730之后用2021版，之前用2014版)

	Args:
		code:股票代码,例如['600745', '603986']
		level:行业层级，'1'- 一级行业/门类行业,'2'- 二级行业/大类行业,'3'- 三级行业/中类行业,'4'- 四级行业/小类行业,'all'- 全部明细,例如all
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列INDUSTRY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_swindus_industry'
	data = {'code': {'symbols': code}, 'level': {'level': level}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_swindus2014(code,level,trade_date): 

	"""
	申万行业分类(2014版)

	Args:
		code:股票代码,例如['600745', '603986']
		level:行业层级，'1'- 一级行业/门类行业,'2'- 二级行业/大类行业,'3'- 三级行业/中类行业,'4'- 四级行业/小类行业,'all'- 全部明细,例如all
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列INDUSTRY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_swindus2014'
	data = {'code': {'symbols': code}, 'level': {'level': level}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totmktcap(code,trade_date): 

	"""
	总市值，万元 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTMKTCAP,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_totmktcap'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalshare(code,trade_date): 

	"""
	总股本，万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALSHARE,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_totalshare'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_circaamt(code,trade_date): 

	"""
	流通A股，万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCAAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_circaamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsbasic(code,report_date,report_type): 

	"""
	每股收益（基本每股收益），元/股

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSBASIC,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_epsbasic'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncfpspershare(code,report_date,report_type): 

	"""
	每股经营现金流净额，元/股

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFPS,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_opncfpspershare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sgpmargin(code,report_date,report_type): 

	"""
	销售毛利率

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SGPMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_sgpmargin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetp(code,report_type,report_date): 

	"""
	净利润（归属母公司）

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parenetp'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pe_lyr(code,trade_date,report_type): 

	"""
	市盈率（lyr）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_pe_lyr'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pe_mrq(code,trade_date,report_type): 

	"""
	市盈率（MRQ）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_pe_mrq'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pb_mrq(code,trade_date,report_type): 

	"""
	市净率（MRQ）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_pb_mrq'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pledgeshare(code,trade_date): 

	"""
	总质押股份数量（万股）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PLDGESHARE,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_pledgeshare'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pledgeratio(code,trade_date): 

	"""
	质押股份占A股总股本比(%)

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PLEDGERATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_pledgeratio'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pledgedeclaredate(code,trade_date): 

	"""
	质押股份数据更新日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DECLAREDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_pledgedeclaredate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_crps(code,report_date,report_type): 

	"""
	每股资本公积金（元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CRPS,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_crps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_upps(code,report_date,report_type): 

	"""
	每股未分配利润（元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列UPPS,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_upps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncfps(code,report_date,report_type): 

	"""
	每股经营现金流净额（元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFPS,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_opncfps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztotinco(code,report_type,report_date): 

	"""
	营业总收入（元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTOTINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biztotinco'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reportdatetype(code,report_date,report_type): 

	"""
	变更原因

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REPORTDATETYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_reportdatetype'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalshamt(code,report_date): 

	"""
	股东总户数 (户)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALSHAMT,单位为户,数据类型为number
	"""

	path = server_ip + '/get_s_totalshamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalshamtchg(code,report_date): 

	"""
	股东总户数较上期变化（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALSHRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totalshamtchg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizsunitname(code,trade_date): 

	"""
	营业部名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_bizsunitname'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_buyamt(code,trade_date): 

	"""
	龙虎榜买入金额（元）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,BUYAMT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_buyamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_buyamtrt(code,trade_date): 

	"""
	买入占总成交比率（%）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,BUYAMTRT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_buyamtrt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sellamt(code,trade_date): 

	"""
	龙虎榜卖出金额（元)

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,SALEAMT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sellamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sellamtrt(code,trade_date): 

	"""
	龙虎榜卖出金额占总成交比例（%）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,SALEAMTRT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sellamtrt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netamt(code,trade_date): 

	"""
	龙虎榜净额（元）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSDIR,BIZSUNITNAME,NETAMT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_netamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reason(code,trade_date): 

	"""
	龙虎榜上榜原因

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHGTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_reason'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_tradeprice(code,trade_date): 

	"""
	成交价格（大宗交易）元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRADEPRICE,BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_tradeprice'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_volume(code,trade_date): 

	"""
	成交数量（大宗交易）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOLUME,BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_volume'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_amount(code,trade_date): 

	"""
	成交金额（大宗交易）万元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,,BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_amount'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_buyername(code,trade_date): 

	"""
	买入营业部（大宗交易）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_buyername'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_sellername(code,trade_date): 

	"""
	卖出营业部（大宗交易）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_sellername'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_blocktrade_rate(code,trade_date): 

	"""
	折溢价（大宗交易）%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RATE,BUYERNAME,SELLERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_blocktrade_rate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finbalance(code,trade_date): 

	"""
	融资余额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINBALANCE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finbalance'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finbalance2negotiablemv(code,trade_date): 

	"""
	融资余额/流通市值 (%)

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINBALANCE2NEGOTIABLEMV,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_finbalance2negotiablemv'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finbuyamt(code,trade_date): 

	"""
	融资买入额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINBUYAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finbuyamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mrgsellamt(code,trade_date): 

	"""
	融券卖出量 股（份）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MRGNSELLAMT,单位为份,数据类型为number
	"""

	path = server_ip + '/get_s_mrgsellamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mrgnresqty(code,trade_date): 

	"""
	融券余量 股（份）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MRGNRESQTY,单位为份,数据类型为number
	"""

	path = server_ip + '/get_s_mrgnresqty'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mrggbal(code,trade_date): 

	"""
	融券余量金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MRGGBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mrggbal'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finmrghbal(code,trade_date): 

	"""
	融资融券余额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finmrghbal'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finrepayamt(code,trade_date): 

	"""
	融资偿还额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINREPAYAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finrepayamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mrgnrepayamt(code,trade_date): 

	"""
	融券偿还量 股（份）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MRGNREPAYAMT,单位为份,数据类型为number
	"""

	path = server_ip + '/get_s_mrgnrepayamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_companame(symbols): 

	"""
	公司资料-详细情况-公司名称

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_companame'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_province(symbols): 

	"""
	公司资料-详细情况-所属地域（省级名称）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PROVINCENAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_province'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_compnameeng(symbols): 

	"""
	公司资料-详细情况-英文名称

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ENGNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_compnameeng'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_companamehis(symbols): 

	"""
	公司资料-曾用名（公司名称）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列BEGINDATE,数值列COMPANAMEHIS,BECHG,AFCHG,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_companamehis'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_sesnamehis(symbols): 

	"""
	公司资料-曾用名（证券简称） 

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列BEGINDATE,数值列COMPANAMEHIS,BECHG,AFCHG,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_sesnamehis'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_website(symbols): 

	"""
	公司资料-详细情况-公司网址

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPURL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_website'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_product(symbols): 

	"""
	公司资料-详细情况-产品名称（主营） 

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PRODUCT,CLASSNAME,TCOREBIZINCOME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_product'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_controlling_shareholder(symbols): 

	"""
	公司资料-详细情况-控股股东  

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RELANAME,SKRTO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_controlling_shareholder'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_controller(symbols): 

	"""
	公司资料-详细情况-实际控制人

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RELANAME,SKRTO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_controller'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_boardchairmen(symbols): 

	"""
	公司资料-详细情况-董事长

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CHAIRMAN,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_boardchairmen'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_bsecretary(symbols): 

	"""
	公司资料-详细情况-董秘

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列BSECRETARY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_bsecretary'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_legrep(symbols): 

	"""
	公司资料-详细情况-法人代表

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LEGREP,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_legrep'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_manager(symbols): 

	"""
	公司资料-详细情况-总经理

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_manager'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_capital(symbols): 

	"""
	公司资料-详细情况-注册资金（万元）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列REGCAPITAL,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_info_capital'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_employee(symbols): 

	"""
	公司资料-详细情况-员工人数

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列WORKFORCE,单位为人,数据类型为number
	"""

	path = server_ip + '/get_s_info_employee'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_phone(symbols): 

	"""
	公司资料-详细情况-电话

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPTEL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_phone'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_fax(symbols): 

	"""
	公司资料-详细情况-传真

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPFAX,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_fax'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_zipcode(symbols): 

	"""
	公司资料-详细情况-邮编

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列OFFICEZIPCODE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_zipcode'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_office(symbols): 

	"""
	公司资料-详细情况-办公地址

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列OFFICEADDR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_office'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_briefing(symbols): 

	"""
	公司资料-详细情况-公司简介

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPINTRO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_briefing'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_directors_name(code,trade_date): 

	"""
	董事会-姓名trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_directors_name'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_directors_dutyname(code,trade_date): 

	"""
	董事会-职务trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,ACTDUTYNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_directors_dutyname'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_directors_dirholdamt(code,trade_date): 

	"""
	董事会-直接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_directors_dirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_directors_indirholdamt(code,trade_date): 

	"""
	董事会-间接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_directors_indirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_supervisors_name(code,trade_date): 

	"""
	监事会-姓名trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_supervisors_name'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_supervisors_dutyname(code,trade_date): 

	"""
	监事会-职务trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,ACTDUTYNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_supervisors_dutyname'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_supervisors_dirholdamt(code,trade_date): 

	"""
	监事会-直接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_supervisors_dirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_supervisors_indirholdamt(code,trade_date): 

	"""
	监事会-间接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_supervisors_indirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_executives_name(code,trade_date): 

	"""
	高管-姓名  TODO 是否包含 证券事务代表trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_executives_name'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_executives_dutyname(code,trade_date): 

	"""
	高管-职务trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,ACTDUTYNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_executives_dutyname'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_executives_dirholdamt(code,trade_date): 

	"""
	高管-直接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_executives_dirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_executives_indirholdamt(code,trade_date): 

	"""
	高管-间接持股数（股）trade_date：截至日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CNAME,HOLDAFAMT,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_executives_indirholdamt'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_info_founddate(symbols): 

	"""
	公司资料-发行相关-成立日期

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FOUNDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_info_founddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_actissqty(symbols): 

	"""
	公司资料-发行相关-发行数量（万股）  TODO 是否要加上 存量发行数量 STATSHSECOFFQTY

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ACTISSQTY,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_actissqty'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_issprice(symbols): 

	"""
	公司资料-发行相关-发行价格 （元/股）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSPRICE,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_issprice'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_listdate(symbols): 

	"""
	公司资料-发行相关-上市日期 

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LISTDATE,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_listdate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_pe(symbols): 

	"""
	公司资料-发行相关-发行市盈率 

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PEAFT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_pe'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_planttotraiseamt(symbols): 

	"""
	公司资料-发行相关-预计募资（万元）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PLANTOTRAISEAMT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_planttotraiseamt'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_listoprice(symbols): 

	"""
	公司资料-发行相关-首日开盘价（元）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LISTOPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_listoprice'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_onllotwinrt(symbols): 

	"""
	公司资料-发行相关-发行中签率（网上发行）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ONLLOTWINRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_onllotwinrt'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_newtotraiseamt(symbols): 

	"""
	公司资料-发行相关-实际募资（万元）

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列NEWTOTRAISEAMT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_ipo_newtotraiseamt'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_leaduwer(symbols): 

	"""
	公司资料-发行相关-主承销商

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LEADUWER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_ipo_leaduwer'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_listrecomer(symbols): 

	"""
	公司资料-发行相关-上市保荐人

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LISTRECOMER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_ipo_listrecomer'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ipo_compintro(symbols): 

	"""
	公司资料-发行相关-历史沿革 TODO 目前用公司简介

	Args:
		symbols:股票代码,例如['600745', '603986']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COMPINTRO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_ipo_compintro'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompname(code,report_date): 

	"""
	被参股公司名称

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompname'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcomprelationship(code,report_date): 

	"""
	参控关系 TODO 财通有些取值与同花顺不符（如600052的河南汇贤科技有限公司-财通为子公司，同花顺为孙公司） 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPRELATIONSHIP,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcomprelationship'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompholderrto(code,report_date): 

	"""
	参控比例（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMP4,SHAREHDCOMP5,单位为%,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompholderrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompvoterto(code,report_date): 

	"""
	表决权比例（%），TODO 字段空值

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPVOTERTO,单位为%,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompvoterto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompregcapital(code,report_date): 

	"""
	被参控公司注册资本（元）TODO wind有的数据这里没有

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPREGCAPITAL,UNIT,单位为元,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompregcapital'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompinv(code,report_date): 

	"""
	投资额（万元）TODO wind有的数据这里没有

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPINV,单位为万元,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompinv'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompbizinco(code,report_date): 

	"""
	营业收入(万元)）TODO 均为空值

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPBIZINCO,单位为万元,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompbizinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompnetprofit(code,report_date): 

	"""
	净利润(万元)）TODO 均为空值

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPNETPROFIT,单位为万元,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompnetprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompmajorbiz(code,report_date): 

	"""
	主营业务

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPMAJORBIZ,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompmajorbiz'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompisconsolidated(code,report_date): 

	"""
	是否合并报表

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHAREHDCOMPNAME,SHAREHDCOMPISCONSOLIDATED,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompisconsolidated'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharehdcompdeclaredate(code,report_date): 

	"""
	最新公告日期

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DECLAREDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharehdcompdeclaredate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_askshamt(code,report_date): 

	"""
	A股股东数 (户)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASKSHAMT,单位为户,数据类型为number
	"""

	path = server_ip + '/get_s_askshamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_askshamtchg(code,report_date): 

	"""
	A股股东户数较上期变化（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASKSHAMTCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_askshamtchg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bskshamt(code,report_date): 

	"""
	B股股东数 (户)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BSKSHAMT,单位为户,数据类型为number
	"""

	path = server_ip + '/get_s_bskshamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_favgholdratio(code,report_date): 

	"""
	人均流通股（股/户）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FAVGHOLDRATIO,单位为股/户,数据类型为number
	"""

	path = server_ip + '/get_s_favgholdratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_afavgholdsum(code,report_date): 

	"""
	户均流通A股 (股)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列AFAVGHOLDSUM,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_afavgholdsum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_favgholdsumgrg(code,report_date): 

	"""
	人均流通股变化（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FAVGHOLDSUMGRG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_favgholdsumgrg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_afproportionchg(code,report_date): 

	"""
	人均A股流通股变化（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列AFPROPORTIONCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_afproportionchg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_favgholdamt(code,report_date): 

	"""
	人均持股金额（万元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FAVGHOLDAMT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_favgholdamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_shholdername_top10(code,report_date): 

	"""
	前十大流通股-机构或基金名称

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_shholdername_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holderamt_top10(code,report_date): 

	"""
	前十大流通股-持有数量(股)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,HOLDERAMT,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_holderamt_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holdersumchg_top10(code,report_date): 

	"""
	前十大流通股-持股变化(股)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,HOLDERSUMCHG,单位为股,数据类型为string
	"""

	path = server_ip + '/get_s_holdersumchg_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pctofflotshares_top10(code,report_date): 

	"""
	前十大流通股-占流通股比例（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,PCTOFFLOTSHARES,单位为%,数据类型为string
	"""

	path = server_ip + '/get_s_pctofflotshares_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pledgeinvolvedration_top10(code,report_date): 

	"""
	前十大流通股-质押占其直接持股比（%）  TODO  PLEDGEINVOLVEDSUM 全部为空

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,PLEDGEINVOLVEDRATIO,单位为%,数据类型为string
	"""

	path = server_ip + '/get_s_pledgeinvolvedration_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holdersumchgrate_top10(code,report_date): 

	"""
	前十大流通股-流通股占比变动比例（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,HOLDERSUMCHGRATE,单位为%,数据类型为string
	"""

	path = server_ip + '/get_s_holdersumchgrate_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sharestypee_top10(code,report_date): 

	"""
	前十大流通股-股份类型

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHHOLDERNAME,RANK,HOLDERSUMCHGRATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_sharestypee_top10'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holderamt_top10_sum(code,report_date): 

	"""
	前十大流通股-前10大股东累计持有(股)

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列HOLDERAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holderamt_top10_sum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pctofflotshares_top10_sum(code,report_date): 

	"""
	前十大流通股-前10大股东累计持有(占流通股比例) %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PCTOFFLOTSHARES,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_pctofflotshares_top10_sum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holderamtchg_top10_sum(code,report_date): 

	"""
	前十大流通股-较上期变动(前10大累计) 股

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列HOLDERSUMCHG,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holderamtchg_top10_sum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetpyoy(code,report_type,report_date): 

	"""
	净利润（归属母公司）同比增长率（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETPYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetpyoy'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcut(code,report_date,report_type): 

	"""
	扣除非经常性损益后的净利润 （元） 来自财务指标表 TQ_FIN_PRGFINMAININDEXreport_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_npcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcutyoy(code,report_date,report_type): 

	"""
	扣除非经常性损益后的净利润同比增长率（%） 来自财务指标表 TQ_FIN_PRGFINMAININDEXreport_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCUTYOY,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_npcutyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztotincoyoy(code,report_type,report_date): 

	"""
	营业总收入同比增长（%）

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTOTINCOYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_biztotincoyoy'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_napsnewp(code,report_date,report_type): 

	"""
	每股净资产-摊薄，最新股数 （元）

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NAPSNEWP,单位为元/股,数据类型为number
	"""

	path = server_ip + '/get_s_napsnewp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roediluted(code,report_date,report_type): 

	"""
	净资产收益率_摊薄

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDILUTED,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roediluted'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roedilutedpct(code,report_type,report_date): 

	"""
	净资产收益率_摊薄 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDILUTED,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roedilutedpct'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opcyle(code,report_date,report_type): 

	"""
	营业周期 天

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPCYCLE,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_opcyle'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invturnrt(code,report_date,report_type): 

	"""
	存货周转率 次

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVTURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_invturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invturndays(code,report_date,report_type): 

	"""
	存货周转天数 天

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVTURNDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_invturndays'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accrecgturndays(code,report_date,report_type): 

	"""
	应收账款周转天数 天

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCRECGTURNDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_accrecgturndays'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_currentrt(code,report_date,report_type): 

	"""
	流动比率 倍

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CURRENTRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_currentrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_quickrt(code,report_date,report_type): 

	"""
	速动比率 倍

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列QUICKRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_quickrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_consvatquickrt(code,report_date,report_type): 

	"""
	保守速动比率 倍

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONSVATQUICKRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_consvatquickrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equrt(code,report_date,report_type): 

	"""
	产权比率 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQURT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_equrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assliabrt(code,report_date,report_type): 

	"""
	资产负债率 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSLIABRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_assliabrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_righaggr(code,report_date,report_type): 

	"""
	所有者权益（或股东权益）合计 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RIGHAGGR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_righaggr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totasset(code,report_date,report_type):

	"""
	资产合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totliab(code,report_date,report_type): 

	"""
	负债合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paresharrigh(code,report_date,report_type): 

	"""
	归属于母公司所有者权益合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARESHARRIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_paresharrigh'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_curfds(code,report_date,report_type): 

	"""
	货币资金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CURFDS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_curfds'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tradfinasset(code,report_date,report_type): 

	"""
	交易性金融资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TRADFINASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_tradfinasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_notesaccorece(code,report_date,report_type): 

	"""
	应收票据及应收账款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOTESACCORECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_notesaccorece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_notesrece(code,report_date,report_type): 

	"""
	其中：应收票据（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOTESRECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_notesrece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accorece(code,report_date,report_type): 

	"""
	其中：应收账款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCORECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_accorece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_prep(code,report_date,report_type): 

	"""
	预付款项（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PREP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_prep'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherrecetot(code,report_date,report_type): 

	"""
	其他应收款合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERRECETOT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherrecetot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_interece(code,report_date,report_type): 

	"""
	其中：应收利息（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTERECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_interece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherrece(code,report_date,report_type): 

	"""
	其中：其他应收款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERRECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherrece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inve(code,report_date,report_type): 

	"""
	存货（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expinoncurrasset(code,report_date,report_type): 

	"""
	一年内到期的非流动资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EXPINONCURRASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expinoncurrasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othercurrasse(code,report_date,report_type): 

	"""
	其他流动资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERCURRASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othercurrasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totcurrasset(code,report_date,report_type): 

	"""
	流动资产合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTCURRASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totcurrasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_avaisellasse(code,report_date,report_type): 

	"""
	可供出售金融资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列AVAISELLASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_avaisellasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equiinve(code,report_date,report_type): 

	"""
	长期股权投资（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUIINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_equiinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othequininvest(code,report_date,report_type): 

	"""
	其他权益工具投资（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHEQUININVEST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othequininvest'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othernoncfinasse(code,report_date,report_type): 

	"""
	其他非流动金融资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERNONCFINASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othernoncfinasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveprop(code,report_date,report_type): 

	"""
	投资性房地产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVEPROP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveprop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedassecleatot(code,report_date,report_type): 

	"""
	固定资产合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSECLEATOT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedassecleatot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedasseimmo(code,report_date,report_type): 

	"""
	其中：固定资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSEIMMO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedasseimmo'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedasseclea(code,report_date,report_type): 

	"""
	其中：固定资产清理（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSECLEA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedasseclea'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_consprogtot(code,report_date,report_type): 

	"""
	在建工程合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONSPROGTOT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_consprogtot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_consprog(code,report_date,report_type): 

	"""
	其中：在建工程（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONSPROG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_consprog'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_engimate(code,report_date,report_type): 

	"""
	工程物资（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ENGIMATE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_engimate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_intaasset(code,report_date,report_type): 

	"""
	无形资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTAASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_intaasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_goodwill(code,report_date,report_type): 

	"""
	商誉（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列GOODWILL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_goodwill'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_logprepexpe(code,report_date,report_type): 

	"""
	长期待摊费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LOGPREPEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_logprepexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_defetaxasset(code,report_date,report_type): 

	"""
	递延所得税资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEFETAXASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_defetaxasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othernoncasse(code,report_date,report_type): 

	"""
	其他非流动资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERNONCASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othernoncasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalnoncassets(code,report_date,report_type): 

	"""
	非流动资产合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALNONCASSETS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totalnoncassets'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_shorttermborr(code,report_date,report_type): 

	"""
	短期借款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHORTTERMBORR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_shorttermborr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_deriliab(code,report_date,report_type): 

	"""
	衍生金融负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DERILIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_deriliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_notesaccopaya(code,report_date,report_type): 

	"""
	应付票据及应付账款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOTESACCOPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_notesaccopaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_notespaya(code,report_date,report_type): 

	"""
	其中：应付票据（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOTESPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_notespaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accopaya(code,report_date,report_type): 

	"""
	其中：应付账款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCOPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_accopaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_advapaym(code,report_date,report_type): 

	"""
	预收款项（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ADVAPAYM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_advapaym'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_contractliab(code,report_date,report_type): 

	"""
	合同负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONTRACLTIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_contractliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_copeworkersal(code,report_date,report_type): 

	"""
	应付职工薪酬（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列COPEWORKERSAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_copeworkersal'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_taxespaya(code,report_date,report_type): 

	"""
	应交税费（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TAXESPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_taxespaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherpaytot(code,report_date,report_type): 

	"""
	其他应付款合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERPAYTOT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherpaytot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_intepaya(code,report_date,report_type): 

	"""
	应付利息（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTEPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_intepaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_divipaya(code,report_date,report_type): 

	"""
	应付股利（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DIVIPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_divipaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherpay(code,report_date,report_type): 

	"""
	其他应付款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERPAY,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherpay'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_duenoncliab(code,report_date,report_type): 

	"""
	一年内到期的非流动负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DUENONCLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_duenoncliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othercurreliabi(code,report_date,report_type): 

	"""
	其他流动负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERCURRELIABI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othercurreliabi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalcurrliab(code,report_date,report_type): 

	"""
	流动负债合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALCURRLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totalcurrliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_longborr(code,report_date,report_type): 

	"""
	长期借款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LONGBORR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_longborr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bdspaya(code,report_date,report_type): 

	"""
	应付债券（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BDSPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bdspaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_longpayatot(code,report_date,report_type): 

	"""
	长期应付款合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LONGPAYATOT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_longpayatot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_longpaya(code,report_date,report_type): 

	"""
	其中：长期应付款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LONGPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_longpaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_specpaya(code,report_date,report_type): 

	"""
	专项应付款（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SPECPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_specpaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expenoncliab(code,report_date,report_type): 

	"""
	预计非流动负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EXPENONCLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expenoncliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_defeincotaxliab(code,report_date,report_type): 

	"""
	递延所得税负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEFEINCOTAXLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_defeincotaxliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_longdefeinco(code,report_date,report_type): 

	"""
	递延收益-非流动负债（即长期递延收益）（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LONGDEFEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_longdefeinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othernoncliabi(code,report_date,report_type): 

	"""
	其他非流动负债（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERNONCLIABI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othernoncliabi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalnoncliab(code,report_date,report_type): 

	"""
	非流动负债合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALNONCLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totalnoncliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paidincapi(code,report_date,report_type): 

	"""
	实收资本（或股本）（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAIDINCAPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_paidincapi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_capisurp(code,report_date,report_type): 

	"""
	资本公积（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CAPISURP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_capisurp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_treastk(code,report_date,report_type): 

	"""
	减：库存股（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TREASTK,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_treastk'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ocl(code,report_date,report_type): 

	"""
	其他综合收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OCL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ocl'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_rese(code,report_date,report_type): 

	"""
	盈余公积（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RESE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_rese'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_undiprof(code,report_date,report_type): 

	"""
	未分配利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列UNDIPROF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_undiprof'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totliabsharequi(code,report_date,report_type): 

	"""
	负债和所有者权益（或股东权益）合计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTLIABSHAREQUI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totliabsharequi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztotcost(code,report_date,report_type): 

	"""
	营业总成本 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTOTCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biztotcost'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcost(code,report_date,report_type): 

	"""
	
    其中：营业成本（元）
    report_type
    1- 合并期末
    2- 母公司期末
    3- 合并期初
    4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTOTCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biztotcost'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npatoopc(code,report_date,report_type): 

	"""
	归属于母公司所有者的净利润 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_npatoopc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizinco(code,report_date,report_type): 

	"""
	其中：营业收入（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztax(code,report_date,report_type): 

	"""
	营业税金及附加（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTAX,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biztax'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_salesexpe(code,report_date,report_type): 

	"""
	销售费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SALESEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_salesexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_manaexpe(code,report_date,report_type): 

	"""
	管理费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MANAEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_manaexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_deveexpe(code,report_date,report_type): 

	"""
	研发费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEVEEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_deveexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finexpe(code,report_date,report_type): 

	"""
	财务费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_interestexpense(code,report_date,report_type): 

	"""
	利息费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTERESTEXPENSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_interestexpense'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inteincoopcost(code,report_date,report_type): 

	"""
	利息收入（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTEINCOOPCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inteincoopcost'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_asseimpalossprofit(code,report_date,report_type): 

	"""
	资产减值损失（元）TODO 单位负号report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSEIMPALOSSPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_asseimpalossprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_creditmplosseprofit(code,report_date,report_type): 

	"""
	信用减值损失（元）TODO 单位负号report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CREDITIMPLOSSEPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_creditmplosseprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuechgloss(code,report_date,report_type): 

	"""
	公允价值变动收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列VALUECHGLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuechgloss'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveinco(code,report_date,report_type): 

	"""
	投资收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assoinveprof(code,report_date,report_type): 

	"""
	投资收益 - 其中:对联营企业和合营企业的投资收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSOINVEPROF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_assoinveprof'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assetsdislinco(code,report_date,report_type): 

	"""
	资产处置收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSETSDISLINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_assetsdislinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherinco(code,report_date,report_type): 

	"""
	其他收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perprofit(code,report_date,report_type): 

	"""
	营业利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PERPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonoreve(code,report_date,report_type): 

	"""
	加：营业外收入（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONOREVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonoreve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_noncassetsdisi(code,report_date,report_type): 

	"""
	加：营业外收入 - 其中:非流动资产处置利得 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONCASSETSDISI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_noncassetsdisi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonoexpe(code,report_date,report_type): 

	"""
	减：营业外支出（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONOEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonoexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_noncassetsdisl(code,report_date,report_type): 

	"""
	减：营业外支出 - 其中:非流动资产处置损失（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONCASSETSDISL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_noncassetsdisl'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totprofit(code,report_date,report_type): 

	"""
	利润总额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_incotaxexpe(code,report_date,report_type): 

	"""
	减：所得税费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INCOTAXEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_incotaxexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netprofit(code,report_date,report_type): 

	"""
	净利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_conopernprofit(code,report_date,report_type): 

	"""
	净利润 - 持续经营净利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONOPERNPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_conopernprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharrigh(code,report_date,report_type): 

	"""
	净利润 - 少数股东损益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARRIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharrigh'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netProfitAfterExtraordinaryGainsAndLossesSingle(code,report_date,report_type): 

	"""
	净利润 - 扣除非经常性损益后的净利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARRIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netProfitAfterExtraordinaryGainsAndLossesSingle'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_basiceps(code,report_date,report_type): 

	"""
	基本每股收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BASICEPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_basiceps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_dilutedeps(code,report_date,report_type): 

	"""
	稀释每股收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DILUTEDEPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_dilutedeps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othercompinco(code,report_date,report_type): 

	"""
	其他综合收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERCOMPINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othercompinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parecompinco(code,report_date,report_type): 

	"""
	归属于母公司所有者的其他综合收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARECOMPINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parecompinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharinco(code,report_date,report_type): 

	"""
	归属于少数股东的其他综合收益（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_compincoamt(code,report_date,report_type): 

	"""
	综合收益总额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列COMPINCOAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_compincoamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parecompincoamt(code,report_date,report_type): 

	"""
	归属于母公司股东的综合收益总额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARECOMPINCOAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parecompincoamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharincoamt(code,report_date,report_type): 

	"""
	归属于少数股东的综合收益总额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARINCOAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharincoamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashnetr(code,report_date,report_type): 

	"""
	现金及现金等价物净增加额 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashnetr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mananetr(code,report_date,report_type): 

	"""
	经营活动产生的现金流量净额 （元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MANANETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mananetr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invnetcashflow(code,report_date,report_type): 

	"""
	投资活动产生的现金流量净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVNETCASHFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invnetcashflow'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finnetcflow(code,report_date,report_type): 

	"""
	筹资活动产生的现金流量净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINNETCFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finnetcflow'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finalcashbala(code,report_date,report_type): 

	"""
	期末现金及现金等价物余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINALCASHBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finalcashbala'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_laborgetcash(code,report_date,report_type): 

	"""
	销售商品、提供劳务收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LABORGETCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_laborgetcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_taxrefd(code,report_date,report_type): 

	"""
	收到的税费返还（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TAXREFD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_taxrefd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_receotherbizcash(code,report_date,report_type): 

	"""
	收到其他与经营活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEOTHERBIZCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_receotherbizcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcashinfl(code,report_date,report_type): 

	"""
	经营活动现金流入小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZCASHINFL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizcashinfl'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_labopayc(code,report_date,report_type): 

	"""
	购买商品、接受劳务支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LABOPAYC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_labopayc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payworkcash(code,report_date,report_type): 

	"""
	支付给职工以及为职工支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYWORKCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payworkcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paytax(code,report_date,report_type): 

	"""
	支付的各项税费（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYTAX,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_paytax'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payacticash(code,report_date,report_type): 

	"""
	支付其他与经营活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYACTICASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payacticash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcashoutf(code,report_date,report_type): 

	"""
	经营活动现金流出小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZCASHOUTF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizcashoutf'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_withinvgetcash(code,report_date,report_type): 

	"""
	收回投资收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列WITHINVGETCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_withinvgetcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveretugetcash(code,report_date,report_type): 

	"""
	取得投资收益收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVERETUGETCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveretugetcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedassetnetc(code,report_date,report_type): 

	"""
	处置固定资产、无形资产和其他长期资产收回的现金净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSETNETC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedassetnetc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subsnetc(code,report_date,report_type): 

	"""
	处置子公司及其他营业单位收到的现金净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSNETC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subsnetc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_receinvcash(code,report_date,report_type): 

	"""
	收到其他与投资活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEINVCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_receinvcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invcashinfl(code,report_date,report_type): 

	"""
	投资活动现金流入小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVCASHINFL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invcashinfl'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_acquassetcash(code,report_date,report_type): 

	"""
	购建固定资产、无形资产和其他长期资产支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACQUASSETCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_acquassetcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invpayc(code,report_date,report_type): 

	"""
	投资支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVPAYC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invpayc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subspaynetcash(code,report_date,report_type): 

	"""
	取得子公司及其他营业单位支付的现金净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSPAYNETCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subspaynetcash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payinvecash(code,report_date,report_type): 

	"""
	支付其他与投资活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYINVECASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payinvecash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invcashoutf(code,report_date,report_type): 

	"""
	投资活动现金流出小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVCASHOUTF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invcashoutf'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invrececash(code,report_date,report_type): 

	"""
	吸收投资收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVRECECASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invrececash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subsrececash(code,report_date,report_type): 

	"""
	其中：子公司吸收少数股东投资收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSRECECASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subsrececash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_recefromloan(code,report_date,report_type): 

	"""
	取得借款收到的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEFROMLOAN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_recefromloan'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_recefincash(code,report_date,report_type): 

	"""
	收到其他与筹资活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEFINCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_recefincash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fincashinfl(code,report_date,report_type): 

	"""
	筹资活动现金流入小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINCASHINFL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fincashinfl'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_debtpaycash(code,report_date,report_type): 

	"""
	偿还债务支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEBTPAYCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_debtpaycash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_diviprofpaycash(code,report_date,report_type): 

	"""
	分配股利、利润或偿付利息支付的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DIVIPROFPAYCASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_diviprofpaycash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subspaydivid(code,report_date,report_type): 

	"""
	其中：子公司支付给少数股东的股利、利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSPAYDIVID,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subspaydivid'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finrelacash(code,report_date,report_type): 

	"""
	支付其他与筹资活动有关的现金（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINRELACASH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finrelacash'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fincashoutf(code,report_date,report_type): 

	"""
	筹资活动现金流出小计（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINCASHOUTF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fincashoutf'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_chgexchgchgs(code,report_date,report_type): 

	"""
	汇率变动对现金及现金等价物的影响（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CHGEXCHGCHGS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_chgexchgchgs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inicashbala(code,report_date,report_type): 

	"""
	期初现金及现金等价物余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INICASHBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inicashbala'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netprofit_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 净利润（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netprofit_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_asseimpa_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 加：资产减值准备（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSEIMPA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_asseimpa_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assedepr_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 固定资产折旧、油气资产折耗、生产性生物资产折旧（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSEDEPR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_assedepr_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_intaasseamor_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 无形资产摊销（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTAASSEAMOR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_intaasseamor_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_longdefeexpenamor_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 长期待摊费用摊销（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LONGDEFEEXPENAMOR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_longdefeexpenamor_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_dispfixedassetloss_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 处置固定资产、无形资产和其他长期资产的损失（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DISPFIXEDASSETLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_dispfixedassetloss_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedassescraloss_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 固定资产报废损失（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSESCRALOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedassescraloss_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuechgloss_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 公允价值变动损失（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列VALUECHGLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuechgloss_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finexpe_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 财务费用（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finexpe_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveloss_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 投资损失（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVELOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveloss_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_defetaxassetdecr_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 递延所得税资产减少（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEFETAXASSETDECR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_defetaxassetdecr_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_defetaxliabincr_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 递延所得税负债增加（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEFETAXLIABINCR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_defetaxliabincr_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveredu_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 存货的减少（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVEREDU,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveredu_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_receredu_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 经营性应收项目的减少（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEREDU,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_receredu_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payaincr_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 经营性应付项目的增加（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYAINCR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payaincr_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_other_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 其他（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHER,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_other_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biznetcflow_cfs(code,report_date,report_type): 

	"""
	将净利润调节为经营活动现金流量 - 间接法-经营活动产生的现金流量净额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZNETCFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biznetcflow_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expiconvbd_cfs(code,report_date,report_type): 

	"""
	不涉及现金收支的重大投资和筹资活动 - 一年内到期的可转换公司债券（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EXPICONVBD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expiconvbd_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finfixedasset_cfs(code,report_date,report_type): 

	"""
	不涉及现金收支的重大投资和筹资活动 - 融资租入固定资产（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINFIXEDASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finfixedasset_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashfinalbala_cfs(code,report_date,report_type): 

	"""
	3、现金及现金等价物净变动情况 - 现金的期末余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHFINALBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashfinalbala_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashopenbala_cfs(code,report_date,report_type): 

	"""
	3、现金及现金等价物净变动情况 - 现金的期初余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHOPENBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashopenbala_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equfinalbala_cfs(code,report_date,report_type): 

	"""
	3、现金及现金等价物净变动情况 - 现金等价物的期末余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUFINALBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_equfinalbala_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equopenbala_cfs(code,report_date,report_type): 

	"""
	3、现金及现金等价物净变动情况 - 现金等价物的期初余额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUOPENBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_equopenbala_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashneti_cfs(code,report_date,report_type): 

	"""
	3、现金及现金等价物净变动情况 - 间接法-现金及现金等价物的净增加额（元）report_type1- 合并期末2- 母公司期末3- 合并期初4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHNETI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashneti_cfs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_totalshare(code,trade_date): 

	"""
	股本指标-总股本，万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALSHARE,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_totalshare'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_circaamt(code,trade_date): 

	"""
	股本指标-流通A股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCAAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_circaamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_recircaamt(code,trade_date): 

	"""
	股本指标-限售A股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RECIRCAAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_recircaamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_ask(code,trade_date): 

	"""
	股本指标-A股合计 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ASK,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_ask'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_circbamt(code,trade_date): 

	"""
	股本指标-流通B股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCBAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_circbamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_recircbamt(code,trade_date): 

	"""
	股本指标-限售B股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RECIRCBAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_recircbamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_bsk(code,trade_date): 

	"""
	股本指标-B股合计 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BSK,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_bsk'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_circhamt(code,trade_date): 

	"""
	股本指标-流通H股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCHAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_circhamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_recirchamt(code,trade_date): 

	"""
	股本指标-限售H股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RECIRCHAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_recirchamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_hksk(code,trade_date): 

	"""
	股本指标-H股合计 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HKSK,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_hksk'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_othercircamt(code,trade_date): 

	"""
	股本指标-其他已流通股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OTHERCIRCAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_othercircamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_circskamt(code,trade_date): 

	"""
	股本指标-流通股合计 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCSKAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_circskamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limskamt(code,trade_date): 

	"""
	股本指标-限售股合计 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMSKAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limskamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_ncircamt(code,trade_date): 

	"""
	股本指标-未流通股（股改前适用） 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NCIRCAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_ncircamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_asharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-流通A股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ASHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_asharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_resasharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-限售A股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RESASHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_resasharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_totalasharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-A股合计占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALASHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_totalasharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_bsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-流通B股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_bsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_resbsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-限售B股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RESBSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_resbsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_totalbsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-B股合计占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALBSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_totalbsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_hsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-流通H股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_hsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_reshsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-限售H股占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RESHSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_reshsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_totalhsharerto(code,trade_date): 

	"""
	股本指标-占总股本比例-H股合计占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALHSHARERTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_totalhsharerto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_othercircskrto(code,trade_date): 

	"""
	股本指标-占总股本比例-其他已流通股份占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OTHERCIRCSKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_othercircskrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_circskrto(code,trade_date): 

	"""
	股本指标-占总股本比例-流通股合计占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCSKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_circskrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limskrto(code,trade_date): 

	"""
	股本指标-占总股本比例-限售股合计占总股本比例 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMSKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_limskrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_nonnegskrto(code,trade_date): 

	"""
	股本指标-占总股本比例-未流通股占总股本比例（股改前适用） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NONNEGSKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_share_nonnegskrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limstateamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售国家股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMSTATEAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limstateamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limstcorpamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售国有法人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMSTCORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limstcorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limdomecorpamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售境内法人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMDOMECORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limdomecorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limdomeindiamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售境内自然人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMDOMEINDIAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limdomeindiamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limmanageramt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售高管持股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMMANAGERAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limmanageramt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limforecorpamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售境外法人持股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMFORECORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limforecorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_limforeindiamt(code,trade_date): 

	"""
	股本指标-限售股份明细-限售境外自然人持股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LIMFOREINDIAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_limforeindiamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_tstateamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-非流通国家股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TSTATEAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_tstateamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_tstatecorpamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-非流通国有法人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TSTATECORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_tstatecorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_tdomesocicorpamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-非流通境内非国有法人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TDOMESOCICORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_tdomesocicorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_potherproamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-非流通自然人发起人股 万股 TODO 取的 POTHERPROAMT-除国家发起人、境内法人发起人、境外法人发起人以外的其他发起人股TODO 同花顺取值：000100 在 20060418 这一天为 64705.4813 万股；财汇为 41163.632900 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列POTHERPROAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_potherproamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_transferplavol(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-转配股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSFERPLAVOL,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_transferplavol'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_manageraamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-非流通高管股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MANAGERAAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_manageraamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_staffskamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-内部职工股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列STAFFSKAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_staffskamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_preferskamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-优先股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PREFERSKAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_preferskamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_tforecorpamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-境外法人股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TFORECORPAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_tforecorpamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_share_otherncircamt(code,trade_date): 

	"""
	股本指标-股改前非流通股明细-其他非流通股 万股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OTHERNCIRCAMT,单位为万股,数据类型为number
	"""

	path = server_ip + '/get_s_share_otherncircamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_shholdername(code,trade_date,rank): 

	"""
	股东指标-大股东名称此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHHOLDERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_shholdername'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holderamt(code,trade_date,rank): 

	"""
	股东指标-大股东持有数量  股此处的日期为日历日，以报告期为变动日期rank 不支持取top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holderamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdersumchg(code,trade_date,rank): 

	"""
	股东指标-大股东持股较上期增减  股此处的日期为日历日，以报告期为变动日期rank 不支持取 top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERSUMCHG,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdersumchg'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holderrto(code,trade_date,rank): 

	"""
	股东指标-大股东持股比例  %此处的日期为日历日，以报告期为变动日期rank 不支持取 top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holderrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_shholdertype(code,trade_date,rank): 

	"""
	股东指标-大股东股东类型TODO wind 有“一般法人”分类，财汇是对应 “其他”此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHHOLDERTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_shholdertype'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_shholdernature(code,trade_date,rank): 

	"""
	股东指标-大股东持股股份性质  此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHHOLDERNATURE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_shholdernature'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_shholdername_circ(code,trade_date,rank): 

	"""
	股东指标-流通股东名称此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHHOLDERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_shholdername_circ'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holderamt_circ(code,trade_date,rank): 

	"""
	股东指标-流通股东持股数量  股此处的日期为日历日，以报告期为变动日期rank 不支持取 top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holderamt_circ'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdersumchg_circ(code,trade_date,rank): 

	"""
	股东指标-流通股动持股较上期增减  股此处的日期为日历日，以报告期为变动日期rank 不支持取 top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERSUMCHG,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdersumchg_circ'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holderrto_circ(code,trade_date,rank): 

	"""
	股东指标-流通股东持股比例  %此处的日期为日历日，以报告期为变动日期rank 不支持取 top3、top5、top10

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holderrto_circ'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_shholdernature_circ(code,trade_date,rank): 

	"""
	股东指标-流通股东持股股份性质  此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHHOLDERNATURE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_holder_shholdernature_circ'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_top10holderamt(code,trade_date): 

	"""
	股东指标-前十大股东持股数量合计  股此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_top10holderamt'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_top10holderrto(code,trade_date): 

	"""
	股东指标-前十大股东持股比例合计  %此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_top10holderrto'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_top10holderamt_cric(code,trade_date): 

	"""
	股东指标-前十大流通股东持股数量合计  股此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_top10holderamt_cric'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_top10holderrto_cric(code,trade_date): 

	"""
	股东指标-前十大流通股东持股占总股本比例  %此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HOLDERRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_top10holderrto_cric'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_top10pctoffloatshares_cric(code,trade_date): 

	"""
	股东指标-前十大流通股东持股占流通股比例  %此处的日期为日历日，以报告期为变动日期

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCTOFFLOATSHARES,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_top10pctoffloatshares_cric'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_totalshamt(code,report_date): 

	"""
	股东指标-股东户数-股东户数 (户)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTALSHAMT,单位为户,数据类型为number
	"""

	path = server_ip + '/get_s_holder_totalshamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_totalshamtgq(code,report_date): 

	"""
	股东指标-股东户数-股东户数季度变化 (户)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTALSHAMTGQ,单位为户,数据类型为number
	"""

	path = server_ip + '/get_s_holder_totalshamtgq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_totalshamtgrq(code,report_date): 

	"""
	股东指标-股东户数-股东户数季度增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTALSHAMTGRQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_totalshamtgrq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_kavgsh(code,report_date): 

	"""
	股东指标-股东户数-户均持股数量 (股)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列KAVGSH,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_kavgsh'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_kavgshgq(code,report_date): 

	"""
	股东指标-股东户数-户均持股数季度变化 (股)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列KAVGSHGQ,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_kavgshgq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_avgholdsumgrq(code,report_date): 

	"""
	股东指标-股东户数-户均持股数季度增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGHOLDSUMGRQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_avgholdsumgrq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_avgholdsumgrhalfyear(code,report_date): 

	"""
	股东指标-股东户数-户均持股数半年增长率 (%)只取报告期时间，相对半年前报告期

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGHOLDSUMGRHALFYEAR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_avgholdsumgrhalfyear'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_avgholdsumgrhalyear(code,report_date): 

	"""
	股东指标-股东户数-户均持股数年增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGHOLDSUMGRHALYEAR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_avgholdsumgrhalyear'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdproportionpacc(code,report_date): 

	"""
	股东指标-股东户数-户均持股比例 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDPROPORTIONPACC,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdproportionpacc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_proportionchg(code,report_date): 

	"""
	股东指标-股东户数-相对上一报告期户均持股比例变化 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROPORTIONCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_proportionchg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_proportiongrq(code,report_date): 

	"""
	股东指标-股东户数-户均持股比例季度增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROPORTIONGRQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_proportiongrq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_proportiongrhalfyear(code,report_date): 

	"""
	股东指标-股东户数-户均持股比例半年增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROPORTIONGRHALFYEAR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_proportiongrhalfyear'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_proportiongrhalyear(code,report_date): 

	"""
	股东指标-股东户数-户均持股比例年增长率 (%)只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROPORTIONGRHALYEAR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_proportiongrhalyear'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_allogr(code,report_date): 

	"""
	股东指标-机构持股-机构持股数量合计 股只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_allogr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_fund(code,report_date): 

	"""
	股东指标-机构持股-基金持股数量 股所选类型：13 证券投资基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_fund'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_broker(code,report_date): 

	"""
	股东指标-机构持股-券商持股数量 股所选类型：12 证券公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_broker'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_brokerprd(code,report_date): 

	"""
	股东指标-机构持股-券商集合理财产品持股数量  股所选类型：14 集合理财计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_brokerprd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_qfii(code,report_date): 

	"""
	股东指标-机构持股-QFII持股数量 股所选类型：1 QFII只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_qfii'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_sif(code,report_date): 

	"""
	股东指标-机构持股-社保基金持股数量 股所选类型： 8 全国社保基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_sif'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_corpann(code,report_date): 

	"""
	股东指标-机构持股-企业年金持股数量  股所选类型：17 企业年金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_corpann'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_trustp(code,report_date): 

	"""
	股东指标-机构持股-信托计划持股数量   股所选类型：15 信托计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_trustp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_insurcrop(code,report_date): 

	"""
	股东指标-机构持股-保险机构持股数量  股所选类型：2 保险公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_insurcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_university(code,report_date): 

	"""
	股东指标-机构持股-高等院校持股数量  股所选类型：4 高校只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_university'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_investcorp(code,report_date): 

	"""
	股东指标-机构持股-投资公司持股数量  股所选类型：10 投资公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_investcorp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_fundmagc(code,report_date): 

	"""
	股东指标-机构持股-基金管理公司持股数量  股所选类型：6 基金管理公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_fundmagc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_fundmagp(code,report_date): 

	"""
	股东指标-机构持股-资产管理计划持股数量  股所选类型：18  基金资产管理计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_fundmagp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_insurproduct(code,report_date): 

	"""
	股东指标-机构持股-保险产品持股数量  股所选类型：16 保险产品只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_insurproduct'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_listnfcrop(code,report_date): 

	"""
	股东指标-机构持股-非金融类上市公司持股数量  股所选类型：9 上市公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_listnfcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_othercrop(code,report_date): 

	"""
	股东指标-机构持股-其他类型机构持股数量  股所选类型：99 其它只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_othercrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_finaninstit(code,report_date): 

	"""
	股东指标-机构持股-金融机构持股数量  股所选类型：7 金融只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_finaninstit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdqty_financomp(code,report_date): 

	"""
	股东指标-机构持股-财务公司持股数量  股所选类型：3 财务公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDQTY,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdqty_financomp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_allogr(code,report_date): 

	"""
	股东指标-机构持股-机构持股比例合计 %只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_allogr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_fund(code,report_date): 

	"""
	股东指标-机构持股-基金持股比例 %所选类型：13 证券投资基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_fund'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_broker(code,report_date): 

	"""
	股东指标-机构持股-券商持股比例 %所选类型：12 证券公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_broker'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_brokerprd(code,report_date): 

	"""
	股东指标-机构持股-券商集合理财产品持股比例 %所选类型：14 集合理财计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_brokerprd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_qfii(code,report_date): 

	"""
	股东指标-机构持股-QFII持股比例 %所选类型：1 QFII只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_qfii'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_sif(code,report_date): 

	"""
	股东指标-机构持股-社保基金持股比例 %所选类型：8 全国社保基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_sif'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_corpann(code,report_date): 

	"""
	股东指标-机构持股-企业年金持股比例 %所选类型：17 企业年金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_corpann'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_trustp(code,report_date): 

	"""
	股东指标-机构持股-信托计划持股比例 %所选类型：15 信托计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_trustp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_insurcrop(code,report_date): 

	"""
	股东指标-机构持股-保险机构持股比例 %所选类型：2 保险公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_insurcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_university(code,report_date): 

	"""
	股东指标-机构持股-高等院校持股比例 %所选类型：4 高校只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_university'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_investcorp(code,report_date): 

	"""
	股东指标-机构持股-投资公司持股比例 %所选类型：10 投资公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_investcorp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_fundmagc(code,report_date): 

	"""
	股东指标-机构持股-基金管理公司持股比例 %所选类型：6 基金管理公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_fundmagc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_fundmagp(code,report_date): 

	"""
	股东指标-机构持股-资产管理计划持股比例 %所选类型：18  基金资产管理计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_fundmagp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_insurproduct(code,report_date): 

	"""
	股东指标-机构持股-保险产品持股比例 %所选类型：16 保险产品只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_insurproduct'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_listnfcrop(code,report_date): 

	"""
	股东指标-机构持股-非金融类上市公司持股比例 %所选类型：9 上市公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_listnfcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_othercrop(code,report_date): 

	"""
	股东指标-机构持股-其他类型机构持股比例 %所选类型：99 其它只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_othercrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_finaninstit(code,report_date): 

	"""
	股东指标-机构持股-金融机构持股比例 %所选类型：7 金融只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_finaninstit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdr_financomp(code,report_date): 

	"""
	股东指标-机构持股-财务公司持股比例 %所选类型：3 财务公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdr_financomp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_allogr(code,report_date): 

	"""
	股东指标-机构持股-机构持股占流通股比例合计 %只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_allogr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_fund(code,report_date): 

	"""
	股东指标-机构持股-基金持股占流通股比例  %所选类型：13 证券投资基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_fund'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_broker(code,report_date): 

	"""
	股东指标-机构持股-券商持股占流通股比例  %所选类型：12 证券公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_broker'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_brokerprd(code,report_date): 

	"""
	股东指标-机构持股-券商集合理财产品持股占流通股比例  %所选类型：14 集合理财计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_brokerprd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_qfii(code,report_date): 

	"""
	股东指标-机构持股-QFII持股占流通股比例  %所选类型：1 QFII只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_qfii'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_sif(code,report_date): 

	"""
	股东指标-机构持股-社保基金持股占流通股比例  %所选类型： 8 全国社保基金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_sif'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_corpann(code,report_date): 

	"""
	股东指标-机构持股-企业年金持股占流通股比例  %所选类型：17 企业年金只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_corpann'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_trustp(code,report_date): 

	"""
	股东指标-机构持股-信托计划持股占流通股比例  %所选类型：15 信托计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_trustp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_insurcrop(code,report_date): 

	"""
	股东指标-机构持股-保险机构持股占流通股比例  %所选类型：2 保险公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_insurcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_university(code,report_date): 

	"""
	股东指标-机构持股-高等院校持股占流通股比例  %所选类型：4 高校只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_university'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_investcorp(code,report_date): 

	"""
	股东指标-机构持股-投资公司持股占流通股比例  %所选类型：10 投资公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_investcorp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_fundmagc(code,report_date): 

	"""
	股东指标-机构持股-基金管理公司持股占流通股比例  %所选类型：6 基金管理公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_fundmagc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_fundmagp(code,report_date): 

	"""
	股东指标-机构持股-资产管理计划持股占流通股比例  %所选类型：18  基金资产管理计划只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_fundmagp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_insurproduct(code,report_date): 

	"""
	股东指标-机构持股-保险产品持股占流通股比例  %所选类型：16 保险产品只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_insurproduct'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_listnfcrop(code,report_date): 

	"""
	股东指标-机构持股-非金融类上市公司持股占流通股比例  %所选类型：9 上市公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_listnfcrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_othercrop(code,report_date): 

	"""
	股东指标-机构持股-其他类型机构持股占流通股比例  %所选类型：99 其它只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_othercrop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_finaninstit(code,report_date): 

	"""
	股东指标-机构持股-金融机构持股占流通股比例  %所选类型：7 金融只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_finaninstit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_holder_holdcr_financomp(code,report_date): 

	"""
	股东指标-机构持股-财务公司持股占流通股比例  %所选类型：3 财务公司只取报告期时间

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDCR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_holder_holdcr_financomp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_preclose_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-前收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_preclose_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_open_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-开盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_open_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_high_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-最高价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_high_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_low_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-最低价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_low_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_close_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_close_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_avgprice_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-均价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_avgprice_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-振幅(基于前收价) %日度振幅=（当期最高价－当期最低价)/上期收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-涨跌 元TODO 日度涨跌=今收盘-昨收盘，不用复权，与wind一致；注：同花顺是有复权的

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-涨跌幅 %TODO 日度涨跌幅=(今收盘-昨收盘)/昨收盘，不用复权

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-成交量 股注：成交量的除权因子使用方式与价格复权方式不同：后复权成交量n = 当天成交量 / 顺推累计除权因子前复权成交量n = 当天成交量 * 逆推累积除权因子

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_changebaseissup(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-相对发行价涨跌 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGEBASEISSUP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_changebaseissup'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_chgbaseissup(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-相对发行价涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHGBASEISSUP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_chgbaseissup'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_changebaseopen(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-相对上市首日开盘价涨跌 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGEBASEOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_changebaseopen'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_chgbaseopen(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-日行情-相对上市首日开盘价涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHGBASEOPEN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_chgbaseopen'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_nd(code,trade_date,n,adjust_type,count_type): 

	"""
	行情指标-日行情-相对n日涨跌 元N>0，表示从指定日期往后N个交易日；N<0，表示从指定日期往前N个交易日

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		n:整数,例如1
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_nd'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'n': {'value': n}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_nd(code,trade_date,n,adjust_type,count_type): 

	"""
	行情指标-日行情-相对N日收盘价涨跌幅 %N>0，表示从指定日期往后N个交易日；N<0，表示从指定日期往前N个交易日

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		n:整数,例如1
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_nd'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'n': {'value': n}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_transtatus_d(code,trade_date,count_type): 

	"""
	行情指标-日行情-交易状态

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRANSTATUS,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_transtatus_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_ntradersn_d(code,trade_date): 

	"""
	行情指标-日行情-停牌原因

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NTRADERSN,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_ntradersn_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_ltdate_d(code,trade_date): 

	"""
	行情指标-日行情-最近交易日

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_ltdate_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_preclose_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周前收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_preclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_open_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周开盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_open_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_high_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最高价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_high_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_low_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最低价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_low_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_close_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_close_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclose_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最高收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_maxclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclose_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最低收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_minclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_avgprice_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周均价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_avgprice_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周涨跌 元本周的收盘价 - 前一周的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周涨跌幅 %(本周的收盘价 - 前一周的收盘价)/前一周的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周日均涨跌幅 %(本周的收盘价 - 前一周的收盘价)/前一周的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratesum_w(code,trade_date,count_type): 

	"""
	行情指标-周行情-周累计换手率 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratesum_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratedavg_w(code,trade_date,count_type): 

	"""
	行情指标-周行情-周日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratedavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_w(code,trade_date,count_type): 

	"""
	行情指标-周行情-周成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周振幅 %（当周最高价-当周最低价）/上周收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_highdate_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最高价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_highdate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_lowdate_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最低价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_lowdate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclosedate_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最高收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_maxclosedate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclosedate_w(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-周最低收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_minclosedate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_preclose_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月前收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_preclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_open_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月开盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_open_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_high_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最高价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_high_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_low_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最低价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_low_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_close_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_close_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclose_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最高收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_maxclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclose_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最低收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_minclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_avgprice_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月均价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_avgprice_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月涨跌 元本周的收盘价 - 前一周的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月涨跌幅 %(本月的收盘价 - 前一月的收盘价)/前一月的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月日均涨跌幅 %(本月的收盘价 - 前一月的收盘价)/前一月的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratesum_m(code,trade_date,count_type): 

	"""
	行情指标-月行情-月累计换手率 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratesum_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratedavg_m(code,trade_date,count_type): 

	"""
	行情指标-月行情-月日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratedavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_m(code,trade_date,count_type): 

	"""
	行情指标-月行情-月成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月振幅 %（当月最高价-当月最低价）/上月收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_highdate_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最高价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_highdate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_lowdate_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最低价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_lowdate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclosedate_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最高收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_maxclosedate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclosedate_m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-月行情-月最低收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_minclosedate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_preclose_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年前收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_preclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_open_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年开盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_open_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_high_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最高价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_high_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_low_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最低价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_low_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_close_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_close_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclose_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最高收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_maxclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclose_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最低收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_minclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_avgprice_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年均价 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_avgprice_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年涨跌 元本年的收盘价 - 前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年涨跌幅 %(本年的收盘价 - 前一年的收盘价)/前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年日均涨跌幅 %(本年的收盘价 - 前一年的收盘价)/前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDMEAN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratesum_y(code,trade_date,count_type): 

	"""
	行情指标-年行情-年累计换手率 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratesum_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratedavg_y(code,trade_date,count_type): 

	"""
	行情指标-年行情-年日均换手率 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratedavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_y(code,trade_date,count_type): 

	"""
	行情指标-年行情-年成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年振幅 %（当月最高价-当月最低价）/上月收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_highdate_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最高价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_highdate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_lowdate_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最低价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_lowdate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclosedate_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最高收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_maxclosedate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclosedate_y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-年行情-年最低收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_minclosedate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_preclose_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间前收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_preclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_open_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间开盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_open_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_high_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最高价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_high_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_low_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最低价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_low_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_close_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_close_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclose_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最高收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_maxclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclose_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最低收盘价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_minclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_avgprice_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间均价 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_avgprice_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_change_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间涨跌 元本年的收盘价 - 前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_change_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间涨跌幅 %(本年的收盘价 - 前一年的收盘价)/前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间日均涨跌幅 %(本年的收盘价 - 前一年的收盘价)/前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDMEAN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratesum_int(code,start_date,end_date,count_type): 

	"""
	行情指标-任意区间行情-区间累计换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratesum_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratedavg_int(code,start_date,end_date,count_type): 

	"""
	行情指标-任意区间行情-区间日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratedavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_voldavg_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间日均成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_voldavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_int(code,start_date,end_date,count_type): 

	"""
	行情指标-任意区间行情-区间成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amountdavg_int(code,start_date,end_date,count_type): 

	"""
	行情指标-任意区间行情-区间日均成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amountdavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_tradedays_int(code,start_date,end_date,count_type): 

	"""
	行情指标-任意区间行情-区间交易天数 天

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRADEDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_price_tradedays_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_relativepchg_int(code,index,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-相对大盘区间涨跌幅 %(本年的收盘价 - 前一年的收盘价)/前一年的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		index:指数代码,例如000688
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RELATIVEPCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_relativepchg_int'
	data = {'code': {'symbols': code}, 'index': {'symbol': index}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间振幅 %（当月最高价-当月最低价）/上月收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDMEAN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_highdate_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最高价日 

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_highdate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_lowdate_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最低价日 

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_lowdate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_maxclosedate_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最高收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_maxclosedate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_minclosedate_int(code,start_date,end_date,adjust_type,count_type): 

	"""
	行情指标-任意区间行情-区间最低收盘价日 

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_price_minclosedate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_5d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-5日振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_10d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-10日振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_20d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-20日振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_60d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-60日振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_1m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1月振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_3m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近3月振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_6m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近6月振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_1y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1年振幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amplitude_q(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-本季以来振幅 %（当季最高价-当季最低价）/上季收盘价×100%

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_amplitude_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_5d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-5日涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_10d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-10日涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_20d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-20日涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_60d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-60日涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_1m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1月涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_3m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近3月涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_6m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近6月涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_1y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1年涨跌幅 %函数逻辑与" 行情指标-日行情-相对N日收盘价涨跌幅 % plasma_s_price_pchg_nd() "一致

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchg_q(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-本季以来涨跌幅 %(本季末收盘价 - 前一季末的收盘价)/前一季末的收盘价

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchg_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_5d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-5日日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_10d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-10日日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_20d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-20日日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_60d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-60日日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgavg_1m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1月日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgavg_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgavg_3m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近3月日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgavg_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgavg_6m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近6月日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgavg_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgavg_1y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1年日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgavg_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_pchgdavg_q(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-周行情-本季以来日均涨跌幅 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_pchgdavg_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_5d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-5日成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_10d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-10日成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_20d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-20日成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_60d(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-60日成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_1m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1月成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_3m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近3月成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_6m(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近6月成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_1y(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-近1年成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_vol_q(code,trade_date,adjust_type,count_type): 

	"""
	行情指标-固定区间行情-本季度以来成交量 股

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为股,数据类型为number
	"""

	path = server_ip + '/get_s_price_vol_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_5d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-5日成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_10d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-10日成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_20d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-20日成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_60d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-60日成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_1m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1月成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_3m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近3月成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_6m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1月成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_1y(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1年成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_amount_q(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-本季以来成交金额 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_price_amount_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_5d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-5日换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_10d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-10日换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_20d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-20日换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_60d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-60日换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_1m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1月换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_3m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近3月换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_6m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近6月换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrate_1y(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1年换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrate_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratesum_q(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-本季以来换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratesum_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_5d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-5日日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_5d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_10d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-10日日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_10d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_20d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-20日日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_20d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_60d(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-60日日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_60d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_1m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1月日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_3m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近3月日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_6m(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近6月日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnrateavg_1y(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-近1年日均换手率 %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnrateavg_1y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_price_turnratedavg_q(code,trade_date,count_type): 

	"""
	行情指标-固定区间行情-本季以来日均换手率 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_price_turnratedavg_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_d(code,trade_date): 

	"""
	行情指标-融资融券_日 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_w(code,trade_date): 

	"""
	行情指标-融资融券_周 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_m(code,trade_date): 

	"""
	行情指标-融资融券_月 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_q(code,trade_date): 

	"""
	行情指标-融资融券_季度 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_y(code,trade_date): 

	"""
	行情指标-融资融券_年 元

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mk_finmrghbal_int(code,start_date,end_date): 

	"""
	行情指标-融资融券_区间 元

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINMRGHBAL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mk_finmrghbal_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_d(code,trade_date): 

	"""
	资金流向-主力资金流入_日 元主力：指超大单与大单的合计财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_d(code,trade_date): 

	"""
	资金流向-主力资金流出_日 元主力：指超大单与大单的合计财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetflow_d(code,trade_date): 

	"""
	资金流向-主力资金净流入_日 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_d(code,trade_date): 

	"""
	资金流向-主力资金净流入占成交额比_日 %无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_d(code,trade_date): 

	"""
	资金流向-超大单买入金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_d(code,trade_date): 

	"""
	资金流向-超大单卖出金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_d(code,trade_date): 

	"""
	资金流向-超大单净流入额_日 元无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_d(code,trade_date): 

	"""
	资金流向-超大单净流入占成交额比_日 %无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_d(code,trade_date): 

	"""
	资金流向-大单买入金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_d(code,trade_date): 

	"""
	资金流向-大单卖出金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_d(code,trade_date): 

	"""
	资金流向-大单净流入额_日 元无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_d(code,trade_date): 

	"""
	资金流向-大单净流入占成交额比_日 %无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_d(code,trade_date): 

	"""
	资金流向-中单买入金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_d(code,trade_date): 

	"""
	资金流向-中单卖出金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_d(code,trade_date): 

	"""
	资金流向-中单净流入额_日 元无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_d(code,trade_date): 

	"""
	资金流向-中单净流入占成交额比_日 %无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_d(code,trade_date): 

	"""
	资金流向-小单买入金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_d(code,trade_date): 

	"""
	资金流向-小单卖出金额_日 元财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_d(code,trade_date): 

	"""
	资金流向-小单净流入额_日 元无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_d(code,trade_date): 

	"""
	资金流向-小单净流入占成交额比_日 元无净流入时，取值为None财汇标准为同时满足：TODO 同花顺、wind、财汇取值都不一致成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_w(code,trade_date): 

	"""
	资金流向-主力资金流入_周 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_w(code,trade_date): 

	"""
	资金流向-主力资金流出_周 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnet_w(code,trade_date): 

	"""
	资金流向-主力资金净流入_周 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnet_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_w(code,trade_date): 

	"""
	资金流向-主力资金净流入占成交额比_周 %无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_w(code,trade_date): 

	"""
	资金流向-超大单买入金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_w(code,trade_date): 

	"""
	资金流向-超大单卖出金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_w(code,trade_date): 

	"""
	资金流向-超大单净流入额_周 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_w(code,trade_date): 

	"""
	资金流向-超大单净流入占成交额比_周 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_w(code,trade_date): 

	"""
	资金流向-大单买入金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_w(code,trade_date): 

	"""
	资金流向-大单卖出金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_w(code,trade_date): 

	"""
	资金流向-大单净流入额_周 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_w(code,trade_date): 

	"""
	资金流向-大单净流入占成交额比_周 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_w(code,trade_date): 

	"""
	资金流向-中单买入金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_w(code,trade_date): 

	"""
	资金流向-中单卖出金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_w(code,trade_date): 

	"""
	资金流向-中单净流入额_周 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_w(code,trade_date): 

	"""
	资金流向-中单净流入占成交额比_周 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_w(code,trade_date): 

	"""
	资金流向-小单买入金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_w(code,trade_date): 

	"""
	资金流向-小单卖出金额_周 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_w(code,trade_date): 

	"""
	资金流向-小单净流入额_周 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_w(code,trade_date): 

	"""
	资金流向-小单净流入占成交额比_周 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_m(code,trade_date): 

	"""
	资金流向-主力资金流入_月 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_m(code,trade_date): 

	"""
	资金流向-主力资金流出_月 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnet_m(code,trade_date): 

	"""
	资金流向-主力资金净流入_月 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnet_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_m(code,trade_date): 

	"""
	资金流向-主力资金净流入占成交额比_月 %无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_m(code,trade_date): 

	"""
	资金流向-超大单买入金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_m(code,trade_date): 

	"""
	资金流向-超大单卖出金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_m(code,trade_date): 

	"""
	资金流向-超大单净流入额_月 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_m(code,trade_date): 

	"""
	资金流向-超大单净流入占成交额比_月 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_m(code,trade_date): 

	"""
	资金流向-大单买入金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_m(code,trade_date): 

	"""
	资金流向-大单卖出金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_m(code,trade_date): 

	"""
	资金流向-大单净流入额_月 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_m(code,trade_date): 

	"""
	资金流向-大单净流入占成交额比_月 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_m(code,trade_date): 

	"""
	资金流向-中单买入金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_m(code,trade_date): 

	"""
	资金流向-中单卖出金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_m(code,trade_date): 

	"""
	资金流向-中单净流入额_月 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_m(code,trade_date): 

	"""
	资金流向-中单净流入占成交额比_月 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_m(code,trade_date): 

	"""
	资金流向-小单买入金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_m(code,trade_date): 

	"""
	资金流向-小单卖出金额_月 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_m(code,trade_date): 

	"""
	资金流向-小单净流入额_月 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_m(code,trade_date): 

	"""
	资金流向-小单净流入占成交额比_月 %å无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_q(code,trade_date): 

	"""
	资金流向-主力资金流入_季 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_q(code,trade_date): 

	"""
	资金流向-主力资金流出_季 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnet_q(code,trade_date): 

	"""
	资金流向-主力资金净流入_季 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnet_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_q(code,trade_date): 

	"""
	资金流向-主力资金净流入占成交额比_季 %无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_q(code,trade_date): 

	"""
	资金流向-超大单买入金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_q(code,trade_date): 

	"""
	资金流向-超大单卖出金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_q(code,trade_date): 

	"""
	资金流向-超大单净流入额_季 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_q(code,trade_date): 

	"""
	资金流向-超大单净流入占成交额比_季 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_q(code,trade_date): 

	"""
	资金流向-大单买入金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_q(code,trade_date): 

	"""
	资金流向-大单卖出金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_q(code,trade_date): 

	"""
	资金流向-大单净流入额_季 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_q(code,trade_date): 

	"""
	资金流向-大单净流入占成交额比_季 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_q(code,trade_date): 

	"""
	资金流向-中单买入金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_q(code,trade_date): 

	"""
	资金流向-中单卖出金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_q(code,trade_date): 

	"""
	资金流向-中单净流入额_季 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_q(code,trade_date): 

	"""
	资金流向-中单净流入占成交额比_季 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_q(code,trade_date): 

	"""
	资金流向-小单买入金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_q(code,trade_date): 

	"""
	资金流向-小单卖出金额_季 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_q(code,trade_date): 

	"""
	资金流向-小单净流入额_季 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_q(code,trade_date): 

	"""
	资金流向-小单净流入占成交额比_季 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_q'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_y(code,trade_date): 

	"""
	资金流向-主力资金流入_年 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_y(code,trade_date): 

	"""
	资金流向-主力资金流出_年 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnet_y(code,trade_date): 

	"""
	资金流向-主力资金净流入_年 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnet_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_y(code,trade_date): 

	"""
	资金流向-主力资金净流入占成交额比_年 %无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_y(code,trade_date): 

	"""
	资金流向-超大单买入金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_y(code,trade_date): 

	"""
	资金流向-超大单卖出金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_y(code,trade_date): 

	"""
	资金流向-超大单净流入额_年 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_y(code,trade_date): 

	"""
	资金流向-超大单净流入占成交额比_年 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_y(code,trade_date): 

	"""
	资金流向-大单买入金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_y(code,trade_date): 

	"""
	资金流向-大单卖出金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_y(code,trade_date): 

	"""
	资金流向-大单净流入额_年 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_y(code,trade_date): 

	"""
	资金流向-大单净流入占成交额比_年 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_y(code,trade_date): 

	"""
	资金流向-中单买入金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_y(code,trade_date): 

	"""
	资金流向-中单卖出金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_y(code,trade_date): 

	"""
	资金流向-中单净流入额_年 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_y(code,trade_date): 

	"""
	资金流向-中单净流入占成交额比_年 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_y(code,trade_date): 

	"""
	资金流向-小单买入金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_y(code,trade_date): 

	"""
	资金流向-小单卖出金额_年 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_y(code,trade_date): 

	"""
	资金流向-小单净流入额_年 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_y(code,trade_date): 

	"""
	资金流向-小单净流入占成交额比_年 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_maininflow_int(code,start_date,end_date): 

	"""
	资金流向-主力资金流入_区间 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAININFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_maininflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainoutflow_int(code,start_date,end_date): 

	"""
	资金流向-主力资金流出_区间 元主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainoutflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnet_int(code,start_date,end_date): 

	"""
	资金流向-主力资金净流入_区间 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnet_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mainnetr_int(code,start_date,end_date): 

	"""
	资金流向-主力资金净流入占成交额比_区间 元无净流入时，取值为None主力：指超大单与大单的合计财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAINNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mainnetr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralinflow_int(code,start_date,end_date): 

	"""
	资金流向-超大单买入金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralinflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etraloutflow_int(code,start_date,end_date): 

	"""
	资金流向-超大单卖出金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etraloutflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnet_int(code,start_date,end_date): 

	"""
	资金流向-超大单净流入额_区间 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnet_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_etralnetr_int(code,start_date,end_date): 

	"""
	资金流向-超大单净流入占成交额比_区间 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ETRALNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_etralnetr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_linflow_int(code,start_date,end_date): 

	"""
	资金流向-大单买入金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_linflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_loutflow_int(code,start_date,end_date): 

	"""
	资金流向-大单卖出金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_loutflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnet_int(code,start_date,end_date): 

	"""
	资金流向-大单净流入额_区间 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnet_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_lnetr_int(code,start_date,end_date): 

	"""
	资金流向-大单净流入占成交额比_区间 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_lnetr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_minflow_int(code,start_date,end_date): 

	"""
	资金流向-中单买入金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_minflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_moutflow_int(code,start_date,end_date): 

	"""
	资金流向-中单卖出金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_moutflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnet_int(code,start_date,end_date): 

	"""
	资金流向-中单净流入额_区间 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnet_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_mnetr_int(code,start_date,end_date): 

	"""
	资金流向-中单净流入占成交额比_区间 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_mnetr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_sinflow_int(code,start_date,end_date): 

	"""
	资金流向-小单买入金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SINFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_sinflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_soutflow_int(code,start_date,end_date): 

	"""
	资金流向-小单卖出金额_区间 元财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SOUTFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_soutflow_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snet_int(code,start_date,end_date): 

	"""
	资金流向-小单净流入额_区间 元无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snet_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mf_snetr_int(code,start_date,end_date): 

	"""
	资金流向-小单净流入占成交额比_区间 %无净流入时，取值为None财汇标准为同时满足：成交量符合：小0-20000、中20000-100000、大100000-500000、超大>500000成交金额符合：小0-40000、中40000-200000、大200000-1000000、超大>1000000

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNETR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mf_snetr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pelfy(code,trade_date): 

	"""
	风险指标-市盈率LFY  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PELFY,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pelfy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pettm(code,trade_date): 

	"""
	风险指标-市盈率TTM  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PETTM,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pettm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pemrq(code,trade_date): 

	"""
	风险指标-市盈率MRQ  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PEMRQ,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pemrq'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pelfynpaaei(code,trade_date): 

	"""
	风险指标-市盈率LFY_扣除非经常性损益  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PELFYNPAAEI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pelfynpaaei'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pettmnpaaei(code,trade_date): 

	"""
	风险指标-市盈率TTM_扣除非经常性损益  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PETTMNPAAEI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pettmnpaaei'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pemrqnpaaei(code,trade_date): 

	"""
	风险指标-市盈率MRQ_扣除非经常性损益  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PEMRQNPAAEI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pemrqnpaaei'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pb(code,trade_date): 

	"""
	风险指标-市净率  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pb'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pslfy(code,trade_date): 

	"""
	风险指标-市销率LFY  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PSLFY,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pslfy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_psttm(code,trade_date): 

	"""
	风险指标-市销率TTM  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PSTTM,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_psttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_psmrq(code,trade_date): 

	"""
	风险指标-市销率MRQ  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PSMRQ,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_psmrq'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pclfy(code,trade_date): 

	"""
	风险指标-市现率LFY  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCLFY,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pclfy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_pcttm(code,trade_date): 

	"""
	风险指标-市现率TTM  倍

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCTTM,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_pcttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_negotiablemv(code,trade_date): 

	"""
	风险指标-流通市值  元 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NEGOTIABLEMV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_negotiablemv'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_totmktcap1(code,trade_date): 

	"""
	风险指标-总市值 元计算逻辑：如果证券是A股：总市值＝A股收盘价×A股总股本；如果证券是B股：总市值＝B股收盘价×B股总股本×人民币外汇牌价  计算逻辑：

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_totmktcap1'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_totmktcap2(code,trade_date): 

	"""
	风险指标-公司总市值（总股本*A股未复权收盘价），元 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_totmktcap2'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_bsktotp(code,trade_date): 

	"""
	风险指标-B股总市值（按交易币种）  元 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BSKTOTP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_bsktotp'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_bskcircp(code,trade_date): 

	"""
	风险指标-B股流通市值（按交易币种）  元 

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BSKCIRCP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_bskcircp'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_dy(code,trade_date): 

	"""
	风险指标-股息率1 %  (滚动12月-按证监会统计口径)用过去一个完整日历年分红数据除以当前价格，对于指数计算时需要考虑按流通股本和总股本，从而有红利收益率1和红利收益率2之分

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_dy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuation_lydy(code,trade_date): 

	"""
	风险指标-股息率2 %  (滚动12月-按证监会统计口径)

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LYDY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_valuation_lydy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_beta52w(code,trade_date): 

	"""
	风险指标-贝塔系数（52周）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BETA52W,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_beta52w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_beta24m(code,trade_date): 

	"""
	风险指标-贝塔系数（24个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BETA24M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_beta24m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_beta60m(code,trade_date): 

	"""
	风险指标-贝塔系数（60个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BETA60M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_beta60m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_adjustbeta52w(code,trade_date): 

	"""
	风险指标-调整贝塔系数（52周）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ADJUSTBETA52W,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_adjustbeta52w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_adjustbeta24m(code,trade_date): 

	"""
	风险指标-调整贝塔系数（24个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ADJUSTBETA24M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_adjustbeta24m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_adjustbeta60m(code,trade_date): 

	"""
	风险指标-调整贝塔系数（60个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ADJUSTBETA60M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_adjustbeta60m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_volotility52w(code,trade_date): 

	"""
	风险指标-年化波动率（52周）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOLOTILITY52W,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_volotility52w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_volotility24m(code,trade_date): 

	"""
	风险指标-年化波动率（24个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOLOTILITY24M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_volotility24m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_volotility60m(code,trade_date): 

	"""
	风险指标-年化波动率（60个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOLOTILITY60M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_volotility60m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_decicoef52w(code,trade_date): 

	"""
	风险指标-可决系数（52周）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DECICOEF52W,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_decicoef52w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_decicoef24m(code,trade_date): 

	"""
	风险指标-可决系数（24个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DECICOEF24M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_decicoef24m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_decicoef60m(code,trade_date): 

	"""
	风险指标-可决系数（60个月）

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DECICOEF60M,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_decicoef60m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincome(code,trade_date,expt_type): 

	"""
	一致预期营业收入  万元expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincome'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincomeyoy(code,trade_date,expt_type): 

	"""
	一致预期营业收入同比  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincomeyoy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofit(code,trade_date,expt_type): 

	"""
	一致预期净利润  万元expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofit'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofityoy(code,trade_date,expt_type): 

	"""
	一致预期净利润同比  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofityoy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_eps(code,trade_date,expt_type): 

	"""
	一致预期每股收益  元expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_eps'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_epsyoy(code,trade_date,expt_type): 

	"""
	一致预期每股收益同比  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_epsyoy'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mrq(code,trade_date,expt_type): 

	"""
	一致预期每股净资产  元expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mrq'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_roe(code,trade_date,expt_type): 

	"""
	一致预期净资产收益率  % TODO 取自 TQ_EXPT_SKSTATPROFIT 表expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年统计区间选 5 - 所有

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_roe'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pe(code,trade_date,expt_type): 

	"""
	一致预期市盈率  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pe'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pb(code,trade_date,expt_type): 

	"""
	一致预期市净率  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pb'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_gm(code,trade_date,expt_type): 

	"""
	一致预期毛利率  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_gm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofitgr(code,trade_date,expt_type): 

	"""
	一致预期净利润2年复合增长率  %expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofitgr'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_peg(code,trade_date,expt_type): 

	"""
	一致预期PEG  -expt_type:  一致预期预测截止类型：'FY1' 指预测t+1年、'FY2' 指预测t+2年、'FY3' 指预测t+3年

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_expt_peg'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofitchg_1w(code,trade_date,expt_type): 

	"""
	一致预期净利润变化率（1周） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofitchg_1w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofitchg_1m(code,trade_date,expt_type): 

	"""
	一致预期净利润变化率（1月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofitchg_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofitchg_3m(code,trade_date,expt_type): 

	"""
	一致预期净利润变化率（3月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofitchg_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_netprofitchg_6m(code,trade_date,expt_type): 

	"""
	一致预期净利润变化率（6月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_netprofitchg_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincomechg_1w(code,trade_date,expt_type): 

	"""
	一致预期营业收入变化率（1周） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincomechg_1w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincomechg_1m(code,trade_date,expt_type): 

	"""
	一致预期营业收入变化率（1月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincomechg_1m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincomechg_3m(code,trade_date,expt_type): 

	"""
	一致预期营业收入变化率（3月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincomechg_3m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_mbizincomechg_6m(code,trade_date,expt_type): 

	"""
	一致预期营业收入变化率（6月） %

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_type:预测类型，['FY1' -预测t+1年、'FY2' -预测t+2年、'FY3' -预测t+3年],例如FY1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_mbizincomechg_6m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_type': {'type': expt_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_revenue_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测营业收入  万元expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REVENUE,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_revenue_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_revenuerate_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测营业收入增长率  % expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REVENUERATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_revenuerate_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_cprofit_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测归属母公司净利润  万元 expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CPROFIT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_cprofit_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_prate_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测净利润增长率  %expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_prate_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_eps_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测每股收益  元expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列EPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_eps_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_bvps_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测每股净资产  元expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BVPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_bvps_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_roe_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测净资产收益率  %expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ROE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_roe_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pe_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测市盈率（PE）  %expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pe_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pb_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测市净率（PB）  %expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pb_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_ebitda_insti(code,trade_date,year,expt_comp): 

	"""
	机构预测企业价值倍数（EV/EBITDA)  -expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列EBITDA,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_s_expt_ebitda_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_fisrtpdate_insti(code,trade_date,year,expt_comp): 

	"""
	机构首次预测时间expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPORTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_fisrtpdate_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_latestpdate_insti(code,trade_date,year,expt_comp): 

	"""
	机构最近预测时间expt_comp: 预测机构名称year：预测年度

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPORTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_latestpdate_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_fisrtrdate_insti(code,expt_comp,trade_date,year): 

	"""
	机构首次评级时间expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		expt_comp:券商名称,例如中信证券
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列REPORTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_fisrtrdate_insti'
	data = {'code': {'symbols': code}, 'expt_comp': {'type': expt_comp}, 'trade_date': {'dates': trade_date}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_latestrdate_insti(code,trade_date,expt_comp,year): 

	"""
	机构最近评级时间expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPORTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_latestrdate_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_rating_insti(code,trade_date,expt_comp,year): 

	"""
	机构投资评级（原始）expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RATING,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_rating_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_stdrating_insti(code,trade_date,expt_comp,year): 

	"""
	机构投资评级（标准化评级）expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列STDRATING,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_stdrating_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_radjustdir_insti(code,trade_date,expt_comp,year): 

	"""
	机构投资评级变动方向（较前次评级）expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RADJUSTDIR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_radjustdir_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_analystname_insti(code,trade_date,expt_comp): 

	"""
	机构评级研究员expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ANALYSTNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_analystname_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pricemax_insti(code,trade_date,expt_comp): 

	"""
	最高目标价expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PRICECAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pricemax_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_pricemin_insti(code,trade_date,expt_comp): 

	"""
	最低目标价expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PRICEFLOOR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_expt_pricemin_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_expt_title_insti(code,trade_date,expt_comp): 

	"""
	标题expt_comp: 预测机构名称

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		expt_comp:券商名称,例如中信证券
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TITLES,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_expt_title_insti'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'expt_comp': {'type': expt_comp}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_isforecast(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-是否披露业绩预告只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ISFORECAST,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perff_isforecast'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_globalexptmod(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-业绩预告类型只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列GLOBALEXPTMOD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perff_globalexptmod'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_exptorigtext(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-业绩预告摘要只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列EXPTORIGTEXT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perff_exptorigtext'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_retaprofitsinc(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-预计净利润变动幅度 % 取的"净利润预测增长预测(上限)"和”净利润预测增长预测(下限)“中绝对值较大者只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列RETAPROFITSINC,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_perff_retaprofitsinc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_retamaxprofits(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-预计净利润上限 元只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列RETAMAXPROFITS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_retamaxprofits'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_retaminprofits(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-预计净利润下限 元只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列RETAMINPROFITS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_retaminprofits'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_epsmaxfore(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-预计EPS上限 元只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列EPSMAXFORE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_epsmaxfore'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_epsminfore(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-预计EPS下限 元只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列EPSMINFORE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_epsminfore'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_baseepsbasic(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-去年同期每股收益 元 TODO 取的"每股收益(基本)"只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列EPSBASIC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_baseepsbasic'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_basenetprofit(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-去年同期净利润 元 只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NETPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perff_basenetprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_publishdate(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-业绩预告日期只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perff_publishdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perff_reportdate(code,report_date): 

	"""
	盈利预测-上市公司业绩预告-业绩预告报告期只取累计预测值:1一季报预测-同比、2中期预测-同比、3三季度(累积)预测-同比、4年度预测如果相同预测区间披露多次，则取披露日期最新的那条记录只要有业绩预告的披露日期，就当作是披露了业绩预告

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SESSIONENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perff_reportdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_isforecast(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报披露日

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_perfq_isforecast'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_bizincome(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_营业收入 元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BIZINCOME,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_bizincome'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_operprofit(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_营业利润  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OPERPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_operprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_totprofit(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_利润总额  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_totprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_pparenetp(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_归属于母公司所有者的净利润  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PPARENETP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_pparenetp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_basiceps(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_基本每股收益  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BASICEPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_basiceps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_dilutedroe(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_净资产收益率（摊薄）  %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DILUTEDROE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_dilutedroe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_weightedroe(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_净资产收益率（加权）  %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列WEIGHTEDROE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_weightedroe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_totasset(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_总资产  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_totasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_totliab(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_总负债  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_totliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perfq_totsharequi(code,report_date): 

	"""
	盈利预测-上市公司业绩快报-业绩快报_净资产  元

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTSHAREQUI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_perfq_totsharequi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业总收入_单季（元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totbizinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业收入_单季（元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inteinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-利息收入_单季（元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inteinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_earnprem_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-已赚保费_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EARNPREM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_earnprem_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pounandcomminco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-手续费及佣金收入_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列POUNANDCOMMINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_pounandcomminco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_realsaleinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-房地产销售收入_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REALSALEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_realsaleinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherbizinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-其他业务收入_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERBIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherbizinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizcost_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业总成本_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totbizcost_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcost_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业成本_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizcost_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inteexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-利息支出_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INTEEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inteexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pounandcommexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-手续费及佣金支出_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列POUNANDCOMMEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_pounandcommexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_realsalecost_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-房地产销售成本_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REALSALECOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_realsalecost_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_surrgold_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-退保金_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SURRGOLD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_surrgold_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_compnetexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-赔付支出净额_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列COMPNETEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_compnetexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_contress_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-提取保险合同准备金净额_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CONTRESS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_contress_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_polidiviexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-保单红利支出_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列POLIDIVIEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_polidiviexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reinexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-分保费用_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REINEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_reinexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherbizcost_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-其他业务成本_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERBIZCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherbizcost_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztax_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业税金及附加_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZTAX,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_biztax_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-销售费用_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mgtexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-管理费用_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MGTEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mgtexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finlexpe_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-财务费用_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINLEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finlexpe_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_asseimpaloss_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-资产减值损失_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSEIMPALOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_asseimpaloss_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_valuechgloss_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-公允价值变动收益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列VALUECHGLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_valuechgloss_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-投资收益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assoinveprof_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-对联营企业和合营企业的投资收益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSOINVEPROF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_assoinveprof_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_exchggain_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-汇兑收益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EXCHGGAIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_exchggain_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_futuloss_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-期货损益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FUTULOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_futuloss_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_custinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-托管收益_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CUSTINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_custinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subsidyincome_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-补贴收入_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSIDYINCOME,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subsidyincome_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othbizprofit_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-其他业务利润_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHBIZPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othbizprofit_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprofit_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业利润_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opprofit_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonbizinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业外收入_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONBIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonbizinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonbizcost_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业外支出_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONBIZCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonbizcost_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nnonopi_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-营业外收支净额_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NNONOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nnonopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_noncassetsdisl_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-非流动资产处置损失_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONCASSETSDISL,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_noncassetsdisl_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totprofit_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-利润总额_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totprofit_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_incotax_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-所得税费用_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INCOTAX,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_incotax_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_unreinveloss_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-未确认投资损失_单季 （元）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列UNREINVELOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_unreinveloss_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetp_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-净利润_单季 （元） 归母report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parenetp_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parecompinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-归属于母公司所有者的其他综合收益_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARECOMPINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parecompinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharrigh_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-少数股东损益_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARRIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharrigh_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_othercompinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-其他综合收益_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERCOMPINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_othercompinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharinco_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-归属于少数股东的其他综合收益_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_compincoamt_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-综合收益总额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列COMPINCOAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_compincoamt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parecompamt_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-归属于母公司所有者的综合收益总额总额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARECOMPAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parecompamt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_minysharamt_q(code,report_date,report_type): 

	"""
	财务报表-一般企业财务报表-利润表（单季度）-归属于少数股东的综合收益总额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MINYSHARAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_minysharamt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_laborgetcashopi_q(code,report_date,report_type): 

	"""
	销售产品、提供劳务收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LABORGETCASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_laborgetcashopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cudepopayinopi_q(code,report_date,report_type): 

	"""
	客户存款和同业存放款项增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CUDEPOPAYINOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cudepopayinopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netincbopi_q(code,report_date,report_type): 

	"""
	向中央银行借款净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETINCBOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netincbopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fininstnetropi_q(code,report_date,report_type): 

	"""
	向其他金融机构投入资金增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FININSTNETROPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fininstnetropi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reoriprecashopi_q(code,report_date,report_type): 

	"""
	收到原保险合同保费取得的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REORIPRECASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_reoriprecashopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_rebncashopi_q(code,report_date,report_type): 

	"""
	收到再保险业务现金净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REBNCASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_rebncashopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_infdincreaseopi_q(code,report_date,report_type): 

	"""
	保户储金及投资款净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INFDINCREASEOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_infdincreaseopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_distrfininopi_q(code,report_date,report_type): 

	"""
	处置交易性金融资产净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DISTRFININOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_distrfininopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_infecocashopi_q(code,report_date,report_type): 

	"""
	收取利息、手续费及佣金的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INFECOCASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_infecocashopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fdsborrnetropi_q(code,report_date,report_type): 

	"""
	拆入资金收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FDSBORRNETROPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fdsborrnetropi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reincreasefinopi_q(code,report_date,report_type): 

	"""
	回购业务资金净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REINCREASEFINOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_reincreasefinopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_taxrefdopi_q(code,report_date,report_type): 

	"""
	收到的税费返还_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TAXREFDOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_taxrefdopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otherbizcashopi_q(code,report_date,report_type): 

	"""
	收到的其他与经营活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTHERBIZCASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otherbizcashopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcashinflopi_q(code,report_date,report_type): 

	"""
	经营活动现金流入小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZCASHINFLOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizcashinflopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_labopaycopo_q(code,report_date,report_type): 

	"""
	购买商品、接受劳务支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LABOPAYCOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_labopaycopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_culoadinopo_q(code,report_date,report_type): 

	"""
	客户贷款及垫款净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CULOADINOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_culoadinopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cbtrincreaseopo_q(code,report_date,report_type): 

	"""
	存放中央银行和同业款项净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CBTRINCREASEOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cbtrincreaseopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_oripaycashopo_q(code,report_date,report_type): 

	"""
	支付原保险合同赔付款项的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ORIPAYCASHOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_oripaycashopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payintecashopo_q(code,report_date,report_type): 

	"""
	支付利息、手续费及佣金的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYINTECASHOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payintecashopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashdivpayopo_q(code,report_date,report_type): 

	"""
	支付保单红利的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHDIVPAYOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashdivpayopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payworkcashopo_q(code,report_date,report_type): 

	"""
	支付给职工以及为职工支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYWORKCASHOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payworkcashopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paytaxopo_q(code,report_date,report_type): 

	"""
	支付的各项税费_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYTAXOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_paytaxopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payacticashopo_q(code,report_date,report_type): 

	"""
	支付的其他与经营活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYACTICASHOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payacticashopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizcashoutfopo_q(code,report_date,report_type): 

	"""
	经营活动现金流出小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZCASHOUTFOPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_bizcashoutfopo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mananetr_q(code,report_date,report_type): 

	"""
	经营活动产生的现金流量净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MANANETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mananetr_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_withinvgetcashinvi_q(code,report_date,report_type): 

	"""
	收回投资所收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列WITHINVGETCASHINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_withinvgetcashinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_inveretugetcashinvi_q(code,report_date,report_type): 

	"""
	取得投资收益所收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVERETUGETCASHINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_inveretugetcashinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedassetnetcinvi_q(code,report_date,report_type): 

	"""
	处置固定资产、无形资产和其他长期资产而收到的现金净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSETNETCINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fixedassetnetcinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_dispsubsgetcashinvi_q(code,report_date,report_type): 

	"""
	处置子公司及其他营业单位收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DISPSUBSGETCASHINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_dispsubsgetcashinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reducashpledinvi_q(code,report_date,report_type): 

	"""
	减少质押和定期存款所收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REDUCASHPLEDINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_reducashpledinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_receinvcashinvi_q(code,report_date,report_type): 

	"""
	收到的其他与投资活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEINVCASHINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_receinvcashinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invcashinflinvi_q(code,report_date,report_type): 

	"""
	投资活动现金流入小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVCASHINFLINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invcashinflinvi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_acquassetcashinvo_q(code,report_date,report_type): 

	"""
	购建固定资产、无形资产和其他长期资产所支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACQUASSETCASHINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_acquassetcashinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invpaycinvo_q(code,report_date,report_type): 

	"""
	投资所支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVPAYCINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invpaycinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_pleincinvo_q(code,report_date,report_type): 

	"""
	质押贷款净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PLEINCINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_pleincinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subspaynetcashinvo_q(code,report_date,report_type): 

	"""
	购买子公司及其他营业单位支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSPAYNETCASHINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subspaynetcashinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_incrcashpledinvo_q(code,report_date,report_type): 

	"""
	增加质押和定期存款所支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INCRCASHPLEDINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_incrcashpledinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_payinvecashinvo_q(code,report_date,report_type): 

	"""
	支付的其他和投资活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PAYINVECASHINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_payinvecashinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invcashoutfinvo_q(code,report_date,report_type): 

	"""
	投资活动现金流出小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVCASHOUTFINVO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invcashoutfinvo_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invnetcashflow_q(code,report_date,report_type): 

	"""
	投资活动产生的现金流量净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVNETCASHFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invnetcashflow_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invrececashfini_q(code,report_date,report_type): 

	"""
	吸收投资收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVRECECASHFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invrececashfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_subsrececashfini_q(code,report_date,report_type): 

	"""
	其中：子公司吸收少数股东权益性投资收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SUBSRECECASHFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_subsrececashfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_recefromloanfini_q(code,report_date,report_type): 

	"""
	借款所收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEFROMLOANFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_recefromloanfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashreisbdcfini_q(code,report_date,report_type): 

	"""
	发行债券收到的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHREISBDCFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashreisbdcfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_recefincashfini_q(code,report_date,report_type): 

	"""
	收到的其他与筹资活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RECEFINCASHFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_recefincashfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fincashinflfini_q(code,report_date,report_type): 

	"""
	筹资活动现金流入小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINCASHINFLFINI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fincashinflfini_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_debtpaycashfino_q(code,report_date,report_type): 

	"""
	偿还债务所支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DEBTPAYCASHFINO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_debtpaycashfino_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_diviprofpaycashfino_q(code,report_date,report_type): 

	"""
	分配股利、利润或偿付利息所支付的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DIVIPROFPAYCASHFINO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_diviprofpaycashfino_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finrelacashfino_q(code,report_date,report_type): 

	"""
	其中：子公司支付给少数股东的股利、利润_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINRELACASHFINO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finrelacashfino_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_otrefinactcofino_q(code,report_date,report_type): 

	"""
	支付其他与筹资活动有关的现金_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OTREFINACTCOFINO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_otrefinactcofino_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fincashoutffino_q(code,report_date,report_type): 

	"""
	筹资活动现金流出小计_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINCASHOUTFFINO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fincashoutffino_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finnetcflow_q(code,report_date,report_type): 

	"""
	筹资活动产生的现金流量净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINNETCFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finnetcflow_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_chgexchgchgs_q(code,report_date,report_type): 

	"""
	汇率变动对现金及现金等价物的影响_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CHGEXCHGCHGS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_chgexchgchgs_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashnetr_q(code,report_date,report_type): 

	"""
	现金及现金等价物净增加额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashnetr_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashequiopenbala_q(code,report_date,report_type): 

	"""
	加：期初现金及现金等价物余额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHEQUIOPENBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashequiopenbala_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashequfinbala_q(code,report_date,report_type): 

	"""
	期末现金及现金等价物余额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHEQUFINBALA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashequfinbala_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsfulldiluted(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-稀释 元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSFULLDILUTED,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsfulldiluted'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdiluted(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-期末股本摊薄 元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTED,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdiluted'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdilutednewp(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-最新股本摊薄  元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTEDNEWP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdilutednewp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsbasicepscut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-扣除/基本 元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSBASICEPSCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsbasicepscut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsfulldilutedcut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-扣除/稀释 元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSFULLDILUTEDCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsfulldilutedcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdilutedcut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股收益EPS-扣除/期末股本摊薄   元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTEDCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdilutedcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_naps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股资产BPS   元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NAPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_naps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_napspre(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股资产BPS（最新公告）   元 优先取披露的每股净资产,若无取归属母公司净资产/期末股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NAPSPRE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_napspre'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_toprevps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股营业总收入 元 = 营业总收入/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOPREVPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_toprevps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_oprevps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股营业收入 元 = 营业收入/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPREVPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_oprevps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_srps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股盈余公积金 元 = 盈余公积/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SRPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_srps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_reps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股留存收益 元 = (盈余公积+未分配利润)/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列REPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_reps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ncfps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股现金流量净额 元 = 现金及现金等价物净增加额/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NCFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ncfps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股息税前利润 元 = 息税前利润/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ebitps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fcffps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股企业自由现金流量 元 = 企业自由现金流量/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FCFFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fcffps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fcfeps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股股东自由现金流量 元 = 股东自由现金流量/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FCFEPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fcfeps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitdaps(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 每股EBITDA 元 = 息税折旧摊销前利润/股数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDAPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ebitdaps'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdiluted_ttm(code,trade_date,report_type): 

	"""
	财务指标-每股指标 每股收益EPS_TTM 元 每股收益_摊薄_归属母公司的净利润_期末股数report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列EPSDILUTED,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdiluted_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncfps_ttm(code,trade_date,report_type): 

	"""
	财务指标-每股指标 每股经营活动产生的现金流量净额_TTM 元 report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPNCFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opncfps_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_oprevps_ttm(code,trade_date,report_type): 

	"""
	财务指标-每股指标 每股营业收入_TTM 元 report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPREVPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_oprevps_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ncfps_ttm(code,trade_date,report_type): 

	"""
	财务指标-每股指标 每股现金流量净额_TTM 元 report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NCFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ncfps_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roic_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 投入资本回报率ROIC_TTM %   投入资本回报率_归属母公report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ROIC,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roic_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeavgd_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 净资产收益率ROE_TTM  %   净资产收益率_归属母公司的净资产_平均report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ROEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeavgd_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roa_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 总资产报酬率ROA_TTM  %   息税前利润)*2/(资产总计+资产总计))report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ROA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roa_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nptoavgta_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 总资产净利率ROA_归属母公司的净利润_TTM  %   归属于母公司所有者的净利润/[(资产总计+上年期末资产总计/2]report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NPTOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nptoavgta_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npconmstoavgta_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 总资产净利率ROA_TTM  %   总资产净利率_含少数股东损益的净利润_平均report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NPCONMSTOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_npconmstoavgta_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_snpmarginconms_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 销售净利率_TTM  %   销售净利率_含少数股东损益report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SNPMARGINCONMS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_snpmarginconms_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sgpmargin_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 销售毛利率_TTM  %   销售净利率_含少数股东损益report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SGPMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_sgpmargin_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tcexprt_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 销售期间费用率_TTM  %   成本费用率report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCEXPRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tcexprt_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizinco_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 净利润/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PROFITRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_bizinco_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprort_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标 营业利润/营业总收入_TTM  %   report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPPRORT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opprort_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ocoi_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 营业总成本/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OCOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ocoi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sctoi_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 营业费用/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_sctoi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mctoi_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 管理费用/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mctoi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fctoi_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 财务费用/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_fctoi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assetsioi_ttm(code,trade_date,report_type): 

	"""
	财务指标-盈利能力指标- 资产减值损失/营业总收入_TTM  %report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ASSETSIOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_assetsioi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeavg(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净资产收益率ROE_平均 % = 归属于母公司所有者的净利润/AVG(期末剔除其他权益后的归属母公司净资产+上年期末剔除其他权益后的归属母公司净资产)*100%TODO 同杜邦分析中的净资产收益率 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeavg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeweighted(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净资产收益率ROE_加权 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEWEIGHTED,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeweighted'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roedilutedcut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净资产收益率ROE_扣除/摊薄 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDILUTEDCUT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roedilutedcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeavgcut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净资产收益率ROE_扣除/平均 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEAVGCUT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeavgcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeweightedcut(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净资产收益率ROE_扣除/加权 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEWEIGHTEDCUT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeweightedcut'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roa(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 总资产报酬率 % = 息税前利润/AVG(期末资产总计+上年期末资产总计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roa'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nptoavgta(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 总资产净利率ROA_归属母公司的净利润 % = 归属于母公司所有者的净利润/AVG(期末资产总计+上年期末流资产总计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPTOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nptoavgta'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npconmstoavgta(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 总资产净利率ROA_含少数股东损益 % = 含少数股东损益的净利润/AVG(期末资产总计+上年期末流资产总计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCONMSTOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_npconmstoavgta'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roic(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 投入资本回报率ROIC % = (归属母公司的净利润+利息支出_扣除资本化利息)/AVG(期末剔除其他权益后的归属母公司净资产+期末总债务+上年期末剔除权益后的归属母公司净资产+上年期末总债务)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROIC,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roic'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeannual(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 年化净资产收益率 % = 净资产收益率*12/报告期所占月数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEANNUAL,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeannual'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roaannual(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 年化总资产报酬率 % = 净资产收益率*12/报告期所占月数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROAANNUAL,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roaannual'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roaaannual(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 年化总资产净利率 % = 总资产净利率*12/报告期所占月数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROAAANNUAL,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roaaannual'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_scostrt(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 销售成本率 % = 营业成本/营业收入*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SCOSTRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_scostrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tcexprt(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 销售期间费用率 % = 成本费用率 = 成本费用总额/营业收入*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TCEXPRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tcexprt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_prototcrt(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 成本费用利润率 % = 利润总额/成本费用总额*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PROTOTCRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_prototcrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_profitratio(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 净利润/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PROFITRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_profitratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprort(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 营业利润/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPPRORT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opprort'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitmargin(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 息税前利润率 = 息税前利润/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ebitmargin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ocoi(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 营业总成本/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OCOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ocoi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sctoi(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 营业费用/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_sctoi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fctoi(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 财务费用/营业总收入 %  TODO FCTOI 是不是财务费用report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_fctoi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mctoi(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 管理费用/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MCTOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mctoi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assetsioi(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 资产减值损失/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSETSIOI,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_assetsioi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_assetsiop(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- 资产减值损失/营业利润 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ASSETSIOP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_assetsiop'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitdamargin(code,report_date,report_type): 

	"""
	财务指标-盈利能力指标- EBITDA/营业总收入 % report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDAMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ebitdamargin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opanitotp(code,report_date,report_type): 

	"""
	财务指标-收益质量指标- 经营活动净收益/利润总额 （%）经营活动净收益 = 净利润+处置固定资产、无形资产和其他长期资产的损失+固定资产报废损失+公允价值变动损失+财务费用+投资损失+递延所得税资产减少+递延所得税负债增加+处置投资性房地产的损失report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPANITOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opanitotp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgitotp(code,report_date,report_type): 

	"""
	财务指标-收益质量指标- 价值变动净收益/利润总额 （%）价值变动净收益 = 公允价值变动收益+投资收益+汇兑收益report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NVALCHGITOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgitotp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nnonopitotp(code,report_date,report_type): 

	"""
	财务指标-收益质量指标- 营业外收支净额/利润总额 （%）营业外收支净额 = 营业外收入-营业外支出report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NNONOPITOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nnonopitotp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_incotaxtotp(code,report_date,report_type): 

	"""
	财务指标-收益质量指标- 所得税/利润总额 （%）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INCOTAXTOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_incotaxtotp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcuttonp(code,report_date,report_type): 

	"""
	财务指标-收益质量指标- 扣除非经常性损益后的净利润/归属母公司的净利润 （%）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCUTTONP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_npcuttonp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opanitotp_ttm(code,trade_date,report_type): 

	"""
	财务指标-收益质量指标-经营活动净收益/利润总额_TTM（倍）report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPANITOTP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opanitotp_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgitotp_ttm(code,trade_date,report_type): 

	"""
	财务指标-收益质量指标-价值变动净收益/利润总额_TTM（倍） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NVALCHGITOTP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgitotp_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nnonopitotp_ttm(code,trade_date,report_type): 

	"""
	财务指标-收益质量指标-营业外收支净额/利润总额_TTM（倍） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NNONOPITOTP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_nnonopitotp_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_scashrevtoopirt_ttm(code,trade_date,report_type): 

	"""
	财务指标-现金流量指标-销售商品提供劳务收到的现金/营业收入_TTM （倍）report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SCASHREVTOOPIRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_scashrevtoopirt_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftosi_ttm(code,trade_date,report_type): 

	"""
	财务指标-现金流量指标-经营活动产生的现金流量净额/营业收入_TTM （倍）report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPNCFTOSI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftosi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opancftoopni_ttm(code,trade_date,report_type): 

	"""
	财务指标-现金流量指标-经营活动产生的现金流量净额/经营活动净收益_TTM（倍）report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPANCFTOOPNI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opancftoopni_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_scashrevtoopirt(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 销售商品提供劳务收到的现金/营业收入 （倍）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SCASHREVTOOPIRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_scashrevtoopirt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftosi(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 经营活动产生的现金流量净额/营业收入 （倍）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOSI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftosi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opancftoopni(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 经营活动产生的现金流量净额/经营活动净收益 （倍）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPANCFTOOPNI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opancftoopni'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_capextodepandamor(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 资本支出/折旧和摊销 = 资本性支出/(固定资产折旧+无形资产摊销+长期待摊费用摊销+投资性房地产折旧)report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CAPEXTODEPANDAMOR,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_capextodepandamor'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cfopro(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 经营活动产生的现金流量净额占比 % = 100 * 经营活动产生的现金流量净额/现金及现金等价物净增加额 report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CFOPRO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_cfopro'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invncashfrt(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 投资活动产生的现金流量净额占比 % = 投资活动产生的现金流量净额/现金及现金等价物净增加额*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列INVNCASHFRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_invncashfrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bffancashfrt(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 筹资活动产生的现金流量净额占比 % = 筹资活动产生的现金流量净额/现金及现金等价物净增加额*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BFFANCASHFRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_bffancashfrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftoopti(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 经营性现金净流量/营业总收入  倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOOPTI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftoopti'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashopindex(code,report_date,report_type): 

	"""
	财务指标-现金流量指标- 现金运营指数  倍 = 经营现金净流量/经营现金毛流量营业现金净流量=营业收入-付现成本-所得税 = =营业收入-营业成本＋非付现成本-所得税付现成本=营业成本－折旧与摊销=总成本－利息－折旧与摊销 ？ report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHOPINDEX,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_cashopindex'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roca(code,report_date,report_type): 

	"""
	财务指标-现金流量指标-全部资产现金回收率 = 经营活动产生的现金流量净额/AVG(期末资产总计+上年期末资产总计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROCA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roca'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_dolcratio(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 长期资本负债率 倍 长期负债合计/(剔除其他权益后的归属母公司净资产+长期负债合计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DOLCRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_dolcratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ltmassrt(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 长期资产适合率 % = (长期负债合计+所有者权益合计)/(长期股权投资+固定资产及清理合计+可供出售金融资产+持有至到期投资+其他债权投资+其他权益工具投资)*100%长期投资 = 长期股权投资+可供出售金融资产+持有至到期投资+其他债权投资+其他权益工具投资report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LTMASSRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ltmassrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_em(code,report_date,report_type): 

	"""
	财务指标-资本结构指标-权益乘数 同 杜邦财务指标- 权益乘数（倍） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_em'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_caa(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 流动资产/总资产 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CAA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_caa'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ncaa(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 非流动资产/总资产 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NCAA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ncaa'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tangasstota(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 有形资产/总资产 %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TANGASSTOTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tangasstota'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonclequity(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 非流动负债权益比率 % = 长期负债合计/剔除其他权益后的归属母公司净资产*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONCLEQUITY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nonclequity'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_clequity(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 流动负债权益比率 % = 流动负债合计/剔除其他权益后的归属母公司净资产*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CLEQUITY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_clequity'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equtoicconms(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 归属母公司股东的权益/全部投入资本 = 剔除其他权益后的归属母公司净资产/(所有者权益合计+总债务)*100%TODO 全部投入资本 = 所有者权益合计+总债务report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUTOICCONMS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_equtoicconms'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdebttotcap(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 带息债务/全部投入股本 % = 带息债务/(所有者权益合计+总债务)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TDEBTTOTCAP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tdebttotcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_shtliabtotliabrt(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 流动负债/负债合计  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHTLIABTOTLIABRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_shtliabtotliabrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_noncll(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 非流动负债/负债合计  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONCLL,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_noncll'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_capimortconms(code,report_date,report_type): 

	"""
	财务指标-资本结构指标- 资本固定化比率（含少数股权的净资产） = 非流动资产合计/所有者权益合计*100*  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CAPIMORTCONMS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_capimortconms'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashrt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 现金比率 （倍） = (衍生金融资产+交易性金融资产+货币资金)/流动负债合计report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_cashrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashtomdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 现金到期债务比 （倍）= 营业现金净流量/本期到期的债务，其中：本期到期的债务=本期到期长期负债 +本期应付票据report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CASHTOMDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_cashtomdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftointexp(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 现金流量利息保障倍数 （倍） = 经营活动产生的现金流量净额/利息支出report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOINTEXP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftointexp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equtotliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 归属母公司股东的权益/负债合计  倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUTOTLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_equtotliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_equtotdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 归属母公司股东的权益/带息债务 倍；带息债务=短期借款+应付票据+一年内到期的长期负债+应付短期债券+长期借款+应付债券款+交易性金融负债report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EQUTOTDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_equtotdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ntangatotdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 有形资产/带息债务 (倍)，其中：有形资产=剔除其他权益后的归属母公司净资产-无形资产-开发支出-商誉-长期待摊费用-递延税款借项report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NTANGATOTDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ntangatotdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ntangasstotliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 有形资产/负债合计 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NTANGASSTOTLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ntangasstotliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ntangasstondebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 有形资产/净债务 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NTANGASSTONDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ntangasstondebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitdatotdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 息税折旧摊销前利润/负债合计 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDATOTDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ebitdatotdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftotliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 经营活动产生的现金流量净额/负债合计 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOTLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftotliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftotdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 经营活动产生的现金流量净额/带息债务 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOTDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftotdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftocumliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 经营活动产生的现金流量净额/流动负债 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOCUMLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftocumliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftondabt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 经营活动产生的现金流量净额/净债务 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTONDABT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftondabt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncftoltmliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 经营活动产生的现金流量净额/非流动负债 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFTOLTMLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opncftoltmliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nfncftocurrliab(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 非筹资性现金净流量与流动负债的比率，其中：非筹资性现金流量净额＝经营性现金流量净额+投资性现金流量净额report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NFNCFTOCURRLIAB,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_nfncftocurrliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bffanctotdebtcover(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 非筹资性现金净流量与负债总额的比率，其中：非筹资性现金流量净额＝经营性现金流量净额+投资性现金流量净额即：筹资活动前现金流量净额债务保护倍数report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BFFANCTOTDEBTCOVER,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_bffanctotdebtcover'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitscover(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 已获利息倍数（EBIT/利息费用） 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITSCOVER,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ebitscover'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ltmdebttoworkcap(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 长期债务/营运资金 倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LTMDEBTTOWORKCAP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ltmdebttoworkcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdebttofart(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 有形净值债务率=负债合计/有形净资产*100%  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TDEBTTOFART,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tdebttofart'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nbvos(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 净债务/股权价值=净债务/总市值*100%  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NBVOS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nbvos'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdebttos(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 带息债务/股权价值=带息债务/总市值*100%  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TDEBTTOS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tdebttos'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitdatotd(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- EBITDA/带息债务  倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDATOTD,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ebitdatotd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitdatoiexp(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- EBITDA/利息费用  倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDATOIEXP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ebitdatoiexp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdtoebitda(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 全部债务/EBITDA  倍report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TDTOEBITDA,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_tdtoebitda'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ltmliabtota(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 长期负债比 = 长期负债 / 资产总额 report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LTMLIABTOTA,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_ltmliabtota'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mftoshtdebt(code,report_date,report_type): 

	"""
	财务指标-偿债能力指标- 货币基金/短期债务report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MFTOSHTDEBT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_mftoshtdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opcycle(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 营业周期=应收账款周转天数+存货周转天数（天） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPCYCLE,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_opcycle'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accpaytdays(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 应付账款周转天数=计算期天数/应付账款周转率（天），应付账款周转率=(营业成本+期末存货净额-上年期末存货净额)/期末和上年期末应付账款平均report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCPAYTDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_accpaytdays'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netopcycle(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 净营业周期=应收账款周转天数+存货周转天数-应付账款周转天数（天） = 营业周期 - 应付账款周转天数（天）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETOPCYCLE,单位为天,数据类型为number
	"""

	path = server_ip + '/get_s_netopcycle'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accrecgturnrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 应收账款周转率=营业总收入/期末和上年期末应收账款平均  （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCRECGTURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_accrecgturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_curassturnrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 流动资产周转率=营业总收入/期末和上年期末流动资产合计平均  （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CURASSTURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_curassturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_faturnrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 固定资产周转率=营业总收入/期末和上年期末固定资产及清理合计平均  （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FATURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_faturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ncaturnoverr(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 非流动资产周转率=营业总收入/AVG(期末非流动资产合计+上年期末非流动资产合计)  （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NCATURNOVERR,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_ncaturnoverr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nopcapturnrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 营运资金周转率=营业总收入/营运资本  （次）营运资本 = 流动资产合计-流动负债合计report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOPCAPTURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_nopcapturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_taturnrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 总资产周转率=营业总收入/期末和上年期末资产总计平均  （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TATURNRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_taturnrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_accpayrt(code,report_date,report_type): 

	"""
	财务指标-营运能力指标- 应付账款周转率=(营业成本+期末存货净额-上年期末存货净额)/期末和上年期末应付账款平均 （次）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ACCPAYRT,单位为次,数据类型为number
	"""

	path = server_ip + '/get_s_accpayrt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_basicepsyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 基本每股收益（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BASICEPSYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_basicepsyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_duiltepsyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 稀释每股收益（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DUILTEPSYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_duiltepsyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cfoperyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 每股经营活动产生的现金流量净额（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CFOPERYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_cfoperyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizincoyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 营业总收入同比增长率_ %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZINCOYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totbizincoyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_operinyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 营业收入（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPERINYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_operinyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalsalesyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 营业总额（同比增长率）% 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALSALESYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totalsalesyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_operproyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 营业利润（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPERPROYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_operproyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totalprofityoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 利润总额（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTALPROFITYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totalprofityoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netinpnrplyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 归属母公司股东的净利润-扣除非经常性损益（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETINPNRPLYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netinpnrplyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cfoyoyb(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 经营活动产生的现金流量净额（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CFOYOYB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_cfoyoyb'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roedyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 净资产收益率（摊薄）（同比增长率）%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roedyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paresharrighyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 净资产（同比增长率） %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARESHARRIGHYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_paresharrighyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totliabyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 总负债（同比增长率） %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTLIABYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totliabyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totassetyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 总资产（同比增长率） %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTASSETYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totassetyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netcashflowyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 现金净流量（同比增长率） % TODO 是否等于三类现金流量金额之和？

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETCASHFLOWYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netcashflowyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_curfdsyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 货币资金（同比增长率） %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列CURFDSYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_curfdsyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fixedasseimmoyoy(code,report_date,report_type): 

	"""
	财务指标-成长能力指标-同比增长- 固定资产（同比增长率） %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FIXEDASSEIMMOYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_fixedasseimmoyoy'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztotincoyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  营业总收入（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_biztotincoyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_biztotcostyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  营业总成本（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_biztotcostyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizincoyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  营业收入（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_bizincoyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_perprofityoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  营业利润（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_perprofityoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nopiyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  经营活动净收益（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nopiyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgityoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  价值变动净收益（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgityoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totprofityoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  利润总额（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totprofityoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netprofityoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  含少数股东损益的净利润（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netprofityoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetpyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  归属母公司股东的净利润（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetpyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcutyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  扣除非经常性损益后归属母公司的净利润（N年，增长率 % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_npcutyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mananetryoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  经营活动现金净流量（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mananetryoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totassetyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  总资产（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totassetyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_righaggryoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率 股东权益（含少数股东权益）（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_righaggryoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_paresharrighyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率 归属母公司股东的权益（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_paresharrighyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_smarginyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  销售利润率同比增长 = 主营业务利润/主营业务收入净额*100% %   主营业务利润 = 主营业务收入 - 主营业务成本 - 营业税金及附加

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_smarginyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roedilutedyoyn(code,report_date,year,report_type): 

	"""
	财务指标-成长能力指标-N年增长率  净资产收益率（摊薄）（N年，增长率） % 

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		year:整数,例如1
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roedilutedyoyn'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'year': {'value': year}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetptonpconms(code,report_date,report_type): 

	"""
	财务指标-杜邦财务指标- 归属母公司股东的净利润/含少数股东净利润  %report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETPTONPCONMS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetptonpconms'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npconmstotp(code,report_date,report_type): 

	"""
	财务指标-杜邦财务指标- 净利润/利润总额report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCONMSTOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_npconmstotp'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tptoebit(code,report_date,report_type): 

	"""
	财务指标-杜邦财务指标- 利润总额/息税前利润 (%)report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TPTOEBIT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tptoebit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totlibatoavgta(code,report_date,report_type): 

	"""
	财务指标-杜邦财务指标- 总资产负债率_平均 = 负债总额/AVG(期末资产总计+上年期末流资产总计)*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTLIBATOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totlibatoavgta'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opcaptotart(code,report_date,report_type): 

	"""
	财务指标-Z值预警- 营运资本/总资产（%）= 营运资金/资产总计*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPCAPTOTART,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opcaptotart'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_oprevtota(code,report_date,report_type): 

	"""
	财务指标-Z值预警- 营业收入/总资产（%）= 年化营业收入/平均总资产*100report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPREVTOTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_oprevtota'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tmptotliab(code,report_date,report_type): 

	"""
	财务指标-Z值预警- 当日总市值/负债总计（%）= 当日总市值/负债总计*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TMPTOTLIAB,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_tmptotliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitassets(code,report_date,report_type): 

	"""
	财务指标-Z值预警- 息税前利润/总资产（%）= 息税前利润/总资产*100% TODO 年化总资产报酬率=总资产报酬率*12/报告期所占月数 , 息税前利润/AVG(期末资产总计+上年期末资产总计)*100%  TQ_FIN_PRGINDICDATAreport_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITASSETS,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_ebitassets'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_retaintota(code,report_date,report_type): 

	"""
	财务指标-Z值预警- 留存收益/总资产（%）= (盈余公积+未分配利润)/资产总计*100%report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RETAINTOTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_retaintota'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_z(code,report_date,report_type): 

	"""
	财务指标-Z值预警- Z值（倍）=0.012(营运资本对总资产比率)+0.014(留存收益/总资产)+0.006(当日总市值/负债总计)+0.00999(营业收入/总资产)+0.033(年化总资产报酬率) report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列Z,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_z'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebit(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- EBIT=利润总额+(利息支出+减：资本化利息支出)(财务费用) （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ebit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ebitda(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- EBITDA=利润总额+ISNULL(ISNULL(利息支出+减：资本化利息支出,利息费用)，财务费用)+固定资产折旧+无形资产摊销+长期待摊费用摊销+投资性房地产折旧 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EBITDA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ebitda'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonreprofitloss(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- 非经常性损益 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONREPROFITLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonreprofitloss'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opgpmargin(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- 营业毛利润=营业收入-营业成本 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPGPMARGIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opgpmargin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nopi(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- 经营活动净收益=净利润+处置固定资产、无形资产和其他长期资产的损失+固定资产报废损失+公允价值变动损失+财务费用+投资损失+递延所得税资产减少+递延所得税负债增加+处置投资性房地产的损失 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nopi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgit(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表- 价值变动净收益=公允价值变动收益+投资收益+汇兑收益 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NVALCHGIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totic(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 全部投入资本 = 剔除其他权益后的归属母公司净资产+总债务 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTIC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totic'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_workcap(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 营运资金=流动资产合计-流动负债合计 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列WORKCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_workcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netopercap(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 净营运资本=流动资产合计-货币资金-交易性金融资产-应收利息-流动负债+短期债务 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETOPERCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netopercap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ntanga(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 有形资产净值=剔除其他权益后的归属母公司净资产-无形资产-开发支出-商誉-长期待摊费用-递延税款借项 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NTANGA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ntanga'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_retainedear(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 留存收益=盈余公积+未分配利润 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列RETAINEDEAR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_retainedear'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tcap(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 总资本=总债务+所有者权益合计 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_tcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdebt(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 总债务=长期债务+短期债务 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TDEBT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_tdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ndebt(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 净债务=总债务-货币资金 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NDEBT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ndebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_shtdebt(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 短期债务=短期借款+应付票据+一年内到期的长期负债+应付短期债券+交易性金融负债(该字段只计算非金融企业) （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SHTDEBT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_shtdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ltmdebt(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 长期债务=长期借款+应付债券款，该字段只计算非金融企业 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列LTMDEBT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ltmdebt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonintcurliabs(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 无息流动债务=流动负债合计-短期债务 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONINTCURLIABS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonintcurliabs'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nonintnoncurliab(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于资产负债表- 无息非流动债务=长期负债合计-长期债务 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NONINTNONCURLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nonintnoncurliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fcff(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表- 企业自由现金流量=期末流动负债合计-上年期末流动负债合计+期末流动资产合计-上年期末流动资产合计+息税前利润+固定资产折旧+无形资产摊销+长期待摊费用摊销+处置固定资产、无形资产和其他长期资产而收到的现金净额-所得税-购建固定资产、无形资产和其他长期资产所支付的现金 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FCFF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fcff'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_fcfe(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表- 股东自由现金流量=企业自由现金流量+(发行的新债-清偿的旧债) 元report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FCFE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_fcfe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_da(code,report_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表- 当期计提折旧与摊销=固定资产折旧、油气资产折耗、生产性生物资产折旧+无形资产摊销+长期待摊费用摊销+投资性房地产折旧 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_da'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizinco_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 营业总收入_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTBIZINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totbizinco_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizcost_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 营业总成本_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTBIZCOST,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totbizcost_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mgtexpe_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 管理费用_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MGTEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mgtexpe_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finlexpe_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 财务费用_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINLEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finlexpe_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_asseimpaloss_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 资产减值损失_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ASSEIMPALOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_asseimpaloss_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nopi_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 经营活动净收益_TTM （元） = 营业总收入-营业总成本report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nopi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgit_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 价值活动净收益_TTM （元） = 营业总收入-营业总成本report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NVALCHGIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgit_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprofit_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 营业利润_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OPPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opprofit_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nnonopi_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 营业外收支净额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NNONOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nnonopi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totprofit_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 利润总额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_totprofit_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netprofitconms_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 含少数股东损益的净利润_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NETPROFITCONMS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_netprofitconms_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetp_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 归属于母公司所有者的净利润_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PARENETP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_parenetp_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcut_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 扣除非经常性损益后的净利润_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列NPCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_npcut_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_laborgetcashopi_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于利润表TTM- 销售商品提供劳务收到的现金_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LABORGETCASHOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_laborgetcashopi_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mananetr_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表TTM- 经营活动产生的现金流量净额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MANANETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_mananetr_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_invnetcashflow_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表TTM- 投资活动产生的现金流量净额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列INVNETCASHFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_invnetcashflow_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finnetcflow_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表TTM- 筹资活动产生的现金流量净额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列FINNETCFLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_finnetcflow_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_cashnetr_ttm(code,trade_date,report_type): 

	"""
	财务指标-衍生科目-基于现金流量表TTM- 现金及现金等价物净增加额_TTM （元） report_type：3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CASHNETR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_cashnetr_ttm'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdiluted_q(code,report_date,report_type): 

	"""
	每股收益（摊薄）_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTED,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdiluted_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdilutedcut_q(code,report_date,report_type): 

	"""
	每股收益（扣除后摊薄）_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTEDCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdilutedcut_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_toprevps_q(code,report_date,report_type): 

	"""
	每股营业收入_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOPREVPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_toprevps_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opncfps_q(code,report_date,report_type): 

	"""
	每股经营活动现金净流量_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPNCFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opncfps_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ncfps_q(code,report_date,report_type): 

	"""
	每股现金流量净额_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NCFPS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_ncfps_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_epsdilutedop_q(code,report_date,report_type): 

	"""
	每股营业利润_单季 （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列EPSDILUTEDOP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_epsdilutedop_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_sgpmargin_q(code,report_date,report_type): 

	"""
	销售毛利率_单季 （%） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SGPMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_sgpmargin_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_snpmargin_q(code,report_date,report_type): 

	"""
	销售净利率_单季 （%） 归母report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SNPMARGIN,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_snpmargin_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roediluted_q(code,report_date,report_type): 

	"""
	净资产收益率（摊薄）_单季 （%） 归母report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDILUTED,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roediluted_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roedilutedcut_q(code,report_date,report_type): 

	"""
	净资产收益率（扣除后摊薄）_单季 （%） 归母report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEDILUTEDCUT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roedilutedcut_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_roeavg_q(code,report_date,report_type): 

	"""
	净资产收益率（平均）_单季 （%） 归母report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列ROEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_roeavg_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nptoavgta_q(code,report_date,report_type): 

	"""
	总资产净利率_单季 （%） 归母、平均report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPTOAVGTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_nptoavgta_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizcosttoinco_q(code,report_date,report_type): 

	"""
	营业总成本/营业总收入_单季 （%）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZCOSTTOINCO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totbizcosttoinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprort_q(code,report_date,report_type): 

	"""
	营业利润/营业总收入_单季 （%） 营业利润率report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPPRORT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opprort_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opexprt_q(code,report_date,report_type): 

	"""
	营业费用/营业总收入_单季 （%） 营业费用率，用的是主营业务收入 report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPEXPRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opexprt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetptoinco_q(code,report_date,report_type): 

	"""
	净利润/营业总收入_单季 （%）report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETPTOINCO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetptoinco_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_mgtexprt_q(code,report_date,report_type): 

	"""
	管理费用/营业总收入_单季 （%） 管理费用率，用的是主营业务收入 report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MGTEXPRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_mgtexprt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_finlexprt_q(code,report_date,report_type): 

	"""
	财务费用/营业总收入_单季 （%） 财务费用率，用的是主营业务收入 report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列FINLEXPRT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_finlexprt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opanitotp_q(code,report_date,report_type): 

	"""
	经营活动净收益/利润总额_单季 （%） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPANITOTP,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opanitotp_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgitotp_q(code,report_date,report_type): 

	"""
	价值变动净收益/利润总额_单季 （倍） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NVALCHGITOTP,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgitotp_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opancftoopni_q(code,report_date,report_type): 

	"""
	经营活动产生的现金流量净额/经营活动净收益_单季  （倍） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPANCFTOOPNI,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_opancftoopni_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_scashrevtoopirt_q(code,report_date,report_type): 

	"""
	销售商品提供劳务收到的现金/营业收入_单季  （倍） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列SCASHREVTOOPIRT,单位为倍,数据类型为number
	"""

	path = server_ip + '/get_s_scashrevtoopirt_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opgpmargin_q(code,report_date,report_type): 

	"""
	营业毛利润_单季  （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPGPMARGIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_opgpmargin_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_npcut_q(code,report_date,report_type): 

	"""
	扣除非经常性损益后的净利润_单季  （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NPCUT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_npcut_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nopi_q(code,report_date,report_type): 

	"""
	经营活动净收益_单季  （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NOPI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nopi_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_nvalchgit_q(code,report_date,report_type): 

	"""
	价值变动净收益_单季  （元） report_type：1- 合并期末、2- 母公司期末、3- 合并期初、4- 母公司期初

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NVALCHGIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_s_nvalchgit_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizincoyoy_q(code,report_date,report_type): 

	"""
	营业总收入同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZINCOYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totbizincoyoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_totbizincoqoq_q(code,report_date,report_type): 

	"""
	营业总收入环比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列TOTBIZINCOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_totbizincoqoq_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizincoyoy_q(code,report_date,report_type): 

	"""
	营业收入同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZINCOYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_bizincoyoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_bizincoqoq_q(code,report_date,report_type): 

	"""
	营业收入环比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列BIZINCOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_bizincoqoq_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprofityoy_q(code,report_date,report_type): 

	"""
	营业利润同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPPROFITYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opprofityoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_opprofitqoq_q(code,report_date,report_type): 

	"""
	营业利润环比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列OPPROFITQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_opprofitqoq_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netpyoy_q(code,report_date,report_type): 

	"""
	净利润同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETPYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netpyoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netpqoq_q(code,report_date,report_type): 

	"""
	净利润环比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETPYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netpqoq_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetpyoy_q(code,report_date,report_type): 

	"""
	归属母公司股东的净利润同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETPYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetpyoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_parenetpqoq_q(code,report_date,report_type): 

	"""
	归属母公司股东的净利润环比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列PARENETPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_parenetpqoq_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_netcashflowyoy_q(code,report_date,report_type): 

	"""
	现金净流量同比增长率_单季 % TODO 是否等于三类现金流量金额之和？

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列NETCASHFLOWYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_netcashflowyoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_manaetryoy_q(code,report_date,report_type): 

	"""
	经营性现金净流量同比增长率_单季 %

	Args:
		code:股票代码,例如['600745', '603986']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列MANANETRYOY,单位为%,数据类型为number
	"""

	path = server_ip + '/get_s_manaetryoy_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'report_type': {'type': report_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isinsymbol(symbols): 

	"""
	基本概况-国标委ISIN代码  TODO 不全

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISIN,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isinsymbol'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fsymbol(symbols): 

	"""
	基本概况-基金代码

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FSYMBOL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fsymbol'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdsname(symbols): 

	"""
	基本概况-基金简称

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDSNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdsname'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdname(symbols): 

	"""
	基本概况-基金全称

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdname'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_engname(symbols): 

	"""
	基本概况-基金英文简称

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ENGNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_engname'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_frontsymbol(symbols): 

	"""
	基本概况-基金前端代码

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FRONTSYMBOL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_frontsymbol'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_backsymbol(symbols): 

	"""
	基本概况-基金后端代码

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列BACKSYMBOL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_backsymbol'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_subcode(symbols): 

	"""
	基本概况-基金场内一级市场代码  TODO 取的是发行时的申购代码，但是很多为空

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SUBCODE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_subcode'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_subname(symbols): 

	"""
	基本概况-基金场内一级市场简称  TODO 取的是发行时的申购简称，但是很多为空

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SUBSNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_subname'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_dzhsymbol(symbols): 

	"""
	基本概况-大智慧代码

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列DZHSYMBOL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_dzhsymbol'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_dzhname(symbols): 

	"""
	基本概况-大智慧简称

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列DZHNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_dzhname'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fsymbolpre(symbols): 

	"""
	基本概况-转型前代码

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SYMBOLPRE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fsymbolpre'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fnamepre(symbols): 

	"""
	基本概况-转型前简称

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDSNAMEPRE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fnamepre'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdmethod(symbols): 

	"""
	基本概况-运作方式

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDMETHOD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdmethod'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdtype(symbols): 

	"""
	基本概况-基金类型大智慧（公司型、契约型）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdtype'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdtypezjh(symbols): 

	"""
	基本概况-基金类型证监会 

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdtypezjh'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fdtypeyh(symbols): 

	"""
	基本概况-基金类型银河 000120

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fdtypeyh'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isQDII(symbols): 

	"""
	基本概况-是否QDII基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISQDII,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isQDII'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isETF(symbols): 

	"""
	基本概况-是否ETF基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISETF,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isETF'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isLOF(symbols): 

	"""
	基本概况-是否L0F基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISLOF,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isLOF'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isFOF(symbols): 

	"""
	基本概况-是否FOF基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISFOF,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isFOF'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isfeeder(symbols): 

	"""
	基本概况-是否联接基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISFEEDER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isfeeder'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isleverage(symbols): 

	"""
	基本概况-是否杠杆基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISLEVERAGE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isleverage'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_islifecycle(symbols): 

	"""
	基本概况-是否生命周期基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISLIFECYCLE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_islifecycle'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isinnovative(symbols): 

	"""
	基本概况-是否创新型基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISINNOVATIVE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isinnovative'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_iscomsump(symbols): 

	"""
	基本概况-是否消费主题基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISCOMSUMP,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_iscomsump'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isclosetoopen(symbols): 

	"""
	基本概况-是否封转开基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISCLOSETOOPEN,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isclosetoopen'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isindex(symbols): 

	"""
	基本概况-是否指数基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISINDEX,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isindex'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isreplicindex(symbols): 

	"""
	基本概况-是否复制指数型基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISREPLICINDEX,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isreplicindex'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isenhancedindex(symbols): 

	"""
	基本概况-是否增强指数型基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISENHANCEDINDEX,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isenhancedindex'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isquant(symbols): 

	"""
	基本概况-是否量化型基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISQUANT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isquant'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isshortwm(symbols): 

	"""
	基本概况-是否短期理财型基金

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSHORTWM,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isshortwm'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_isstat(symbols): 

	"""
	基本概况-是否参与统计

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSTAT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_isstat'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_managername(symbols): 

	"""
	基本概况-基金经理现任

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_managername'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_managernamebef(symbols): 

	"""
	基本概况-基金经理历任（包含转型前后）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGERNAMEBEF,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_managernamebef'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_managerdateavg(code,trade_date): 

	"""
	基本概况-历任基金经理平均任职年限含当前（包含转型前后）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGERDATEAVG,单位为年,数据类型为number
	"""

	path = server_ip + '/get_fd_managerdateavg'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_managernumber(symbols): 

	"""
	基本概况-历任基金经理数含当前（包含转型前后）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGERNUMBER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_managernumber'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_perbenmark(symbols): 

	"""
	基本概况-业绩比较基准说明

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PERBENMARK,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_perbenmark'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risklevel(symbols): 

	"""
	基本概况-风险等级

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RISKLEVEL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_risklevel'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_founddate(symbols): 

	"""
	基本概况-成立日期 （包含转型前后）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FOUNDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_founddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_setupdate(code,trade_date): 

	"""
	基本概况-成立年限  年

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SETUPDATE,单位为年,数据类型为number
	"""

	path = server_ip + '/get_fd_setupdate'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_existenddate(symbols): 

	"""
	基本概况-基金到期日（合同到期日）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列EXISTENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_existenddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_accountfirm(symbols): 

	"""
	基本概括-会计师事务所

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ACCOUNTFIRM,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_accountfirm'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_verification(symbols): 

	"""
	基本概括-验资机构

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列VERIFICATION,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_verification'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_lawoffice(symbols): 

	"""
	基本概括-律师事务所

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LAWOFFICE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_lawoffice'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_registration(symbols): 

	"""
	基本概括-注册登记机构

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列REGISTRATION,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_registration'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_agentnumber(symbols): 

	"""
	基本概括-代销机构数

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AGENTNUMBER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_agentnumber'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_clsopeperiod(symbols): 

	"""
	基本概况 - 封闭运作期

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CLSOPEPERIOD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_clsopeperiod'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_closperiod(symbols): 

	"""
	基本概况 - 封闭期TODO 取值 分级基金概况表 TQ_FD_CLASSINFO

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CLOSPERIOD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_closperiod'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_closeenddate(symbols): 

	"""
	基本概况 - 封闭期截止日TODO 取值 分级基金概况表 TQ_FD_CLASSINFO

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CLOSEENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_closeenddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_afclstype(symbols): 

	"""
	基本概况 - 封闭期后运作方式TODO 取值 分级基金概况表 TQ_FD_CLASSINFO

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AFCLSTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_afclstype'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_oprperiod(symbols): 

	"""
	基本概况 - 运作期TODO 取值 分级基金概况表 TQ_FD_CLASSINFO

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列OPRPERIOD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_oprperiod'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_afoprtype(symbols): 

	"""
	基本概况 - 运作期后运作方式TODO 取值 分级基金概况表 TQ_FD_CLASSINFO

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AFOPRTYPE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_afoprtype'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_ntletpubdate(symbols): 

	"""
	基金发行-发售公告日 (招股公布日)

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列NTLETPUBDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_ntletpubdate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_issbegdate(symbols): 

	"""
	基金发行-募集起始日 (发行起始日)

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSBEGDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_issbegdate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_issenddate(symbols): 

	"""
	基金发行-募集截止日 (发行截止日)

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_issenddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_issdays(symbols): 

	"""
	基金发行-募集天数

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列ISSDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_issdays'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_priissenddate(symbols): 

	"""
	基金发行-计划募集截止日

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PRIISSENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_priissenddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_priissdays(symbols): 

	"""
	基金发行-计划募集天数

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PRIISSDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_priissdays'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_cur(symbols): 

	"""
	基金发行-计价币种

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CUR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_cur'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_unitparvalue(symbols): 

	"""
	基金发行-面值

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITPARVALUE,单位为元/份,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_unitparvalue'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_totalfferfd(symbols): 

	"""
	基金发行-成立规模（实际募集总额）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TOTALFFERFD,单位为万元,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_totalfferfd'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_sponsor(symbols): 

	"""
	基金发行-基金发起人（TODO 不全）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SPONSOR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_sponsor'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_leaderman(symbols): 

	"""
	基金发行-基金主承销商（TODO 不全）

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LEADERMAN,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_leaderman'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_coordinator(symbols): 

	"""
	基金发行-基金发行协调人 (TODO 不全)

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列COORDINATOR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_coordinator'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_listrecommended(symbols): 

	"""
	基金发行-基金上市推荐人 (TODO 不全)

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LISTRECOMMENDED,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_listrecommended'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_effsubnum(symbols): 

	"""
	基金发行-有效认购户数

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列EFFSUBNUM,单位为户,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_effsubnum'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_sposubtotshare(symbols): 

	"""
	基金发行-基金管理人认购份额

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SPOSUBTOTSHARE,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_sposubtotshare'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_offerinte(symbols): 

	"""
	基金发行-募集资金利息

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列OFFERINTE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_offerinte'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_fferfdavg(symbols): 

	"""
	基金发行-平均每户募集规模

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FFERFDAVG,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_fferfdavg'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_subredstatus(symbols): 

	"""
	基金发行-基金申购赎回-申赎状态

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SUBREDSTATUS,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_subredstatus'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_subbegdate(symbols): 

	"""
	基金发行-基金申购赎回-基金申购起始日

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SUBBEGDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_subbegdate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_subenddate(symbols): 

	"""
	基金发行-基金申购赎回-基金赎回起始日

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SUBENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_subenddate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_redpaydate(symbols): 

	"""
	基金发行-基金申购赎回-赎回款项支付日

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列REDPAYDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_redpaydate'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minsubamount(symbols): 

	"""
	基金发行-基金申购赎回-最低申购额 TODO 取的 0821 集中申购最低额，但是很多都是null，是否 与定期定额最低申购额 重复取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINSUBAMOUNT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minsubamount'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_isregsubamount(symbols): 

	"""
	基金发行-基金申购赎回-是否开通定期定额，如果存在0808就算开通过取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINREGSUBAMOUNT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_issue_isregsubamount'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minregsubamount(symbols): 

	"""
	基金发行-基金申购赎回-定期定额最低申购额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINREGSUBAMOUNT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minregsubamount'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minredamount(symbols): 

	"""
	基金发行-基金申购赎回-最低赎回额 TODO 取的 0805 日常最低赎回额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINREDAMOUNT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minredamount'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minsubamountag(symbols): 

	"""
	基金发行-基金申购赎回-认(申)购最低金额代销 TODO 取的 0801 代销申(认)购最低额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINSUBAMOUNTAG,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minsubamountag'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minaddsubamountag(symbols): 

	"""
	基金发行-基金申购赎回-追加认(申)购最低金额代销TODO 取的 0802 代销追加申(认)购最低额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINADDSUBAMOUNTAG,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minaddsubamountag'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minsubamountdir(symbols): 

	"""
	基金发行-基金申购赎回-认(申)购最低金额直销 TODO 取的 0803 直销申(认)购最低额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINSUBAMOUNTDIR,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minsubamountdir'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minaddsubamountdir(symbols): 

	"""
	基金发行-基金申购赎回-追加认(申)购最低金额直销TODO 取的 0804 直销追加申(认)购最低额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINADDSUBAMOUNTDIR,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minaddsubamountdir'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_minmrksubamount(symbols): 

	"""
	基金发行-基金申购赎回-场内认(申)购最低额TODO 取的 0809 场内申(认)购最低额取编号为1，BEGINDATE 最新的那条

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINMRKSUBAMOUNT,单位为万元,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_minmrksubamount'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_managefee(code,trade_date): 

	"""
	基金发行-基金费率-管理费率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MANAGEFEERATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_managefee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_custodyfee(code,trade_date): 

	"""
	基金发行-基金费率-托管费率  

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CUSTODYFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_custodyfee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_maxpurchasefee(code,trade_date): 

	"""
	基金发行-基金费率-最高申购费率   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXPURCHASEFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_maxpurchasefee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_maxsubscriptionfee(code,trade_date): 

	"""
	基金发行-基金费率-最高认购费率   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXSUBSCRIPTIONFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_maxsubscriptionfee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_maxredemptionfee(code,trade_date): 

	"""
	基金发行-基金费率-最高赎回费率   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXREDEMPTIONFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_maxredemptionfee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_salesserfee(code,trade_date): 

	"""
	基金发行-基金费率-销售服务费率   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SALESSERFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_salesserfee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_issue_guaranteefee(code,trade_date): 

	"""
	基金发行-基金费率-担保费率   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列GUARANTEEFEE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_issue_guaranteefee'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdev(code,trade_date): 

	"""
	基金分红与拆分-最新单位分红（税前）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列UNITPTAXDEV,单位为元/份,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdev'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_rightdate(code,trade_date): 

	"""
	基金分红与拆分-最新分红除息日（场外）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RIGHTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_rightdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_innerrightdate(code,trade_date): 

	"""
	基金分红与拆分-最新分红场内除息日

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列INNERRIGHTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_innerrightdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_recorddate(code,trade_date): 

	"""
	基金分红与拆分-最新分红登记日

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RECORDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_recorddate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_outdevdate(code,trade_date): 

	"""
	基金分红与拆分-最新分红红利发放日（场外）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列OUTDEVDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_outdevdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdev_year(code,year): 

	"""
	基金分红与拆分-单位基金年度分红金额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITPTAXDEV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdev_year'
	data = {'code': {'symbols': code}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdevnum_year(code,year): 

	"""
	基金分红与拆分-单位基金年度分红次数

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		year:年份，'yyyy'格式,例如2023
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITPTAXDEVNUM,单位为次,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdevnum_year'
	data = {'code': {'symbols': code}, 'year': {'type': year}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdevsum(code,trade_date): 

	"""
	基金分红与拆分-单位基金累计分红金额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列UNITPTAXDEVSUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdevsum'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdevnumsum(code,trade_date): 

	"""
	基金分红与拆分-单位基金累计分红次数

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列UNITPTAXDEVNUMSUM,单位为次,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdevnumsum'
	data = {'code': {'symbols': code}, 'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdevsum_int(code,start_date,end_date): 

	"""
	基金分红与拆分-单位基金区间分红金额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITPTAXDEVSUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdevsum_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_unitptaxdevnumsum_int(code,start_date,end_date): 

	"""
	基金分红与拆分-单位基金区间分红次数

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITPTAXDEVNUMSUM,单位为次,数据类型为number
	"""

	path = server_ip + '/get_fd_unitptaxdevnumsum_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_splitratio(code,trade_date): 

	"""
	基金分红与拆分-最新拆分(折算)比例

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SPLITRATIO,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_splitratio'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_splitdate(code,trade_date): 

	"""
	基金分红与拆分-最新拆分(折算)除息日

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SPLITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_splitdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_besplitnav(code,trade_date): 

	"""
	基金分红与拆分-拆分前单位净值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BESPLITNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_besplitnav'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_afsplitnav(code,trade_date): 

	"""
	基金分红与拆分-拆分后单位净值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AFSPLITNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_afsplitnav'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_now(code,rank): 

	"""
	资深基金经理-第N名任职期限的现任基金经理  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MANAGERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_now'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_gender(code,rank): 

	"""
	资深基金经理-性别  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列GENDER,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_gender'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_birth(code,rank): 

	"""
	资深基金经理-出生年份  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列BIRTH,单位为年,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_birth'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_age(code,rank): 

	"""
	资深基金经理-年龄  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AGE,单位为岁,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_age'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_degree(code,rank): 

	"""
	资深基金经理-学历  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列DEGREE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_degree'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_remark(code,rank): 

	"""
	资深基金经理-简历  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列REMARK,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_remark'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_incumbtbeg(code,rank): 

	"""
	资深基金经理-任职日期  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列INCUMBTBEG,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_incumbtbeg'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_incumbtyear(code,rank): 

	"""
	资深基金经理-任职天数  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列INCUMBTYEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_incumbtyear'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_totyears(code,rank): 

	"""
	资深基金经理-基金经理年限  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TOTYEARS,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_totyears'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_tenureyield(code,rank): 

	"""
	资深基金经理-任职期间基金回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TENUREYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_tenureyield'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_tenureyieldyr(code,rank): 

	"""
	资深基金经理-任职期间基金年化回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TENUREYIELDYR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_tenureyieldyr'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_benchmarkrto(code,rank): 

	"""
	资深基金经理-任职期间大盘指数回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列BENCHMARKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_benchmarkrto'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_rtypeavgyield(code,rank): 

	"""
	资深基金经理-任职期间同类型基金平均回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RTYPEAVGYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_rtypeavgyield'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_excessnavrto(code,rank): 

	"""
	资深基金经理-任职期间超越大盘指数回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列EXCESSNAVRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_excessnavrto'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_excessavgyield(code,rank): 

	"""
	资深基金经理-任职期间超越同类型基金平均回报  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列EXCESSAVGYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_excessavgyield'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_classrank(code,rank): 

	"""
	资深基金经理-任职期间同类型基金排名  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CLASSRANK,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_classrank'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_overfcount(code,rank): 

	"""
	资深基金经理-历史管理基金只数  rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列OVERFCOUNT,单位为只,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_overfcount'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_avgtenure(code,rank): 

	"""
	资深基金经理-历史管理基金平均任期rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AVGTENURE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_avgtenure'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_hiscomps(code,rank): 

	"""
	资深基金经理-曾任职基金公司家数rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列HISCOMPS,单位为家,数据类型为number
	"""

	path = server_ip + '/get_fd_manager_hiscomps'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_hiscompname(code,rank): 

	"""
	资深基金经理-曾任职基金公司名称rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列HISCOMPNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_hiscompname'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_prefdname(code,rank): 

	"""
	资深基金经理-历史管理基金名称 （包括基金转型前后的所有名称，所以名称数量会大于plasma_fd_manager_overfcount返回的历史管理基金只数）rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列FDSNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_prefdname'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_maxtenure(code,rank): 

	"""
	资深基金经理-历史管理基金最长任期rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MAXTENURE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_maxtenure'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_mintenure(code,rank): 

	"""
	资深基金经理-历史管理基金最短任期rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINTENURE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_mintenure'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_manager_tenureyieldyravg(code,rank): 

	"""
	资深基金经理-历史管理基金平均年化回报rank: 为基金经理任职期限的排名已退市基金，返回为空

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TENUREYIELDYRAVG,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_manager_tenureyieldyravg'
	data = {'code': {'symbols': code}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totalshare(code,trade_date): 

	"""
	基金规模-基金份额   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTALSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totalshare'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_tsenddate(code,trade_date): 

	"""
	基金规模-份额截止日   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_share_tsenddate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totfdnavdaily(code,trade_date): 

	"""
	基金规模-基金资产净值 TODO 对报告期的基金资产净值根据 报告期 进行 pit 处理   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOTFDNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totfdnavdaily'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totfdnavenddate(code,trade_date): 

	"""
	基金规模-资产净值截止日 TODO 对报告期的基金资产净值根据 报告期 进行 pit 处理   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_share_totfdnavenddate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_tsisstat(code,trade_date): 

	"""
	基金规模-份额(资产净值)是否纳入统计 

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ISSTAT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_share_tsisstat'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_circshare(code,trade_date): 

	"""
	基金规模-上市流通份额   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CIRCSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_circshare'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_csenddate(code,trade_date): 

	"""
	基金规模-上市流通份额截止日   

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_share_csenddate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totalsharebeg(symbols): 

	"""
	基金规模-合同生效时总份额 TODO 取的基金设立时的总份额

	Args:
		symbols:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TOTALSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totalsharebeg'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_endfdshare(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期基金份额合并 report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ENDFDSHARE,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_endfdshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_endfdsharechgqoq(code,report_date): 

	"""
	投资组合-资产配置-报告期基金份额环比增减合并report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ENDFDSHARECHGQOQ,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_endfdsharechgqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_endfdsharepchqoq(code,report_date): 

	"""
	投资组合-资产配置-报告期基金份额环比增长率合并report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ENDFDSHAREPCHQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_endfdsharepchqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totfdnav(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期基金资产净值合并（TODO 同 投资组合-资产配置-基金资产净值 函数 plasma_fd_folio_totfdnav）report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totfdnav'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totfdnavchgqoq(code,report_date): 

	"""
	投资组合-资产配置-报告期基金资产净值环比增减合并report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAVCHGQOQ,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totfdnavchgqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_totfdnavpchqoq(code,report_date): 

	"""
	投资组合-资产配置-报告期基金资产净值环比增长率合并report_date: 为报告期时间，支持1、2、3、4季度的报告期该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAVPCHQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_totfdnavpchqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_subsharetot(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期总申购份额合并 report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SUBSHARETOT,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_subsharetot'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_redtotshare(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期总赎回份额合并 report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列REDTOTSHARE,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_redtotshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_subsharenet(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期申购赎回净额合并=报告期申购份额 – 报告期赎回份额 report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SUBSHARENET,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_subsharenet'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_subsharenetrate(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期净申购赎回率合并= [(期内净申购金额 / 期初基金总份额或基金资产净值)] × 100% report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SUBSHARENETRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_subsharenetrate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_splitaddshare(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期间拆分变动份额合并 report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SPLITADDSHARE,单位为万份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_splitaddshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_subshareturnover(code,report_date): 

	"""
	基金规模-报告期基金规模-报告期基金申赎换手率合并 = [(期内净申购金额 / 期初基金总份额) + (期内净赎回金额 / 期初基金总份额)] × 100%report_date: 为报告期时间，只支持 中报、年报该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SUBSHARETURNOVER,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_subshareturnover'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdernum(code,report_date): 

	"""
	持有人结构-基金持有人户数  report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDERNUM,单位为户,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdernum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_avgshare(code,report_date): 

	"""
	持有人结构-平均每户持有基金份额  report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_avgshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_invshare(code,report_date): 

	"""
	持有人结构-机构投资者持有份额  report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INVSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_invshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_invtotrto(code,report_date): 

	"""
	持有人结构-机构投资者持有比例  report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INVTOTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_invtotrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_keepershare(code,report_date): 

	"""
	持有人结构-基金公司持有份额  report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列KEEPERSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_keepershare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_keepertotrto(code,report_date): 

	"""
	持有人结构-基金公司持有比例 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列KEEPERTOTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_keepertotrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_individualshare(code,report_date): 

	"""
	持有人结构-个人投资者持有份额 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INDIVIDUALSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_individualshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_individualtotrto(code,report_date): 

	"""
	持有人结构-个人投资者持有比例 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INDIVIDUALTOTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_individualtotrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_staffshare(code,report_date): 

	"""
	持有人结构-基金公司员工持有份额 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列STAFFSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_staffshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_stafftotrto(code,report_date): 

	"""
	持有人结构-基金公司员工持有比例 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列STAFFTOTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_stafftotrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_unconfshare(code,report_date): 

	"""
	持有人结构-未确认份额 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNCONFSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_unconfshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_unconftotrto(code,report_date): 

	"""
	持有人结构-未确认份额比例 report_date: 为报告期时间返回的不是合计值，若涉及分级基金，返回的是单独统计的值，如果遇到合计值，分级基金返回值为nan

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNCONFTOTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_unconftotrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdername(code,report_date,rank): 

	"""
	持有人结构-第N名持有人名称(上市基金) report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDERNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_share_holdername'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdshare(code,report_date,rank): 

	"""
	持有人结构-第N名持有人持有份额(上市基金) report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDSHARE,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdshare'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdrto(code,report_date,rank): 

	"""
	持有人结构-第N名持有人持有比例(上市基金)report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdsharechg(code,report_date,rank): 

	"""
	持有人结构-第N名持有人持有份额较上期变动(上市基金)report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDSHARECHG,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdsharechg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdsharetop10sum(code,report_date): 

	"""
	持有人结构-前十大持有人持有份额合计(上市基金)report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDSHARETOP10SUM,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdsharetop10sum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_share_holdrtotop10sum(code,report_date): 

	"""
	持有人结构-前十大持有人持有比例合计(上市基金)report_date: 为报告期时间rank：支持取值为：'1','2','3','4','5','6','7','8','9','10'

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDRTOTOP10SUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_share_holdrtotop10sum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_unitnav(code,trade_date): 

	"""
	基金净值与回报-基金单位净值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列UNITNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_unitnav'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_unitaccnav(code,trade_date): 

	"""
	基金净值与回报-基金累计净值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列UNITACCNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_unitaccnav'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_repairunitnav(code,trade_date): 

	"""
	基金净值与回报-基金复权单位净值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPAIRUNITNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_repairunitnav'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_repairunitnavg(code,trade_date): 

	"""
	基金净值与回报-基金复权单位净值增长trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPAIRUNITNAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_repairunitnavg'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_enddate(code,trade_date): 

	"""
	基金净值与回报-基金净值截止日期trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_enddate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_repairunitnavgr(code,trade_date): 

	"""
	基金净值与回报-基金复权单位净值增长率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列REPAIRUNITNAVR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_repairunitnavgr'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgr_int(code,trade_date,range,start_date,end_date): 

	"""
	基金净值与回报-阶段净值表现-基金阶段净值增长率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgr_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_similaravg_int(code,trade_date,range): 

	"""
	基金净值与回报-阶段净值表现-同类型基金阶段净值平均增长率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_similaravg_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_exsimilar_int(code,trade_date,range): 

	"""
	基金净值与回报-阶段净值表现-基金阶段超同类型基金增长率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_exsimilar_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_similarrank_int(code,trade_date,range): 

	"""
	基金净值与回报-阶段净值表现-同类型基金阶段净值增长率排名trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_similarrank_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_similarrankrto_int(code,trade_date,range): 

	"""
	基金净值与回报-阶段净值表现-同类型基金阶段净值增长率排名(百分比)trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SIMILARRANKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_similarrankrto_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgryear_int(code,trade_date,range): 

	"""
	基金净值与回报-阶段净值表现-基金年化收益率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近3月', '近6月', '年初至今', '近2年', '近3年', '近5年', '上市至今'],例如年初至今
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgryear_int'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'type': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgravg_int(code,start_date,end_date): 

	"""
	基金净值与回报-区间净值表现-基金区间日算术平均收益率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列NAVGRAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgravg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgeogr_int(code,start_date,end_date): 

	"""
	基金净值与回报-区间净值表现-基金区间日算术平均收益率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列NAVGEOGR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgeogr_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navmax_int(code,start_date,end_date): 

	"""
	基金净值与回报-区间净值表现-基金区间内最高单位净值 (使用单位净值)

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列UNITNAVMAX,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navmax_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_relativnavgr_int(code,index,start_date,end_date): 

	"""
	基金净值与回报-区间净值表现-基金区间超越大盘增长率 (使用复权单位净值)

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		index:指数代码,例如000688
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RELATIVNAVGR,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_relativnavgr_int'
	data = {'code': {'symbols': code}, 'index': {'symbol': index}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_indexgr_int(index,start_date,end_date): 

	"""
	基金净值与回报-区间净值表现-大盘区间增长率 

	Args:
		index:指数代码,例如000688
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列INDEXRET,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_indexgr_int'
	data = {'index': {'symbol': index}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_rpenddate(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-最新截止日期report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_rpenddate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgrorate(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期份额净值增长率report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NAVGRORATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgrorate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgroratesta(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期份额净值增长率标准差report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NAVGRORATESTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgroratesta'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_perbenmarkrate(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期业绩比较基准收益率report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PERBENMARKRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_perbenmarkrate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_perbenmarkratesta(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期业绩比较基准收益率标准差report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PERBENMARKRATESTA,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_perbenmarkratesta'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navtobenmarkgrdiff(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期净值增长率减基准收益率report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FIELDDIF,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navtobenmarkgrdiff'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navtobenmarkstddiff(code,report_date,stats_period): 

	"""
	基金净值与回报-报告期净值表现-报告期净值增长率标准差减基准收益率标准差report_date: 为报告期时间stats_period: 净值表现统计区间，取值为['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		stats_period:时间周期，['近一个月', '近三个月', '近六个月', '近一年', '近两年', '近三年', '近五年', '成立至今'],例如近一个月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列STANDEVIDIF,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navtobenmarkstddiff'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'stats_period': {'symbols': stats_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_sevendayyield_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-7日年化收益率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SEVENDAYYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_sevendayyield_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_milliongain_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-万份单位收益trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MILLIONGAIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_milliongain_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_begindate_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-收益起始日期trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列BEGINDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_begindate_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_enddate_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-收益截止日期trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ENDDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_enddate_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_paymode_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-收益结转方式

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PAYMODE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_paymode_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yeildcardate_cur(code,trade_date): 

	"""
	基金净值与回报-货币市场基金收益-收益结转日

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YEILDCARDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yeildcardate_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_milliongainavg_cur(code,start_date,end_date): 

	"""
	基金净值与回报-货币市场基金收益-区间万份单位收益日均值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MILLIONGAINAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_milliongainavg_cur'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_milliongainsum_cur(code,start_date,end_date): 

	"""
	基金净值与回报-货币市场基金收益-区间万份单位收益总值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MILLIONGAINSUM,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_milliongainsum_cur'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_milliongainstd_cur(code,start_date,end_date): 

	"""
	基金净值与回报-货币市场基金收益-区间万份单位收益标准差trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MILLIONGAINSTD,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_milliongainstd_cur'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_sevendayyieldavg_cur(code,start_date,end_date): 

	"""
	基金净值与回报-货币市场基金收益-区间7日年化收益率均值trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SEVENDAYYIELDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_sevendayyieldavg_cur'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_sevendayyieldstd_cur(code,start_date,end_date): 

	"""
	基金净值与回报-货币市场基金收益-区间7日年化收益率标准差trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列SEVENDAYYIELDSTD,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_sevendayyieldstd_cur'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_annualgr_cur(code,trade_date,range): 

	"""
	基金净值与回报-货币市场基金收益-货币基金年化收益率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近7日', '近1月', '近3月', '近6月', '近1年', '近3年', '近5年', '年初至今', '上市至今'],例如近7日
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_annualgr_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'symbols': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_annualgrrank_cur(code,trade_date,range): 

	"""
	基金净值与回报-货币市场基金收益-货币基金年化收益率排名trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近7日', '近1月', '近3月', '近6月', '近1年', '近3年', '近5年', '年初至今', '上市至今'],例如近7日
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_annualgrrank_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'symbols': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgr_cur(code,trade_date,range): 

	"""
	基金净值与回报-货币市场基金收益-货币基金净值收益率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近7日', '近1月', '近3月', '近6月', '近1年', '近3年', '近5年', '年初至今', '上市至今'],例如近7日
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_nav_navgr_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'symbols': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_nav_navgrrank_cur(code,trade_date,range): 

	"""
	基金净值与回报-货币市场基金收益-货币基金净值收益率排名trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		range:时间周期，['近7日', '近1月', '近3月', '近6月', '近1年', '近3年', '近5年', '年初至今', '上市至今'],例如近7日
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_nav_navgrrank_cur'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'range': {'symbols': range}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_publishdate(code,report_date): 

	"""
	投资组合-资产配置-公布日期report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_folio_publishdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_totfdasset(code,report_date): 

	"""
	投资组合-资产配置-基金总资产report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_totfdasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_totfdnav(code,report_date): 

	"""
	投资组合-资产配置-基金资产净值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_totfdnav'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_totfdnavisstat(code,report_date): 

	"""
	投资组合-资产配置-资产净值是否纳入统计report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAVISSTAT,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_totfdnavisstat'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_totfdnavratio(code,report_date): 

	"""
	投资组合-资产配置-基金资产净值占基金总资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTFDNAVRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_totfdnavratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_skmktcap(code,report_date): 

	"""
	投资组合-资产配置-股票投资市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_skmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_bdmktcap(code,report_date): 

	"""
	投资组合-资产配置-债券投资市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_bdmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_absmktcap(code,report_date): 

	"""
	投资组合-资产配置-资产支持证券投资市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ABSMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_absmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_fdmktcap(code,report_date): 

	"""
	投资组合-资产配置-基金投资市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_fdmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_derimktcap(code,report_date): 

	"""
	投资组合-资产配置-金融衍生品投资市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERIMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_derimktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_buybfinassmktcap(code,report_date): 

	"""
	投资组合-资产配置-买入返售金融货产市值report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BUYBFINASSMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_buybfinassmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_depositmktcap(code,report_date): 

	"""
	投资组合-资产配置-银行存款和结算备付金合计report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DEPOSITMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_depositmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_othinvemktcap(code,report_date): 

	"""
	投资组合-资产配置-其他各项资产report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHINVEMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_othinvemktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_skmktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-股票市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_skmktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_bdmktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-债券市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_bdmktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_fdmktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-基金市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_fdmktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_wrtmktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-权证市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列WRTMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_wrtmktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_bkdepositmktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-银行存款市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BKDEPOSITMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_bkdepositmktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_othinvemktcapqoq(code,report_date): 

	"""
	投资组合-资产配置-其他各项资产市值增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHINVEMKTCAPQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_othinvemktcapqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_skmktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-股票市值占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_skmktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_skmktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-股票市值占基金资产比例增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_skmktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_bdmktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-债券市值占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_bdmktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_bdmktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-债券市值占基金资产比增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_bdmktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_absmktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-资产支持证券市值占基企资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ABSMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_absmktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_absmktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-资产支持证券市值占基企资产比增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ABSMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_absmktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_fdmktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-基金市值占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_fdmktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_fdmktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-基金市值占基金资产比 增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_fdmktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_derimktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-全融衍生品市值占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERIMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_derimktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_derimktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-全融衍生品市值占基金资产比 增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERIMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_derimktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_buybfinassmktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-买入返售金融资产市值占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BUYBFINASSMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_buybfinassmktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_buybfinassmktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-买入返售金融资产市值占基金资产比 增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BUYBFINASSMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_buybfinassmktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_othinvemktcaptfratio(code,report_date): 

	"""
	投资组合-资产配置-其他各项资产占基金资产比report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHINVEMKTCAPTFRATIO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_othinvemktcaptfratio'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_othinvemktcaptfratioqoq(code,report_date): 

	"""
	投资组合-资产配置-其他各项资产占基金资产比 增长率report_date: 为报告期时间该表对分级基金和母基金都会分别列示，取数时不对ISSTAT做限制，所以分级基金返回的可能是总值，也可能是单值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHINVEMKTCAPTFRATIOQOQ,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_othinvemktcaptfratioqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_sksymbol(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股代码report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKSYMBOL,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_folio_sksymbol'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_skname(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股简称report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SKNAME,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_folio_skname'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_holdmktcap(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股市值report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDMKTCAP,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_holdmktcap'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_holdmktcapchgqoq(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股市值较上期增减report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDMKTCAPCHGQOQ,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_holdmktcapchgqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_accstkrto(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股市值占股票投资市值比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ACCSTKRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_accstkrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_navrto(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股市值占基金资产净值比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NAVRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_navrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_fdtarto(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股市值占基金总资产比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDTARTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_fdtarto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_holdamt(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股数量report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDAMT,单位为股,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_holdamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_holdamtchgqoq(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股数量较上期增减report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDAMTCHGQOQ,单位为股,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_holdamtchgqoq'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_holdamtrto(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股数量占公司总股本比 report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列HOLDAMTRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_holdamtrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_acccircrto(code,report_date,rank): 

	"""
	投资组合-重仓股-重仓股数量占公司流通股本比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ACCCIRCRTO,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_acccircrto'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_navrtosum(code,report_date,rank): 

	"""
	投资组合-重仓股-前N名股票投资集中度占基金净值比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NAVRTOSUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_navrtosum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_folio_accstkrtosum(code,report_date,rank): 

	"""
	投资组合-重仓股-前N名股票投资集中度占股票投资市值比report_date: 为报告期时间rank：重仓股排名，支持['1','2','3','4','5','6','7','8','9','10']

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
		rank:排序，['1','2','3','4','5','6','7','8','9','10','top3','top5','top10']中的一种,例如3
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ACCSTKRTOSUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_folio_accstkrtosum'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}, 'rank': {'type': rank}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_preclose_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-前收盘价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_preclose_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_open_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-开盘价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_open_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_high_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-最高价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_high_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_low_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-最低价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_low_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_close_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-收盘价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_close_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_avgprice_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-均价 元后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_avgprice_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amplitude_d(code,trade_date): 

	"""
	行情指标-日行情-振幅 元不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amplitude_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_change_d(code,trade_date): 

	"""
	行情指标-日行情-涨跌 元不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_change_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_pchg_d(code,trade_date): 

	"""
	行情指标-日行情-涨跌幅 元不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_pchg_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnrate_d(code,trade_date): 

	"""
	行情指标-日行情-换手率 元不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnrate_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_vol_d(code,trade_date,adjust_type): 

	"""
	行情指标-日行情-成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_vol_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amount_d(code,trade_date): 

	"""
	行情指标-日行情-成交金额 元不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amount_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_iopv_d(code,trade_date): 

	"""
	行情指标-日行情-IOPV 不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列IOPV,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_price_iopv_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discount_d(code,trade_date): 

	"""
	行情指标-日行情-升贴水=(收盘价－单位净值)不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discount_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountrate_d(code,trade_date): 

	"""
	行情指标-日行情-升贴水率=(收盘价－最新净值)/最新净值 * 100%不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTRATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountrate_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_tradestatus_d(code,trade_date): 

	"""
	行情指标-日行情-交易状态 (通过成交量=0来间接推断)不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TRADESTATUS,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_tradestatus_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_ltdate_d(code,trade_date): 

	"""
	行情指标-日行情-最近交易日 (剔除不交易的交易日)不复权

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LTDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_ltdate_d'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_preclose_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周前收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_preclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_close_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_close_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_open_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周开盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_open_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_high_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最高价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_high_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_low_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最低价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_low_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclose_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最高收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_maxclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclose_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最低收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_minclose_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_avgprice_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周均价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_avgprice_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_change_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周涨跌 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_change_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_chg_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_chg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_pchgavg_w(code,trade_date): 

	"""
	行情指标-周行情-周日均涨跌幅

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_pchgavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnratesum_w(code,trade_date): 

	"""
	行情指标-周行情-周累计换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnratesum_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnrateavg_w(code,trade_date): 

	"""
	行情指标-周行情-周日均换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnrateavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_vol_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_vol_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amount_w(code,trade_date): 

	"""
	行情指标-周行情-成交额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amount_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountavg_w(code,trade_date): 

	"""
	行情指标-周行情-周均升贴水

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountrateavg_w(code,trade_date): 

	"""
	行情指标-周行情-周均升贴水率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountrateavg_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amplitude_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周振幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amplitude_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_highdate_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最高价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_highdate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_lowdate_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最低价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_lowdate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclosedate_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最高收盘价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_maxclosedate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclosedate_w(code,trade_date,adjust_type): 

	"""
	行情指标-周行情-周最低收盘价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_minclosedate_w'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_preclose_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月前收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_preclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_close_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_close_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_open_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月开盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_open_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_high_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最高价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_high_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_low_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最低价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_low_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclose_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最高收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_maxclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclose_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最低收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_minclose_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_avgprice_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月均价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_avgprice_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_change_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月涨跌 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_change_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_chg_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_chg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_pchgavg_m(code,trade_date): 

	"""
	行情指标-月行情-月日均涨跌幅

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_pchgavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnratesum_m(code,trade_date): 

	"""
	行情指标-月行情-月累计换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnratesum_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnrateavg_m(code,trade_date): 

	"""
	行情指标-月行情-月日均换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnrateavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_vol_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_vol_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amount_m(code,trade_date): 

	"""
	行情指标-月行情-月成交额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amount_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountavg_m(code,trade_date): 

	"""
	行情指标-月行情-月均升贴水

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountrateavg_m(code,trade_date): 

	"""
	行情指标-月行情-月均升贴水率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountrateavg_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amplitude_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月振幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amplitude_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_highdate_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最高价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_highdate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_lowdate_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最低价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_lowdate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclosedate_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最高收盘价日后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_maxclosedate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclosedate_m(code,trade_date,adjust_type): 

	"""
	行情指标-月行情-月最低收盘价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_minclosedate_m'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_relativepchg_m(code,index,trade_date,adjust_type): 

	"""
	行情指标-月行情-相对大盘涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		index:指数代码,例如000688
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RELATIVEPCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_relativepchg_m'
	data = {'code': {'symbols': code}, 'index': {'symbol': index}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_preclose_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年前收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_preclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_close_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_close_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_open_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年开盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_open_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_high_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最高价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_high_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_low_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最低价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_low_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclose_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最高收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_maxclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclose_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最低收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_minclose_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_avgprice_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年均价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_avgprice_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_change_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年涨跌 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_change_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_chg_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_chg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_pchgavg_y(code,trade_date): 

	"""
	行情指标-年行情-年日均涨跌幅

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_pchgavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnratesum_y(code,trade_date): 

	"""
	行情指标-年行情-年累计换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnratesum_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnrateavg_y(code,trade_date): 

	"""
	行情指标-年行情-年日均换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnrateavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_vol_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列VOL,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_vol_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amount_y(code,trade_date): 

	"""
	行情指标-年行情-年成交额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amount_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountavg_y(code,trade_date): 

	"""
	行情指标-年行情-年均升贴水

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountrateavg_y(code,trade_date): 

	"""
	行情指标-年行情-年均升贴水率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列DISCOUNTRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountrateavg_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amplitude_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年振幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amplitude_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_highdate_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最高价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_highdate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_lowdate_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最低价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_lowdate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclosedate_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最高收盘价日后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MAXPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_maxclosedate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclosedate_y(code,trade_date,adjust_type): 

	"""
	行情指标-年行情-年最低收盘价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列MINPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_minclosedate_y'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_relativepchg_y(code,index,trade_date,adjust_type): 

	"""
	行情指标-年行情-相对大盘涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		index:指数代码,例如000688
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列RELATIVEPCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_relativepchg_y'
	data = {'code': {'symbols': code}, 'index': {'symbol': index}, 'trade_date': {'dates': trade_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_preclose_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间前收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_preclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_close_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_close_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_open_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间开盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TOPEN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_open_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_high_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最高价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列THIGH,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_high_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_low_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最低价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TLOW,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_low_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclose_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最高收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MAXCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_maxclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclose_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最低收盘价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINCLOSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_minclose_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_avgprice_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间均价 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AVGPRICE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_avgprice_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_change_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间涨跌 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列CHANGE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_change_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_chg_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间涨跌幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_chg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_pchgavg_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间日均涨跌幅

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列PCHGDAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_pchgavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnratesum_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间累计换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TURNRATESUM,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnratesum_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_turnrateavg_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间日均换手率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TURNRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_turnrateavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_vol_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列VOL,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_vol_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amount_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间成交额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AMOUNT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amount_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountavg_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间均升贴水

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列DISCOUNTAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_discountrateavg_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间均升贴水率

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列DISCOUNTRATEAVG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_discountrateavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_volavg_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间日均成交量 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列VOLAVG,单位为份,数据类型为number
	"""

	path = server_ip + '/get_fd_price_volavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amountavg_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-区间日均成交金额

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AMOUNTAVG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amountavg_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_amplitude_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间振幅后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列AMPLITUDE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_amplitude_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_highdate_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最高价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列HIGHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_highdate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_lowdate_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最低价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列LOWDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_lowdate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_maxclosedate_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最高收盘价日后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MAXPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_maxclosedate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_minclosedate_int(code,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-区间最低收盘价日 后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列MINPRICEDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_price_minclosedate_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_tradedays_int(code,start_date,end_date): 

	"""
	行情指标-区间行情-交易天数

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列TRADEDAYS,单位为天,数据类型为number
	"""

	path = server_ip + '/get_fd_price_tradedays_int'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_price_relativepchg_int(code,index,start_date,end_date,adjust_type): 

	"""
	行情指标-区间行情-相对大盘区间涨跌幅 %后复权因子由表中的 FALCLOSE 前收盘(顺推) / LCLOSE 前收盘价 逆推得到前复权因子为 后复权因子 / 最新的后复权因子，每次都需要取当前最新的后复权值成交量复权方式与价格是逆关系

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		index:指数代码,例如000688
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列nan,数值列RELATIVEPCHG,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_price_relativepchg_int'
	data = {'code': {'symbols': code}, 'index': {'symbol': index}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'adjust_type': {'type': adjust_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_sharp(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-Sharpetrade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_sharp'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_jenson(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-Jensentrade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_jenson'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_treynor(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-Treynortrade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_treynor'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_sortino(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-Sortinotrade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_sortino'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_valuation(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-估价比率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_valuation'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_information(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-信息比率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_information'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_volatility(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-波动率trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_volatility'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_m2measure(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-M2测度trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_m2measure'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_downside(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-下跌风险trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_downside'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_beta(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-Betatrade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_beta'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_decicoef(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-可决系数trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_decicoef'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_nonsystemrisk(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-非系统风险trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['52个周', '24个月', '60个月'],例如52个周
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_nonsystemrisk'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'type': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_risk_trackerror(code,trade_date,risk_period): 

	"""
	基金绩效评估-风险收益指标-跟踪误差trade_date: 基金净值日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
		risk_period:时间周期，['近1月', '近2月', '近3月','近6月','近1年'],例如近1月
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为number
	"""

	path = server_ip + '/get_fd_risk_trackerror'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}, 'risk_period': {'symbols': risk_period}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yhrating3year(code,trade_date): 

	"""
	基金评级-银河3年评级（都是月评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YHRATING3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yhrating3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yhratingchg3year(code,trade_date): 

	"""
	基金评级-银河3年评级较上期变动（都是月评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YHRATINGCHG3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yhratingchg3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yhrating5year(code,trade_date): 

	"""
	基金评级-银河5年评级（都是月评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YHRATING5YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yhrating5year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yhratingchg5year(code,trade_date): 

	"""
	基金评级-银河5年评级较上期变动（都是月评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YHRATINGCHG5YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yhratingchg5year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_yhcreditdate(code,trade_date): 

	"""
	基金评级-银河评级日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列YHCREDITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_yhcreditdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_htrating3year(code,trade_date): 

	"""
	基金评级-海通3年评级（都是季评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HTRATING3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_htrating3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_htratingchg3year(code,trade_date): 

	"""
	基金评级-海通3年评级较上期变动（都是季评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HTRATINGCHG3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_htratingchg3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_htcreditdate(code,trade_date): 

	"""
	基金评级-海通评级日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列HTCREDITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_htcreditdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_zsrating3year(code,trade_date): 

	"""
	基金评级-招商3年评级（都是季评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ZSRATING3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_zsrating3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_zsratingchg3year(code,trade_date): 

	"""
	基金评级-招商3年评级较上期变动（都是季评）

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ZSRATINGCHG3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_zsratingchg3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_zscreditdate(code,trade_date): 

	"""
	基金评级-招商评级日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列ZSCREDITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_zscreditdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajxrating3year(code,trade_date): 

	"""
	基金评级-济安金信3年评级（综合评级），季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJXRATING3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajxrating3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3yprofit(code,trade_date): 

	"""
	基金评级-济安金信3年评级（盈利能力) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YPROFIT,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3yprofit'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3ystability(code,trade_date): 

	"""
	基金评级-济安金信3年评级（业绩稳定性) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YSTABILITY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3ystability'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3yantirisk(code,trade_date): 

	"""
	基金评级-济安企信3年评级（抗风险能力) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YANTIRISK,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3yantirisk'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3yselectivity(code,trade_date): 

	"""
	基金评级-济安金信3年评级（选股能力) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YSELECTIVITY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3yselectivity'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3ybenchmarktracking(code,trade_date): 

	"""
	基金评级-济安金信3年评级（基准跟踪能力) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YBENCHMARKTRACKING,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3ybenchmarktracking'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajx3yextrayield(code,trade_date): 

	"""
	基金评级-济安金信3年评级（超额收益能力) 季度评级

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJX3YEXTRAYIELD,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajx3yextrayield'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_jajxcreditdate(code,trade_date): 

	"""
	基金评级-济安金信评级日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列JAJXCREDITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_jajxcreditdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_shrating3year(code,trade_date): 

	"""
	基金评级-上海证券3年评级（综合评级） 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHRATING3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_shrating3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_shratingchg3year(code,trade_date): 

	"""
	基金评级-上海证券3年综合评级较上期变动 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHRATINGCHG3YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_shratingchg3year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh3yselectivity(code,trade_date): 

	"""
	基金评级-上海证券3年评级（选证能力) 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH3YSELECTIVITY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh3yselectivity'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh3ymkttiming(code,trade_date): 

	"""
	基金评级-上海证券3年评级（择时能力) 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH3YMKTTIMING,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh3ymkttiming'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh3ysharpratio(code,trade_date): 

	"""
	基金评级-上海证券3年评级（夏普比率) 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH3YSHARPRATIO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh3ysharpratio'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_shrating5year(code,trade_date): 

	"""
	基金评级-上海证券5年评级（综合评级) 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHRATING5YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_shrating5year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_shratingchg5year(code,trade_date): 

	"""
	基金评级-上海证券5年综合程级较上期变动 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHRATINGCHG5YEAR,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_shratingchg5year'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh5yselectivity(code,trade_date): 

	"""
	基金评级-上海证券5年评级（选证能力） 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH5YSELECTIVITY,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh5yselectivity'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh5ymkttiming(code,trade_date): 

	"""
	基金评级-上海证券5年评级（择时能力） 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH5YMKTTIMING,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh5ymkttiming'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_sh5ysharpratio(code,trade_date): 

	"""
	基金评级-上洋证券5年评级（夏普比率） 季度和月评下的评级一致，需去重，保留季评

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SH5YSHARPRATIO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_sh5ysharpratio'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_shcreditdate(code,trade_date): 

	"""
	基金评级-上海证券评级日期

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列SHCREDITDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_shcreditdate'
	data = {'code': {'symbols': code}, 'trade_date': {'dates': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_publishdate(code,report_date): 

	"""
	财务数据-基金净值变动表-报表披露日期，可用于pitreport_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_navchg_publishdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_openownertote(code,report_date): 

	"""
	财务数据-基金净值变动表-期初所有者权益基金净值report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OPENOWNERTOTE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_openownertote'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_opeundiprof(code,report_date): 

	"""
	财务数据-基金净值变动表-本期经营活动产生的基金净值变动数本期利润report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OPEUNDIPROF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_opeundiprof'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_chgbytradingfund(code,report_date): 

	"""
	财务数据-基金净值变动表-本期基金份额交易产生的基金净值变动数report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列CHGBYTRADINGFUND,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_chgbytradingfund'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_puramt(code,report_date): 

	"""
	财务数据-基金净值变动表-木期转金份额交易产生的基金净值变动数基金申购款report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PURAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_puramt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_redempamt(code,report_date): 

	"""
	财务数据-基金净值变动表-本期基金份额交易产生的基金净值变动数基金赎回款report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列REDEMPAMT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_redempamt'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_navchg_endownertote(code,report_date): 

	"""
	财务数据-基金净值变动表-期末所有者权益基金净值report_date: 为报告期时间，只有中报、年报有数据若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ENDOWNERTOTE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_navchg_endownertote'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_publishdate_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-实际披露日期report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_publishdate_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_unfdnetincper_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-本期已实现收益report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNFDNETINCPER,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_unfdnetincper_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_profitperiod_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-本期利润report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROFITPERIOD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_profitperiod_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_avgfdproper_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-加权平均基金份额本期利润report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGFDPROPER,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_avgfdproper_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fdavgnavyield_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-本期加权平均净值利润率report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDAVGNAVYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fdavgnavyield_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fdassetnavyield_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-本期基金份额净值增长率report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDASSETNAVYIELD,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fdassetnavyield_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fddistnetinc_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-期末可供分配利润report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDDISTNETINC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fddistnetinc_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_unfddistnetinc_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-期末可供分配基金份额利润report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNFDDISTNETINC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_unfddistnetinc_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fdaccgrowate_24q(code,report_date): 

	"""
	财务数据-中（年）报财务指标-期末基金份额累计净值增长率report_date: 为报告期时间，只适用于 中报和年报 ！ 若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDACCGROWATE,单位为%,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fdaccgrowate_24q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_publishdate_q(code,report_date): 

	"""
	财务数据-单季财务指标-报表披露日期，可用于pitreport_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_publishdate_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_unfdnetincper_q(code,report_date): 

	"""
	财务数据-单季财务指标-本期已实现收益季度report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNFDNETINCPER,单位为元/美元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_unfdnetincper_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_profitperiod_q(code,report_date): 

	"""
	财务数据-单季财务指标-本期利润季度report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROFITPERIOD,单位为元/美元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_profitperiod_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_avgfdproper_q(code,report_date): 

	"""
	财务数据-单季财务指标-加权平均基金份额本期利润季度report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AVGFDPROPER,单位为元/美元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_avgfdproper_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_finafdassetnav_q(code,report_date): 

	"""
	财务数据-单季财务指标-期末基金资产净值report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FINAFDASSETNAV,单位为元/美元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_finafdassetnav_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_finaunfdassnav_q(code,report_date): 

	"""
	财务数据-单季财务指标-期末基金份额净值 TODO 取的'期末单位基金资产净值'report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200113-单季度值

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FINAUNFDASSNAV,单位为元/美元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_finaunfdassnav_q'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_bspublishdate(code,report_date): 

	"""
	财务数据-资产负债表-报表披露日期，可用于pitreport_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_bspublishdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_depoinbank(code,report_date): 

	"""
	财务数据-资产负债表-银行存款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DEPOINBANK,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_depoinbank'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_settresedepo(code,report_date): 

	"""
	财务数据-资产负债表-结算备付金report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SETTRESEDEPO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_settresedepo'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_keptmarg(code,report_date): 

	"""
	财务数据-资产负债表-存出保证金report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列KEPTMARG,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_keptmarg'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_tradfinasset(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融资产合并report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TRADFINASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_tradfinasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_stkinve(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融资产股票投资report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列STKINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_stkinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_bdinve(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融资产债券投资report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_bdinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_asseseci(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融资产资产支持证券投资report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ASSESECI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_asseseci'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fdinve(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融资产基金投资report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fdinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_derifinaasset(code,report_date): 

	"""
	财务数据-资产负债表-衍生金融资产report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERIFINAASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_derifinaasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_purcresaasset(code,report_date): 

	"""
	财务数据-资产负债表-买入返售金融资产report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PURCRESAASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_purcresaasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_recesecu(code,report_date): 

	"""
	财务数据-资产负债表-应收证券清算款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列RECESECU,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_recesecu'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_interece(code,report_date): 

	"""
	财务数据-资产负债表-应收利息report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INTERECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_interece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_dividrece(code,report_date): 

	"""
	财务数据-资产负债表-应收股利report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DIVIDRECE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_dividrece'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_recsacca(code,report_date): 

	"""
	财务数据-资产负债表-应收申购款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列RECSACCA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_recsacca'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_otherasse(code,report_date): 

	"""
	财务数据-资产负债表-其他资产report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHERASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_otherasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totasset(code,report_date): 

	"""
	财务数据-资产负债表-资产总计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTASSET,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totasset'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_shorttermborr(code,report_date): 

	"""
	财务数据-资产负债表-短期借款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SHORTTERMBORR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_shorttermborr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_tradfinliab(code,report_date): 

	"""
	财务数据-资产负债表-交易性金融负债report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TRADFINLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_tradfinliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_deriliab(code,report_date): 

	"""
	财务数据-资产负债表-衍生金融负债report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERILIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_deriliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_sellrepasse(code,report_date): 

	"""
	财务数据-资产负债表-卖出回购全融资产款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SELLREPASSE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_sellrepasse'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_paysliqu(code,report_date): 

	"""
	财务数据-资产负债表-应付证券清算款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYSLIQU,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_paysliqu'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_payacc(code,report_date): 

	"""
	财务数据-资产负债表-应付赎回款report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYACC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_payacc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_payfdmanf(code,report_date): 

	"""
	财务数据-资产负债表-应付管理人报酬report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYFDMANF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_payfdmanf'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_payfdtrus(code,report_date): 

	"""
	财务数据-资产负债表-应付托管费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYFDTRUS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_payfdtrus'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_paysserv(code,report_date): 

	"""
	财务数据-资产负债表-成付销售服务费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYSSERV,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_paysserv'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_paytfee(code,report_date): 

	"""
	财务数据-资产负债表-应付交易费用report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAYTFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_paytfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_taxespaya(code,report_date): 

	"""
	财务数据-资产负债表-应交税费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TAXESPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_taxespaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_intepaya(code,report_date): 

	"""
	财务数据-资产负债表-应付利息report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INTEPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_intepaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_profpaya(code,report_date): 

	"""
	财务数据-资产负债表-应付利润report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PROFPAYA,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_profpaya'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_otherliabi(code,report_date): 

	"""
	财务数据-资产负债表-其他负债report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHERLIABI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_otherliabi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totliab(code,report_date): 

	"""
	财务数据-资产负债表-负债合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTLIAB,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totliab'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_paidfd(code,report_date): 

	"""
	财务数据-资产负债表-实收基金report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PAIDFD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_paidfd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_undiprof(code,report_date): 

	"""
	财务数据-资产负债表-未分配利润report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列UNDIPROF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_undiprof'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totalownerequi(code,report_date): 

	"""
	财务数据-资产负债表-所有者权益合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTALOWNEREQUI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totalownerequi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totalliabsharequi(code,report_date): 

	"""
	财务数据-资产负债表-负债和所有者权益合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTALLIABSHAREQUI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totalliabsharequi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_pfpublishdate(code,report_date): 

	"""
	财务数据-利润表-报表披露日期，可用于pitreport_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列PUBLISHDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_pfpublishdate'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_inc(code,report_date): 

	"""
	财务数据-利润表-收入合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_inc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totinteinco(code,report_date): 

	"""
	财务数据-利润表-利息收入合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTINTEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totinteinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_depointeinc(code,report_date): 

	"""
	财务数据-利润表-利息收入存款利息收入report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DEPOINTEINC,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_depointeinc'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_bdinteinco(code,report_date): 

	"""
	财务数据-利润表-利息收入债券利息收入report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDINTEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_bdinteinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_assbinte(code,report_date): 

	"""
	财务数据-利润表-利息收入资产支持证券利息收入report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ASSBINTE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_assbinte'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_buyfin(code,report_date): 

	"""
	财务数据-利润表-利息收入买入返售金融资产收入report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BUYFIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_buyfin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_invetotr(code,report_date): 

	"""
	财务数据-利润表-投资收益合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INVETOTR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_invetotr'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_bdinveinco(code,report_date): 

	"""
	财务数据-利润表-投资收益债券投资收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BDINVEINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_bdinveinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_assbinvi(code,report_date): 

	"""
	财务数据-利润表-投资收益资产支持证券投资收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ASSBINVI,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_assbinvi'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fdinveqd(code,report_date): 

	"""
	财务数据-利润表-投资收益基金投资收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FDINVEQD,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fdinveqd'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_deriinve(code,report_date): 

	"""
	财务数据-利润表-投资收益衍生工具收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DERIINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_deriinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_diviinve(code,report_date): 

	"""
	财务数据-利润表-投资收益股利收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列DIVIINVE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_diviinve'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_valuechgloss(code,report_date): 

	"""
	财务数据-利润表-公允价值变动收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列VALUECHGLOSS,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_valuechgloss'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_exchggain(code,report_date): 

	"""
	财务数据-利润表-汇兑收益report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列EXCHGGAIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_exchggain'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_otherinco(code,report_date): 

	"""
	财务数据-利润表-其他收入report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHERINCO,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_otherinco'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_fee(code,report_date): 

	"""
	财务数据-利润表-费用合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_fee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_manafee(code,report_date): 

	"""
	财务数据-利润表-管理人报酬report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列MANAFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_manafee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_custfee(code,report_date): 

	"""
	财务数据-利润表-托管费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列CUSTFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_custfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_sellserf(code,report_date): 

	"""
	财务数据-利润表-销售服务费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SELLSERF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_sellserf'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_tradefee(code,report_date): 

	"""
	财务数据-利润表-交易费用report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TRADEFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_tradefee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_inteexpe(code,report_date): 

	"""
	财务数据-利润表-利息支出report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INTEEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_inteexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_sellfin(code,report_date): 

	"""
	财务数据-利润表-利息支出卖出回购金融资产支出report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SELLFIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_sellfin'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_finexpe(code,report_date): 

	"""
	财务数据-利润表-财务费用report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列FINEXPE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_finexpe'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_auditfee(code,report_date): 

	"""
	财务数据-利润表-审计费用report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列AUDITFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_auditfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_infopubfee(code,report_date): 

	"""
	财务数据-利润表-信息披露费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列INFOPUBFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_infopubfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_bankchar(code,report_date): 

	"""
	财务数据-利润表-银行手续费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列BANKCHAR,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_bankchar'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_acctmain(code,report_date): 

	"""
	财务数据-利润表-账户维护费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列ACCTMAIN,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_acctmain'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_seatusef(code,report_date): 

	"""
	财务数据-利润表-席位使用费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列SEATUSEF,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_seatusef'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_listannfee(code,report_date): 

	"""
	财务数据-利润表-上市年费report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列LISTANNFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_listannfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_other(code,report_date): 

	"""
	财务数据-利润表-其他费用report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHER,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_other'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_otherfee(code,report_date): 

	"""
	财务数据-利润表-其他费用合计report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列OTHERFEE,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_otherfee'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_totprofit(code,report_date): 

	"""
	财务数据-利润表-利润总额report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列TOTPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_totprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_netprofit(code,report_date): 

	"""
	财务数据-利润表-净利润report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列NETPROFIT,单位为元,数据类型为number
	"""

	path = server_ip + '/get_fd_fin_netprofit'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_fin_memo(code,report_date): 

	"""
	财务数据-利润表-备注report_date: 为报告期时间若涉及分级基金，原则上返回的是合计值（对应的ISSTAT=0）；有些分级基金在表中是单独统计的值（对应的ISSTAT=1)，这种情况一般是：分级基金就是母基金本身（即基础信息表中的"FSYMBOL"="SYMBOLCOMP"）返回的报表类型：200112-基金期末值，其余类型的数据不全

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列REPORTDATE,数值列MEMO,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_fd_fin_memo'
	data = {'code': {'symbols': code}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tradedate(date): 

	"""
	根据传入日期获取之前最接近的交易日期

	Args:
		date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_s_tradedate'
	data = {'date': date}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_ndays(trade_date,n): 

	"""
	根据传入日期获取之前最接近的交易日期再往前/后推N个交易日（N<0表示前推，N>0表示后推）

	Args:
		trade_date:交易日，'yyyymmdd'格式,例如20240705
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_s_ndays'
	data = {'trade_date': {'date': trade_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdays(start_date,end_date,period='d',exchange='001002',is_calendar = False): 

	"""
	返回区间内交易日

	Args:
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		period:时间周期，须为['d','w','m','q','y','D','W','M','Q','Y']中的一种,例如M
		exchange:交易所，['001002' -上海证券交易所 ,'001003' -深圳证券交易所,'001004' -股份转让市场],例如001002
		is_calendar:日期类型，True日历日，False交易日,例如True
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_s_tdays'
	data = {'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'period': {'type': period}, 'exchange': {'type': exchange}, 'is_calendar': {'bool_type': is_calendar}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_tdaysoffset(trade_date,n,period,exchange,is_calendar): 

	"""
	时间偏移

	Args:
		trade_date:交易日，'yyyymmdd'格式,例如20240705
		period:时间周期，须为['d','w','m','q','y','D','W','M','Q','Y']中的一种,例如M
		exchange:交易所，['001002' -上海证券交易所 ,'001003' -深圳证券交易所,'001004' -股份转让市场],例如001002
		is_calendar:日期类型，True日历日，False交易日,例如True
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_s_tdaysoffset'
	data = {'trade_date': {'date': trade_date}, 'period': {'type': period}, 'exchange': {'type': exchange}, 'is_calendar': {'bool_type': is_calendar}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_fd_getfundid(code,symbol_col,range): 

	"""
	基于基金代码，提取基金的唯一标识：SECURITYIDsymbol_col：用于筛选的基金名称列    None-不做筛选，返回所有SECURITYID    FSYMBOL-对不带后缀的基金代码进行筛选，    SYMBOL-对带后缀的基金代码进行筛选range: 返回基金代码条件    last-返回FSYMBOL或SYMBOL下最新的SECURITYID    first-返回FSYMBOL或SYMBOL下最早的SECURITYID返回：        FSYMBOL     SECURITYID      SYMBOL0   000001  1030000006      000001.OF1   000120  1030002239      000120.OF4   006321  1030012162      006321.OF5   006528  1030012806      006528.OF3   050029  1030006378      050029.OF9   160630  1030004162      160630.OF10  160630  1030019082      160630.SZ8   161811  1030002743      161811.OF7   161811  1030018568      161811.SZ

	Args:
		code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_fd_getfundid'
	data = {'code': {'symbols': code}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_index_indexcomponent(symbols): 

	"""
	根据指标code获取成分股code

	Args:
		symbols:指数代码数组,例如['000001', '399107', '000688']
	Returns:
		dataframe格式:列名为代码符号列nan,时间列nan,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_index_indexcomponent'
	data = {'symbols': symbols}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_declaredate(code,report_type,report_date): 

	"""
	首次公告日期

	Args:
		code:股票代码,例如['600745', '603986']
		report_type:报表类型，'1'- 合并期末 '2'- 母公司期末 '3'- 合并期初 '4'- 母公司期初,例如1
		report_date:报告期数组，'yyyymmdd'格式，一季报0331、中报0630、三季报0930、年报1231,例如['20231231', '20221231', '20211231']
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列ENDDATE,数值列DECLAREDATE,单位为nan,数据类型为string
	"""

	path = server_ip + '/get_s_declaredate'
	data = {'code': {'symbols': code}, 'report_type': {'type': report_type}, 'report_date': {'dates': report_date}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

def get_s_dailyprice(code,start_date,end_date,fields = [],adjust_type = 'F',count_type = '1'): 

	"""
	A股票日行情相关指标    Args:            code:基金代码需要加后缀,例如['160628.OF', '150193.OF', '150192.OF', '161811.OF', '161811.SZ', '050029.OF']            trade_date:交易日数组，'yyyymmdd'格式,例如['20240705', '20240704', '20240703']            adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如FReturns:data(DataFrame) columns如下：    SYMBOL: 股票代码,6位数字组成    TRADEDATE: 交易日，格式YYYYMMDD    LCLOSE:前收盘价 单位：元    TOPEN: 开盘价 单位：元    THIGH: 最高价 单位：元    TLOW:  最低价 单位：元    TCLOSE: 收盘价 单位：元    AVGPRICE: 均价 单位：元    AMPLITUDE: 振幅(基于前收价) 单位：%    CHANGE: 涨跌 单位：元    PCHG: 涨跌幅 单位：%    TURNRATE: 换手率 单位：%    VOL: 成交量 单位：股 注：成交量的除权因子使用方式与价格复权方式不同：后复权成交量n = 当天成交量 / 顺推累计除权因子 前复权成交量n = 当天成交量 * 逆推累积除权因子    AMOUNT: 成交金额 单位：元    DEALS:成交笔数 单位：比    AVGVOL:平均每笔成交量 单位：股/笔    TOTALSHARE:总股本 单位：万股    TOTPCNY:总市值（人民币）单位：万元    CIRCPCNY:流通市值（人民币） 单位：万元    CIRCAMT:流通股本 单位：万股    NCIRCAMT:非流通股股本 单位：万股    PNCIRCP:参与计算非流通市值 万元    RECIRCAMT:限售流通股本 万股    RECIRCPCNY:限售流通市值（人民币）    TRANSTATUS:当日交易状态,枚举值:1 当日上市    2 当时正常交易，且有交易 3 当日正常交易，但实际未有交易 4 当日停牌 5 暂停上市阶段 6 当日退市    XDY:当次除权因子,本次除权日，因分红送股转增等因素，依照除权前后价值不变动的原则计算的当次除权的折价因子    LTDXDY:逆推累积除权因子，以当前最新一天交易价格为标准，计算每次时间区间的累积除权因子，既每天实际交易价格与逆推复权价格之间的比值关系    THELTDXDY:顺推累计除权因子，以上市第一天为标准，计算每次时间区间的累积除权因子，既顺推复权价格与每天实际交易价格与之间的比值关系

	Args:
		code:股票代码,例如['600745', '603986']
		start_date:开始时间，'yyyymmdd'格式,例如20240703
		end_date:结束时间，'yyyymmdd'格式,例如20240705
		fileds:返回字段列表,例如['']
		adjust_type:复权方式，'F'-前复权，'B'-后复权,'N'-不复权,例如F
		count_type:统计类型，'1'-按实际披露日期统计(可回测)、'2'-不考虑实际披露日期(数据会回填，不适合回测) ,例如1
	Returns:
		dataframe格式:列名为代码符号列SYMBOL,时间列TRADEDATE,数值列nan,单位为nan,数据类型为nan
	"""

	path = server_ip + '/get_s_dailyprice'
	data = {'code': {'symbols': code}, 'start_date': {'date': start_date}, 'end_date': {'date': end_date}, 'fields': {'value': fields}, 'adjust_type': {'type': adjust_type}, 'count_type': {'type': count_type}}
	request_data = generate_request_body(res_method,path,data)
	headers = get_headers(request_data, access_key, secret_key)
	response = requests.post(path, headers=headers, json=data)
	if response.status_code == 200:
		content_encoding = response.headers.get('Content-Encoding')
		if content_encoding == 'gzip':
			print('IT IS GZIP!')
		if content_encoding == 'br':
			print('IT IS BR!')
		print("Request successful.")
		return response.json()
	else:
		print("Request failed with status:", response.json())
		return False

