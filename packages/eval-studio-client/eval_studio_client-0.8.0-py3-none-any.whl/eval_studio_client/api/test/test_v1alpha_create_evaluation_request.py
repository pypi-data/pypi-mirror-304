# coding: utf-8

"""
    ai/h2o/eval_studio/v1alpha/collection.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from eval_studio_client.api.models.v1alpha_create_evaluation_request import V1alphaCreateEvaluationRequest

class TestV1alphaCreateEvaluationRequest(unittest.TestCase):
    """V1alphaCreateEvaluationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alphaCreateEvaluationRequest:
        """Test V1alphaCreateEvaluationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alphaCreateEvaluationRequest`
        """
        model = V1alphaCreateEvaluationRequest()
        if include_optional:
            return V1alphaCreateEvaluationRequest(
                evaluator_identifiers = [
                    ''
                    ],
                model = eval_studio_client.api.models.v1alpha_model.v1alphaModel(
                    name = '', 
                    create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    creator = '', 
                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updater = '', 
                    delete_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleter = '', 
                    display_name = '', 
                    description = '', 
                    url = '', 
                    api_key = '', 
                    type = 'MODEL_TYPE_UNSPECIFIED', 
                    parameters = '', 
                    demo = True, ),
                evaluation_tests = [
                    eval_studio_client.api.models.v1alpha_evaluation_test.v1alphaEvaluationTest(
                        document_urls = [
                            ''
                            ], 
                        test_cases = [
                            eval_studio_client.api.models.v1alpha_test_case.v1alphaTestCase(
                                name = '', 
                                create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                creator = '', 
                                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updater = '', 
                                delete_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                deleter = '', 
                                parent = '', 
                                prompt = '', 
                                answer = '', 
                                constraints = [
                                    ''
                                    ], 
                                condition = '', )
                            ], 
                        test_case_relationships = [
                            eval_studio_client.api.models.v1alpha_test_case_relationship.v1alphaTestCaseRelationship(
                                source = '', 
                                target = '', 
                                type = '', )
                            ], )
                    ],
                operation = '',
                llm_models = [
                    ''
                    ],
                use_cache = True,
                evaluators_parameters = {
                    'key' : ''
                    },
                model_parameters = '',
                h2ogpte_collection = ''
            )
        else:
            return V1alphaCreateEvaluationRequest(
        )
        """

    def testV1alphaCreateEvaluationRequest(self):
        """Test V1alphaCreateEvaluationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
