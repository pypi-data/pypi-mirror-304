
import enum
from typing import ( 
    List,
    Tuple
)

from .fcscore_core import *
from .fcscore_geometry import *
from .fcscore_mesh import *

# Model Operations
class StoredEntityType(enum.Enum):
    INVALID_ENTITY : StoredEntityType
    STORAGE_ONLY_ENTITY : StoredEntityType
    GEOMETRY_ENTITY : StoredEntityType
    MESH_COMPONENT_ENTITY : StoredEntityType
    MESH_SET_ENTITY : StoredEntityType
    ANALYSIS_ENTITY : StoredEntityType
    REFERENCE_ENTITY : StoredEntityType
    INFORMATION : StoredEntityType

class ItemType(enum.Enum):
    INVALID_ITEM: ItemType
    ITEM_TYPE_FILE: ItemType
    ITEM_TYPE_FOLDER: ItemType
    ITEM_TYPE_CONTAINER: ItemType

class ModelItemInstance:
    def is_valid(self) -> bool: ...
    def get_error_message(self) -> str: ...
    def get_instance_id(self) -> int: ...
    def has_visibility_control(self) -> bool: ...
    def get_is_visible(self) -> bool: ...
    def get_item_color(self) -> object: ...
    def get_item_display_name(self) -> str: ...
    def get_item_opacity(self) -> float: ...
    def get_stored_entity_type(self) -> StoredEntityType: ...
    def get_item_type(self) -> object: ...

    def set_item_id(self, item_id: int) -> bool: ...
    def get_parent_id(self) -> int: ...
    def get_directly_nested_item_ids(self) -> List[int]: ...
    def set_parent_id(self, parent_id: int) -> bool: ...

    def set_item_name(self, display_name: str) -> bool: ...
    def set_item_visibility(self, is_visible: bool) -> bool: ...
    def set_item_color(self, target_color: Color) -> bool: ...

class GeometryInstance(ModelItemInstance):
    def is_sub_shape(self) -> bool: ...
    def get_shape(self) -> TopoDS_Shape: ...
    def get_geometry(self) -> GEOM_Object: ...
    def get_shape_type(self) -> TopAbs_ShapeEnum: ...
    def get_t2g_file_name(self) -> str: ...
    def get_failed_shape_ids(self) -> List[int]: ...
    
    def set_shape(self, shape: TopoDS_Shape, shape_type: TopAbs_ShapeEnum) -> bool: ...
    def set_t2g_file_name(self, file_path: str) -> bool: ...

class MeshComponentInstance(ModelItemInstance):
    def save_updated_mesh_component(self, component_mesh: ComponentMesh) -> bool: ...
    def get_mesh_component(self) -> ComponentMesh: ...

class MeshSetInstance(ModelItemInstance):
    def save_updated_mesh_reference(self, mesh_reference: MeshReference) -> bool: ...
    def get_mesh_reference(self) -> MeshReference: ...

class ModelConfiguration:
    def __init__(self, model_name: str, model_base_path: str, geom_export: str, mesh_export: str):
        """
        Initializes a ModelConfiguration object.

        :param model_name: Name of the model, used for the central model file export.
        :param model_base_path: Path to CBF export file
        :param geom_export: Relative path to base path for exporting geometry visualization assets.
        :param mesh_export: Relative path to base path for exporting mesh visualization assets.
        """
        ... 
    def __repr__(self) -> str:
        """
        Returns a string representation of the ModelConfiguration object.
        """
        ...

class Model:
    def __init__(self, model_config: ModelConfiguration) -> None: ...

    def get_model_item_instance(self, instanceID: int) -> ModelItemInstance: ...
    def get_geometry_instance(self, instanceID: int) -> GeometryInstance: ...
    def get_geometry_shape_by_id(self, instance_id: int) -> GEOM_Object: ...
    def get_mesh_component_instance(self, instanceID: int) -> MeshComponentInstance: ...
    def get_mesh_set_instance(self, instanceID: int) -> MeshSetInstance: ...
    
    def add_container(self, containerName: str) -> ModelItemInstance: ...
    def add_folder(self, folderName: str, parentId: int) -> ModelItemInstance: ...
    def add_file(self, displayName: str, parentId: int) -> ModelItemInstance: ...
    
    def add_geometry(self, fileId: int, geometry: GEOM_Object, addWithFineResolution: bool = True) -> GeometryInstance: ...
    def add_mesh(self, fileId: int, mesh: Mesh) -> MeshComponentInstance: ...
    def add_mesh_set(self, file_id: int, element_ids: set, node_ids: set) -> MeshComponentInstance: ...

    def delete_model_instance(self, instanceId: int) -> List[int]: """
    Deletes complete model items and everything nested under them recursively.
    """
    ...
    def delete_subshape_instance(self, instance_id: int) -> List[int]: ...
    def move_shape(self, source_shape_id: int, target_file_id: int, perform_copy_paste: bool=True) -> List[int]: ...
    
    def get_container_id_by_name(self, containerName: str) -> int: ...
    def get_added_item_ids(self) -> List[int]: ...
    def get_nested_component_ids(self, instanceId: int) -> List[int]: ...
    def get_all_nested_component_ids(self, instanceId: int) -> List[int]: ...
    def get_item_parent_id(self, instanceId: int) -> int: ...
    def get_all_ancestors(self, instanceId: int) -> List[int]: ...
    def get_item_nesting_level(self, instanceId: int) -> int: ...
    
    def set_model_name(self, modelFileName: str) -> bool: ...
    def get_model_name(self) -> str: ...
    def get_model_version(self) -> str: ...
    def set_model_version(self, docVersion: str) -> None: ...
    def save_model(self) -> bool: ...
    def clear_model(self) -> bool: ...
    def load_model(self, modelFilePath: str) -> bool: ...