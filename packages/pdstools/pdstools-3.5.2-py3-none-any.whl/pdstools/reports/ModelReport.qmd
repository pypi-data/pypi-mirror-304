---
title: "ADM Standalone Model Report"
title-block-banner: true
author: "Pega Data Scientist tools"
date: today
subtitle: > 
  Details of one ADM model instance
execute:
  echo: false
format:
  html:
    page-layout: full
    code-fold: true
    embed-resources: true
    standalone: true
    code-tools: true
    toc: true
    toc-title: Table of Contents
    theme:
        light: flatly
    fontsize: small
jupyter: python3
---

```{python}
# | code-fold: true
# | output: false

import sys
import os.path
from pathlib import Path
import re
import subprocess
import datetime

from pdstools import datasets, ADMDatamart
from pdstools.utils.cdh_utils import zRatio, lift
import polars as pl
from IPython.display import display, Markdown
from great_tables import GT, style, md, html, loc
import plotly.express as px
from plotly.graph_objects import Figure
from typing import Union, Optional, Literal

# Convenience wrapper functions


def quarto_print(text):
    display(Markdown(text))


def quarto_callout_info(info):
    quarto_print(
        """
::: {.callout-note}
%s
:::
"""
        % info
    )


def quarto_callout_important(info):
    quarto_print(
        """
::: {.callout-important}
%s
:::
"""
        % info
    )


def polars_col_exists(df, col):
    return col in df.columns and df.schema[col] != pl.Null


def polars_subset_to_existing_cols(cols):
    return [col for col in cols if col in datamart_all_columns]

```

```{python}
# | tags: [parameters]

# These parameters are overwritten when called externally

datafolder = ""
modelfilename = ""
predictorfilename = ""
model_id = ""

only_active_predictors = True

title = "Demo Dataset"  # pass in customer name here
subtitle = ""  # typically used to pass in a date range or other qualification of the data source

kwargs = dict()


```

```{python}
# Predictor data for one model ID
if len(kwargs) > 0:
    # streamlit call
    model_id = kwargs["model_id"]
    datamart = ADMDatamart(
        **kwargs, include_cols="pyFeatureImportance", query=pl.col("ModelID") == model_id
    ).fillMissing()
    only_active_predictors = kwargs["only_active_predictors"]
elif len(datafolder) > 0 or len(modelfilename) > 0 or len(predictorfilename) > 0:
    # command line call
    datamart = ADMDatamart(
        datafolder,
        model_filename=modelfilename,
        predictor_filename=predictorfilename,
        extract_keys=True,
        include_cols=["pyFeatureImportance"],
        query=pl.col("ModelID") == model_id,
    ).fillMissing()
else:
    # fall back to sample data
    model_id = "bd70a915-697a-5d43-ab2c-53b0557c85a0"
    datamart = datasets.CDHSample(query=pl.col("ModelID") == model_id)

# TODO ensure this is only one predictor snapshot, just in case? although it would be
# neat to show predictor evolution, if available

# Simple way to make sure Treatment is set and not null
if polars_col_exists(datamart.modelData, "Treatment"):
    datamart.modelData = datamart.modelData.with_columns(
        pl.col("Treatment").fill_null("-")
    )
else:
    datamart.modelData = datamart.modelData.with_columns(pl.lit("-").alias("Treatment"))

if only_active_predictors:
    status_filter = pl.col("EntryType") == "Active"
else:
    status_filter = pl.col("EntryType") != "Classifier"


```


```{python}
channel_name = (
    datamart.last(strategy="lazy")
    .select(pl.format("{}/{}", "Direction", "Channel"))
    .unique()
    .collect()
    .item(0, 0)
)
model_name_in_context = (
    datamart.last(strategy="lazy")
    .select(pl.format("{}/{}/{}/{}", "Issue", "Group", "Name", "Treatment"))
    .unique()
    .collect()
    .item(0, 0)
)
model_name = (
    datamart.last(strategy="lazy")
    .select(pl.format("{}/{}", "Name", "Treatment"))
    .unique()
    .collect()
    .item(0, 0)
)

quarto_print(
    f"""
# {title}

{subtitle}

## {model_name_in_context}

| Channel | ID |
|:-----|------:|
| {channel_name} | {model_id} |

"""
)
```


```{python}
fig = datamart.plotScoreDistribution(modelids=[model_id])

# Customize some of the default styling of the plot

fig.update_layout(
    title=f"Classifier Score Distribution<br>{model_name}", xaxis_title=""
)
fig.data[0].opacity = 0.5
fig.data[1].line.color = "#EF8B08"
fig.data[1].line.width = 3
fig.data[1].marker.color = "black"

fig.show()
```

::: {.callout-tip}
The charts (built with [Plotly](https://plotly.com/python/)) have [user controls for panning,
zooming etc](https://plotly.com/chart-studio-help/zoom-pan-hover-controls/). These interactive plots do not render well in portals like Sharepoint
or Box. It is preferable to view them from a browser.
:::

## Model Performance

```{python}
classifier = (
    datamart.last("predictorData", strategy="lazy")
    .filter(pl.col("EntryType") == "Classifier")
    .sort("BinIndex")
)

auc_roc = round(classifier.select(pl.last("Performance")).collect().item(), 4)

quarto_print(
    f"""
The model performance is **{auc_roc}** measured as AUC-ROC. This number is calculated from the “active” bins of the Classifier.
"""
)

```

The classifier maps the model scores (average of the log odds of the active predictors) to a propensity value. The “acti ve” bins are the ones that can be reached from the current binning of the active predictors.

See the [ADM Explained](https://pegasystems.github.io/pega-datascientist-tools/Python/articles/ADMExplained.html) article for more information on how ADM exactly works.

```{python}

gt = (
    GT(
        classifier.collect().select(
            pl.last("ResponseCount"),
            pl.last("Positives"),
            (pl.last("Positives") / pl.last("ResponseCount")).alias("Base Propensity"),
            pl.last("Performance"),
        )
    )
    .tab_options(table_font_size=8)
    .cols_label(
        ResponseCount="Responses",
    )
    .fmt_number(
        decimals=0,
        columns=["ResponseCount", "Positives"],
    )
    .fmt_percent(decimals=3, columns="Base Propensity")
    .fmt_number(
        decimals=2,
        scale_by=100,
        columns=["Performance"],
    )
)

display(gt)
```


## Score Distribution

The Score Distribution shows the volume and average propensity in every bin of
the score ranges of the Classifier.

Propensity is defined as $\frac{positives}{positives+negatives}$ per bin.
The adjusted propensity that is returned is a small modification (*Laplace
smoothing*) to this and calculated as
$\frac{0.5+positives}{1+positives+negatives}$ so new models initially return a
propensity of 0.5. This helps to address the cold start when introducing new
actions.

::: {.callout-warning}
The Python version has no notion of unreachable bins (yet), when it has we should grey out the binning rows that fall outside of the active range
:::

```{python}

human_friendly_scoredistribution = (
    classifier.select(
        pl.col("BinIndex").alias("Index"),
        pl.col("BinSymbol").alias("Bin"),
        pl.col("BinResponseCount").alias("Responses"),
        pl.col("BinPositives").alias("Positives"),
        (100 * (pl.col("BinPositives").cum_sum(reverse=True)) / pl.sum("BinPositives"))
        .round(2)
        .alias("Cum. Positives (%)"),
        (
            100
            * (pl.col("BinResponseCount").cum_sum(reverse=True))
            / pl.sum("BinResponseCount")
        )
        .round(2)
        .alias("Cum. Total (%)"),
        (100 * pl.col("BinPropensity")).round(3).alias("Propensity (%)"),
        zRatio(pl.col("BinPositives"), pl.col("BinNegatives"))
        .round(3)
        .alias("Z Ratio"),
        (lift(pl.col("BinPositives"), pl.col("BinNegatives")) * 100)
        .round(2)
        .alias("Lift (%)"),
        (pl.col("BinAdjustedPropensity") * 100)
        .round(3)
        .alias("Adjusted Propensity (%)"),
    )
).collect()

# TODO some of the formatting could be done in GT instead of in polars

gt = GT(human_friendly_scoredistribution).tab_options(table_font_size=8).tab_header(title="Score Distribution")

display(gt)

```


## Cumulative Gains and Lift charts

Below are alternative ways to view the Classifier.

The Cumulative Gains chart shows the percentage of he overall cases in the "positive" category gained by targeting a percentage of the total number of cases. For example, this view shows how large a percentage of the total expected responders you target by targeting only the top decile.

The Lift chart is derived from this and shows the ratio of the cumulative gain and the targeted volume.

TODO: unfortunately the Python version has no notion of unreachable bins (yet) which can cause really strange high lift values

::: {layout-ncol=2}

```{python}
# TODO perhaps this should move into the pdstools plot functions "plotCumulativeGains"
# however it is so trivial, not really sure it should be. See also the other gains charts
# in the health check.
# TODO in HC there now is a beter way to plot gains, use that when it has progressed into PDS tools
fig = (
    px.area(
        human_friendly_scoredistribution,
        x="Cum. Total (%)",
        y="Cum. Positives (%)",
        title="Cumulative Gains",
        template="pega",
    )
    .add_shape(type="line", line=dict(dash="dash"), x0=0, x1=100, y0=0, y1=100)
    .update_yaxes(
        scaleanchor="x",
        scaleratio=1,
        constrain="domain",
        title="% of Positive Responders",
    )
    .update_xaxes(constrain="domain", title="% of Population")
    .update_layout(
        autosize=False,
        width=400,
        height=400,
    )
)

fig.show()
```

```{python}
# TODO perhaps this should move into the pdstools plot functions "plotCumulativeLift"
fig = (
    px.area(
        human_friendly_scoredistribution,
        x="Cum. Total (%)",
        y="Lift (%)",
        title="Lift",
        template="pega",
    )
    .update_yaxes(
        scaleanchor="x", scaleratio=0.01, constrain="domain", title="Propensity Lift"
    )
    .update_xaxes(constrain="domain", title="% of Population")
    .update_layout(
        autosize=False,
        width=400,
        height=400,
    )
)

fig.show()
```

:::

```{python}
px.bar(
    classifier.melt(
        id_vars=["BinSymbol", "BinIndex"],
        value_vars=["BinPositives", "BinNegatives"],
        value_name="Count",
        variable_name="Response",
    ).with_columns(
        (pl.col("Count") / pl.col("Count").max()).over("Response").alias("Relative Count")
    ).collect(),
    x="BinIndex",
    y="Relative Count",
    color="Response",
    barmode="group",
    template="pega",
    title="Class Separation",
    height=400, width=600,
    color_discrete_map={
        'BinNegatives': 'orangered',
        'BinPositives': 'green'
    }
).update_layout(xaxis_title=None).update_xaxes(showticklabels=False)
```

# Trend charts

::: {layout-ncol=2}

```{python}
# TODO see if we can put the various trend charts in tabs - although this seems to require go not express, then gain .data[0] probably gives the go objects

# But maybe .data[0] gives the trace

fig = (
    datamart.plotOverTime("weighted_performance")
    .update_layout(
        title="Model Performance Trend",
        yaxis_title="ROC-AUC",
        xaxis_title="",
        showlegend=False,
        autosize=False,
        width=400,
        height=300,
    )
)

fig.show()
```

```{python}
fig = (
    datamart.plotOverTime("SuccessRate")
    .update_layout(
        title="Success Rate Trend",
        yaxis_title="Success Rate",
        xaxis_title="",
        showlegend=False,
        autosize=False,
        width=400,
        height=300,
    )
    .update_yaxes(rangemode="tozero")
)

fig.show()
```

:::

# Performance by Predictor Category

Showing the performance across all predictors. The predictor categories default
to the text before the first dot. This can be customized when reading the data
for a particular customer.

```{python}
# | error: true

# TODO facets are meaningless but plotPredictorCategoryPerformance fails when
# not giving any

fig = datamart.plotPredictorCategoryPerformance(facets="Channel")

fig.update_layout(
    title="Predictor Performance per Category",
    yaxis_title="",
    showlegend=False,
    height=300,
    width=500,
)

fig.show()
```

# Predictor Overview

The predictors for this model are sorted by performance and grouped if they are
correlated (shown with an indentation and a lighter color).

The negatives and positives counts are usually the same across all the
predictors but will be different when predictors have been removed or added. IH
predictors often have slightly lower counts.

For Adaptive Gradient Boosting models ("AGB") the number of positives and
negatives is not available.



```{python}
# TODO add a list of correlated predictors as a list, to show in the
# single predictor view (not the overview, that already shows them with indentation)
# See https://github.com/pegasystems/pega-datascientist-tools/issues/127

predictors_summary_info = (
    datamart.last("predictorData", strategy="lazy")
    .sort(["PredictorName", "BinIndex"])
    .group_by(
        "PredictorName",
        maintain_order=True,
    )
    .agg(
        pl.last("ResponseCount").alias("Responses"),
        pl.last("Positives"),
        pl.last("EntryType"),
        (pl.last("EntryType") == "Active").alias("isActive"),
        pl.last("GroupIndex"),
        pl.last("Type"),
        pl.last("Performance").alias("Univariate Performance"),
        pl.max("BinIndex").alias("Bins"),
        (
            pl.col("BinResponseCount").filter(pl.col("BinType") == "MISSING").sum()
            * 100
            / pl.sum("BinResponseCount")
        ).alias("Missing %"),
        (
            pl.col("BinResponseCount").filter(pl.col("BinType") == "RESIDUAL").sum()
            * 100
            / pl.sum("BinResponseCount")
        ).alias("Residual %"),
        pl.col("BinResponseCount").cast(pl.String).alias("Binning"),
    )
    .sort(
        ["GroupIndex", "isActive", "Univariate Performance"],
        descending=[False, True, True],
        nulls_last=True,
    )
    .with_columns(pl.col("isActive").any().over("GroupIndex").alias("AnyActiveInGroup"))
    .with_columns(
        pl.when(pl.col("isActive").not_() & pl.col("AnyActiveInGroup"))
        .then(pl.lit("&nbsp;&nbsp;&nbsp;&nbsp;"))
        .otherwise(pl.lit(""))
        .alias("Indentation")
    )
    .with_columns(
        pl.col("Binning").list.join(" "),
        pl.when(status_filter)
        .then(
            pl.format(
                "{} [{}](#{})",
                pl.col("Indentation"),
                pl.col("PredictorName"),
                pl.col("PredictorName")
                .cast(pl.String)
                .str.to_lowercase()
                .str.replace_all(" ", "-", literal=True),
            )
        )
        .otherwise(pl.format("{}{}", pl.col("Indentation"), pl.col("PredictorName")))
        .alias("PredictorLink"),
    )
)


# TODO we can easily color the predictors by Category

gt = (
    GT(
        predictors_summary_info.filter(pl.col("EntryType") != "Classifier").collect(),
        rowname_col="PredictorLink",
    )
    .tab_options(table_font_size=6)
    .tab_header("Predictor Overview")
)

display(
    gt.cols_hide(
        [
            "Positives",
            "Responses",
            "PredictorName",
            "isActive",
            "GroupIndex",
            "AnyActiveInGroup",
            "Indentation",
        ]
    )
    .cols_label(EntryType="Status")
    .fmt_number(
        decimals=2,
        scale_by=100.0,
        columns=["Univariate Performance"],
    )
    .fmt_number(
        decimals=2,
        columns=["Missing %", "Residual %"],
    )
    .tab_style(
        style=style.text(color="grey"),
        locations=loc.body(rows=pl.col("isActive").not_()),
    )
    .fmt_nanoplot(columns="Binning", plot_type="bar")
    .fmt_markdown(columns=["PredictorLink"])
)
```

# Binning of the Predictors

The predictors are listed in the same order as in the summary above.

```{python}
quarto_print(
    f"""
Here we show **{'only the active' if only_active_predictors else 'all'}**
predictors. This can be configured via a parameter to this report.
"""
)
```

```{python}
# "Philip Mann" plot with simple red/green lift bars relative to base propensity
# TODO currently shared between ModelReport.qmd and BinAggregator.py and
# copied into plot_base - move over to that version once PDS tools version got bumped
def plotBinningLift(
    binning,
    col_facet=None,
    row_facet=None,
    custom_data=["PredictorName", "BinSymbol"],
    return_df=False,
) -> Union[pl.DataFrame, Figure]:
    if not isinstance(binning, pl.LazyFrame):
        binning = binning.lazy()

    # Add Lift column if not present
    if "Lift" not in binning.columns:
        binning = binning.with_columns(
            (lift(pl.col("BinPositives"), pl.col("BinNegatives")) - 1.0).alias("Lift")
        )

    # Optionally a shading expression
    if "BinPositives" in binning.columns:
        shading_expr = pl.col("BinPositives") <= 5
    else:
        shading_expr = pl.lit(False)

    pm_plot_binning_table = (
        # binning.select(
        #     pl.col(["PredictorName", "BinIndex", "BinSymbol", "BinPositives", "Lift"]),
        #     # add back bin reponses now?
        #     (lift(pl.col("BinPositives"), pl.col("BinNegatives")) - 1.0), # Pega starts lift at 0.0
        # )
        binning.with_columns(
            pl.when((pl.col("Lift") >= 0.0) & shading_expr.not_())
            .then(pl.lit("pos"))
            .when((pl.col("Lift") >= 0.0) & shading_expr)
            .then(pl.lit("pos_shaded"))
            .when((pl.col("Lift") < 0.0) & shading_expr.not_())
            .then(pl.lit("neg"))
            .otherwise(pl.lit("neg_shaded"))
            .alias("Direction"),
        )
        .sort(["PredictorName", "BinIndex"])
        .collect()
    )

    # Abbreviate possibly very long bin labels
    # TODO generalize this, use it in the standard bin plot as well
    # and make sure the resulting labels are unique - with just the
    # truncate they are not necessarily unique
    pm_plot_binning_table = pm_plot_binning_table.with_columns(
        pl.Series(
            "BinSymbolAbbreviated",
            [
                (s[:25] + "...") if len(s) > 25 else s
                for s in pm_plot_binning_table["BinSymbol"].to_list()
            ],
        )
    )

    fig = px.bar(
        data_frame=pm_plot_binning_table.to_pandas(use_pyarrow_extension_array=True),
        x="Lift",
        y="BinSymbolAbbreviated",
        color="Direction",
        color_discrete_map={
            "neg": "#A01503",
            "pos": "#5F9F37",
            "neg_shaded": "#DAA9AB",
            "pos_shaded": "#C5D9B7",
        },
        orientation="h",
        template="pega",
        custom_data=custom_data,
        facet_col=col_facet,
        facet_row=row_facet,
        facet_col_wrap=3,  # will be ignored when there is a row facet
    )
    fig.update_traces(
        hovertemplate="<br>".join(
            ["<b>%{customdata[0]}</b>", "%{customdata[1]}", "<b>Lift: %{x:.2%}</b>"]
        )
    )
    fig.add_vline(x=0, line_color="black")

    fig.update_layout(
        showlegend=False,
        title="Propensity Lift",
        hovermode="y",
    )
    fig.update_xaxes(title="", tickformat=",.2%")
    fig.update_yaxes(
        type="category",
        categoryorder="array",
        # abbreviate possibly lengthy symbol labels
        categoryarray=pm_plot_binning_table["BinSymbolAbbreviated"],
        automargin=True,
        autorange="reversed",
        title="",
        dtick=1,  # show all bins
        matches=None,  # allow independent y-labels if there are row facets
    )
    fig.for_each_annotation(
        lambda a: a.update(text=a.text.split("=")[-1])
    )  # split plotly facet label, show only right side

    if return_df:
        return pm_plot_binning_table
    else:
        return fig

```

```{python}
# | output: asis


def show_single_predictor(pred):
    quarto_print(f"## {pred}")

    predictor_binning_data = (
        datamart.last("predictorData", strategy="lazy")
        .filter(pl.col("PredictorName") == pred)
        .sort("BinIndex")
    )

    predictor_properties = predictors_summary_info.filter(pl.col("PredictorName") == pred)

    base_propensity = (
        predictor_properties.select(pl.col("Positives") / pl.col("Responses"))
        .collect()
        .item()
    )

    # Predictor summary

    display(
        GT(predictor_properties.collect())
        .tab_options(table_font_size=8)
        .fmt_number(
            decimals=2,
            scale_by=100.0,
            columns=["Univariate Performance"],
        )
        .fmt_number(
            decimals=2,
            columns=["Missing %", "Residual %"],
        )
        .fmt_number(
            decimals=0,
            columns=["Positives", "Responses"],
        )
        .cols_hide(["PredictorName", "isActive", "GroupIndex", "AnyActiveInGroup", "Indentation", "Binning", "PredictorLink"])
        .cols_label(EntryType="Status")
    )

    # Predictor binning

    fig = datamart.plotPredictorBinning(modelids=[model_id], predictors=[pred])

    # Customize some of the default styling of the plot

    fig.update_layout(title="Predictor Binning", xaxis_title="")
    # fig.layout.yaxis2.tickformat = ",.3%"
    fig.data[0].opacity = 0.5
    fig.data[1].line.color = "#EF8B08"
    fig.data[1].line.width = 3
    fig.data[1].marker.color = "black"

    # Add line for base propensity, TODO consider putting back in the library
    fig.add_hline(y=base_propensity, line_dash="dash", line_color="grey", yref="y2")
    # fig.update_xaxes(type='category') # prevent plotly from trying to guess

    fig.update_layout(width=700, height=250)
    fig.show()

    # Alternative view in the binning Lift plot

    quarto_print("   ")
    quarto_print("___")  # renders as horizontal line

    fig = plotBinningLift(predictor_binning_data)
    fig.update_layout(width=700, height=250)
    fig.show()

    # Table with binning details

    human_friendly_binning_table = predictor_binning_data.select(
        pl.col("BinIndex").alias("Index"),
        pl.col("BinSymbol").alias("Bin"),
        pl.col("BinResponseCount").alias("Responses"),
        pl.col("BinPositives").alias("Positives"),
        zRatio(pl.col("BinPositives"), pl.col("BinNegatives"))
        .round(3)
        .alias("Z Ratio"),
        ((lift(pl.col("BinPositives"), pl.col("BinNegatives")) - 1.0) * 100)
        .round(2)
        .alias("Lift (%)"),
        (pl.col("BinPropensity") * 100).round(3).alias("Propensity (%)"),
    ).collect()

    display(
        GT(human_friendly_binning_table)
        .tab_options(table_font_size=8)
        .fmt_nanoplot(columns="Z Ratio", plot_type="bar", autoscale=False)
    )
    
    quarto_print("   ")
    quarto_print("___")  # renders as horizontal line


for pred in (
    predictors_summary_info.filter(status_filter)
    .select("PredictorName")
    .collect()
    .to_series(0)
):
    show_single_predictor(pred)
```

# Credits

```{python}
# | echo: false

# unfortunately no way to get the quarto source file name, so that is hardcoded
quarto_source = "pega-datascientist-tools/python/pdstools/reports/ModelReport.qmd"


def get_cmd_output(args):
    result = (
        subprocess.run(args, stdout=subprocess.PIPE).stdout.decode("utf-8").split("\n")
    )
    return result


def get_version_only(versionstr):
    return re.sub("[^.0-9]", "", versionstr)

quarto_version = get_version_only(get_cmd_output(["quarto", "--version"])[0])
pandoc_version = get_version_only(get_cmd_output(["pandoc", "--version"])[0])
timestamp_str = datetime.datetime.now().strftime("%d %b %Y %H:%M:%S")

quarto_print(
    f"""

| Tool | Version |
|-----|------|
| Notebook | {quarto_source} |
| Quarto | {quarto_version} |
| Pandoc | {pandoc_version} |
| Created at | {timestamp_str} |

"""
)

```

Detailed version info for **pdstools**:

```{python}
# | echo: false

from pdstools import show_versions

show_versions()
```

For more information please see the [Pega Data Scientist Tools](https://github.com/pegasystems/pega-datascientist-tools).
