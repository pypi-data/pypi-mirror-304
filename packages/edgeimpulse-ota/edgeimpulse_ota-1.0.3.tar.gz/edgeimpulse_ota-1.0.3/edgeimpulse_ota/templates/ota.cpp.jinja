#include <Arduino.h>

{{ contents }}


/******************************************************************************
 ***************************** Start of OTA patch ****************************
 *****************************************************************************/

/**
 * Interpret bytes as different types
 */
union {
    uint8_t bytes[4];
    float f;
    int8_t i8;
    int32_t i32;
    uint16_t u16;
    uint32_t u32;
} __attribute__((packed)) buf;

/**
 * Await for stream to have enough bytes available.
 * If Stream is an HTTP request, it may take a while.
 */
bool isAvailable(Stream& stream, size_t n) {
  size_t timeout = millis() + 5000;

  while (millis() < timeout)
    if (stream.available() >= n)
      return true;

  return false;
}

/**
 * Read n bytes from Stream in a consistent way.
 */
bool readBytes(Stream& stream, uint8_t* dest, uint8_t n) {
    memset(dest, 0, n);

    while (isAvailable(stream, 1) && n > 0) {
        dest[--n] = stream.read();
    }

    return n == 0;
}

/**
 * Simulate an in-memory Stream (inspired from Python's BytesIO)
 */
class BytesIO : public Stream {
  public:
    BytesIO(const uint8_t *contents_, size_t len_) :
        i(0), len(len_), contents(contents_) {}

    inline int available() {
      return len - i;
    }

    inline int read() {
      return contents[i++];
    }

    inline void seek(size_t index) {
        i = index;
    }

    // noop
    size_t readBytes(uint8_t *buf, size_t n) {
      return 0;
    }

    // noop
    inline size_t write(uint8_t x) {
      return 0;
    }

    // noop
    inline int peek() {
      return 0;
    }

    // noop
    inline void flush() {
    }

  protected:
    size_t i;
    size_t len;
    const uint8_t *contents;
};

/**
 * Patch quantization values from Stream
 */
String patchQuantizationFromStream(Stream& stream, uint8_t expectedLayerNumber, uint16_t expectedSize) {
    String error("");
    uint8_t layerNumber;
    uint16_t size;

    // try to correct simple corruptions
    while (isAvailable(stream, 1)) {
      layerNumber = stream.read();

      if (layerNumber == expectedLayerNumber)
        break;
    }

    if (layerNumber != expectedLayerNumber) {
        error = "Quantization index mismatch: expected ";
        error += expectedLayerNumber;
        error += ", found ";
        error += layerNumber;
        return error;
    }

    while (isAvailable(stream, 2)) {
        readBytes(stream, buf.bytes, 2);
        size = buf.u16;

        if (size == expectedSize)
            break;
    }

    if (size != expectedSize) {
        error = "Size mismatch at layer ";
        error += layerNumber;
        error += "'s quantization: expected ";
        error += expectedSize;
        error += ", found ";
        error += size;
        return error;
    }

    TensorInfo_t *info = &(tensorData[layerNumber]);
    TfLiteQuantization *quant = &(info->quantization);
    TfLiteAffineQuantization *params = (TfLiteAffineQuantization*) quant->params;

    for (size_t i = 0; i < size; i++) {
        if (!isAvailable(stream, 8)) {
            error = "Not enough data for layer ";
            error += layerNumber;
            error += "'s quantization data";
            return error;
        }

        readBytes(stream, buf.bytes, 4);
        params->scale->data[i] = buf.f;

        readBytes(stream, buf.bytes, 4);
        params->zero_point->data[i] = buf.i32;
    }

    return "";
}

/**
 * Patch layer's data from Stream
 */
 template<typename DType>
 String patchTensorDataFromStream(Stream& stream, uint8_t expectedLayerNumber, uint8_t expectedBitDepth, size_t expectedSize) {
    String error("");
    uint8_t layerNumber;
    uint8_t bitDepth;
    uint16_t size;

    // try to correct simple corruptions
    while (isAvailable(stream, 1)) {
      layerNumber = stream.read();

      if (layerNumber == expectedLayerNumber)
        break;
    }

    if (layerNumber != expectedLayerNumber) {
        error = "Data index mismatch: expected ";
        error += expectedLayerNumber;
        error += ", found ";
        error += layerNumber;
        return error;
    }

    while (isAvailable(stream, 1)) {
      bitDepth = stream.read();

      if (bitDepth == expectedBitDepth)
        break;
    }

    if (bitDepth != expectedBitDepth) {
        error = "BitDepth mismatch at layer ";
        error += layerNumber;
        error += "'s data: expected ";
        error += expectedBitDepth;
        error += ", found ";
        error += bitDepth;
        return error;
    }

    while (isAvailable(stream, 2)) {
        readBytes(stream, buf.bytes, 2);
        size = buf.u16;

        if (size == expectedSize)
            break;
    }

    if (size != expectedSize) {
        error = "Size mismatch at layer ";
        error += layerNumber;
        error += "'s data: expected ";
        error += expectedSize;
        error += ", found ";
        error += size;
        return error;
    }

    DType *data = (DType*)(tensorData[layerNumber].data);

    // int32
    if (sizeof(DType) == 4) {
        for (size_t i = 0; i < size; i++) {
            if (!isAvailable(stream, 4)) {
                error = "Not enough data for layer ";
                error += layerNumber;
                error += "'s data";
                return error;
            }

            readBytes(stream, buf.bytes, 4);
            data[i] = buf.i32;
        }
    }
    else if (sizeof(DType) == 1) {
        // int8
        for (size_t i = 0; i < size; i++) {
            if (!isAvailable(stream, 1)) {
                error = "Not enough data for layer ";
                error += layerNumber;
                error += "'s data";
                return error;
            }

            readBytes(stream, buf.bytes, 1);
            data[i] = buf.i8;
        }
    }
    else {
        error = "Unexpected dtype at layer ";
        error += layerNumber;
        return error;
    }

    return "";
}

/**
 * Update model weights from Stream
 */
String ei_update_weights(Stream& stream) {
    String error("");

    if (!isAvailable(stream, 4)) {
        error = "No data available for update";
        return error;
    }

    readBytes(stream, buf.bytes, 4);
    uint32_t patchSize = buf.u32;

    if (patchSize != {{ patch_size }}) {
        error = "Size mismatch: expected ";
        error += {{ patch_size }};
        error += ", found ";
        error += patchSize;
        return error;
    }

    {% for t in tensor_data.iterator %}
    if ((error = patchTensorDataFromStream<int{{ t.bits }}_t>(stream, {{ t.index }}, {{ t.bits }}, {{ t.size }})) != "") return error;{% endfor %}

    {% for q in quantization.iterator %}
    if ((error = patchQuantizationFromStream(stream, {{ q.index }}, {{ q.size }})) != "") return error;{% endfor %}

    return "";
}

/**
 * Restore original weights
 */
String ei_restore_weights() {
    // simulate a Stream to re-use existing code
    static const uint8_t originalWeights[{{ original_weights_size }}] = { {{ as_array(original_weights) }} };
    static BytesIO originalWeightsStream(originalWeights, sizeof(originalWeights));

    originalWeightsStream.seek(0);
    return ei_update_weights(originalWeightsStream);
}
