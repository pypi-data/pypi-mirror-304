__author__ = "Dmitry Korotin"
__author_email__ = "dmitry@korotin.name"

import numpy as np
from scipy.special import sph_harm, genlaguerre, factorial

p_orbitals = ["p_z", "p_x", "p_y"]
d_orbitals = ["d_{3z^2-r^2}", "d_{xz}", "d_{yz}", "d_{xy}", "d_{x^2-y^2}"]
f_orbitals = [
    "f_{z^3}",
    "f_{xz^2}",
    "f_{yz^2}",
    "f_{xyz}",
    "f_{z(x^2-y^2)}",
    "f_{x(x^2-3y^2)}",
    "f_{y(3x^2-y^2)}"
]

supported_orbitals = ["s"] + p_orbitals + d_orbitals + f_orbitals

def get_atomic_number(element_name):
    """
    Returns the atomic number of the given element.

    This function takes the symbol of a chemical element and returns its
    corresponding atomic number from the periodic table. If the element is
    not found, the function returns None.

    Parameters:
    ----------
    element_name : str
        The symbol of the chemical element (e.g., 'H' for hydrogen, 'O' for oxygen).

    Returns:
    -------
    int or None
        The atomic number of the element if it is found, otherwise None.
    """
    # fmt: off
    periodic_table = {
        'H': 1, 'He': 2, 'Li': 3, 'Be': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'Ne': 10,
        'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P': 15, 'S': 16, 'Cl': 17, 'Ar': 18,
        'K': 19, 'Ca': 20, 'Sc': 21, 'Ti': 22, 'V': 23, 'Cr': 24, 'Mn': 25, 'Fe': 26,
        'Co': 27, 'Ni': 28, 'Cu': 29, 'Zn': 30, 'Ga': 31, 'Ge': 32, 'As': 33, 'Se': 34,
        'Br': 35, 'Kr': 36, 'Rb': 37, 'Sr': 38, 'Y': 39, 'Zr': 40, 'Nb': 41, 'Mo': 42,
        'Tc': 43, 'Ru': 44, 'Rh': 45, 'Pd': 46, 'Ag': 47, 'Cd': 48, 'In': 49, 'Sn': 50,
        'Sb': 51, 'Te': 52, 'I': 53, 'Xe': 54, 'Cs': 55, 'Ba': 56, 'La': 57, 'Ce': 58,
        'Pr': 59, 'Nd': 60, 'Pm': 61, 'Sm': 62, 'Eu': 63, 'Gd': 64, 'Tb': 65, 'Dy': 66,
        'Ho': 67, 'Er': 68, 'Tm': 69, 'Yb': 70, 'Lu': 71, 'Hf': 72, 'Ta': 73, 'W': 74,
        'Re': 75, 'Os': 76, 'Ir': 77, 'Pt': 78, 'Au': 79, 'Hg': 80, 'Tl': 81, 'Pb': 82,
        'Bi': 83, 'Th': 90, 'Pa': 91, 'U': 92, 'Np': 93, 'Pu': 94, 'Am': 95, 'Cm': 96,
        'Bk': 97, 'Cf': 98, 'Es': 99, 'Fm': 100, 'Md': 101, 'No': 102, 'Lr': 103,
        'Rf': 104, 'Db': 105, 'Sg': 106, 'Bh': 107, 'Hs': 108, 'Mt': 109, 'Ds': 110,
        'Rg': 111, 'Cn': 112, 'Nh': 113, 'Fl': 114, 'Mc': 115, 'Lv': 116, 'Ts': 117,
        'Og': 118
    }
    # fmt: on
    return periodic_table.get(element_name)


def cart2sph(x, y, z):
    """
    Convert Cartesian coordinates to spherical coordinates.

    This function converts Cartesian coordinates (x, y, z) into spherical
    coordinates (r, theta, phi). The spherical coordinates are defined as follows:
    - r: the radial distance from the origin,
    - theta: the polar angle (angle from the z-axis),
    - phi: the azimuthal angle (angle from the x-axis in the xy-plane).

    Parameters:
    ----------
    x : float
        The x-coordinate in Cartesian coordinates.
    y : float
        The y-coordinate in Cartesian coordinates.
    z : float
        The z-coordinate in Cartesian coordinates.

    Returns:
    -------
    np.ndarray
        A numpy array containing the spherical coordinates [r, theta, phi].
    """
    xy_sq = x**2 + y**2
    r = np.sqrt(xy_sq + z**2)
    theta = np.arctan2(np.sqrt(xy_sq), z)
    phi = np.arctan2(y, x)

    return np.array([r, theta, phi])

def radial_part(r, l, z):
    """
    Compute the radial part of the hydrogen-like atomic wavefunction.

    Parameters:
    r (float or ndarray): Radial distance from the nucleus in Bohr radii
    l (int): Orbital angular momentum quantum number (0 <= l < n)
    z (int): Atomic number (for hydrogen, Z=1)
    
    Returns:
    R_nl (float or ndarray): Radial wavefunction value(s) at r
    """
    # Bohr radius 
    a_0 = 0.52917720859

    # define principal quantum number from z
    if z < 3:
        n = 1
    elif z < 11:
        n = 2
    elif z < 19 or z in range(21, 31):
        n = 3
    elif z < 37 or z in range(39, 49) or z in range(57, 72):
        n = 4
    elif z < 55 or z in range(72, 81) or z in range(89, 104):
        n = 5
    
    # Use tabulated screened nuclear charge (Clementi's by default and Slater's if not available)
    zeff = Z_EFF[z][l]

    # Prefactor
    rho = 2 * zeff * r / (n * a_0)
    norm_factor = np.sqrt((2 * zeff / (n * a_0))**3 * factorial(n - l - 1) / (2 * n * factorial(n + l)))
    
    # Laguerre polynomial
    L = genlaguerre(n - l - 1, 2 * l + 1)
    
    # Radial wavefunction
    R_nl = norm_factor * np.exp(-rho/2.0) * rho**l * L(rho)
    
    return R_nl


def get_orbital(orb, sph_coords, z):
    """
    Calculate the value of a specific atomic orbital at given spherical coordinates.

    This function computes the value of a specified atomic orbital at given
    spherical coordinates for an atom with the given atomic number.

    Parameters:
    ----------
    orb : str
        The type of orbital (e.g., "s", "p_x", "d_{xy}", etc.).
    sph_coords : numpy.ndarray
        An array of spherical coordinates [r, theta, phi].
    z : int
        The atomic number of the element.

    Returns:
    -------
    float
        The value of the atomic orbital at the given coordinates.
    """

    r = sph_coords[0]
    theta = sph_coords[1]
    phi = sph_coords[2]
    # fmt: off
    if orb == "s":
        orbital = np.real( radial_part(r,0,z)*sph_harm(0, 0, phi,theta) )
    elif orb == "p_z":
        orbital = np.real( radial_part(r,1,z)*(sph_harm(0, 1, phi,theta)) )
    elif orb == "p_x":
        orbital = np.real( radial_part(r,1,z)*(1/np.sqrt(2.0))*(sph_harm(-1, 1, phi,theta)-sph_harm(1, 1, phi,theta)) )
    elif orb == "p_y":
        orbital = np.real( radial_part(r,1,z)*(1j/np.sqrt(2.0))*(sph_harm(-1, 1, phi,theta)+sph_harm(1, 1, phi,theta)) )
    elif orb == "d_{3z^2-r^2}":
        orbital = np.real( radial_part(r,2,z)*sph_harm(0, 2, phi,theta) )
    elif orb == "d_{xz}":
        orbital = np.real( radial_part(r,2,z)*(1/np.sqrt(2.0))*(sph_harm(-1, 2, phi,theta) - sph_harm(1, 2, phi,theta)) )
    elif orb == "d_{yz}":
        orbital = np.real( radial_part(r,2,z)*(1j/np.sqrt(2.0))*(sph_harm(-1, 2, phi,theta) + sph_harm(1, 2, phi,theta)) )
    elif orb == "d_{xy}":
        orbital = np.real( radial_part(r,2,z)*(1j/np.sqrt(2.0))*(sph_harm(-2, 2, phi,theta) - sph_harm(2, 2, phi,theta)) )
    elif orb == "d_{x^2-y^2}":
        orbital = np.real( radial_part(r,2,z)*(1/np.sqrt(2.0))*(sph_harm(-2, 2, phi,theta) + sph_harm(2, 2, phi,theta)))
    elif orb == "f_{z^3}":
        orbital = np.real( radial_part(r,3,z)*sph_harm(0, 3, phi,theta) )
    elif orb == "f_{xz^2}":
        orbital = np.real( radial_part(r,3,z)*(1/np.sqrt(2.0))*(sph_harm(-1, 3, phi,theta) - sph_harm(1, 3, phi,theta)) )
    elif orb == "f_{yz^2}":
        orbital = np.real( radial_part(r,3,z)*(1j/np.sqrt(2.0))*(sph_harm(-1, 3, phi,theta) + sph_harm(1, 3, phi,theta)) )
    elif orb == "f_{xyz}":
        orbital = np.real( radial_part(r,3,z)*(1j/np.sqrt(2.0))*(sph_harm(-2, 3, phi,theta) - sph_harm(2, 3, phi,theta)) )
    elif orb == "f_{z(x^2-y^2)}":
        orbital = np.real( radial_part(r,3,z)*(1/np.sqrt(2.0))*(sph_harm(-2, 3, phi,theta) + sph_harm(2, 3, phi,theta)) )
    elif orb == "f_{x(x^2-3y^2)}":
        orbital = np.real( radial_part(r,3,z)*(1/np.sqrt(2.0))*(sph_harm(-3, 3, phi,theta) - sph_harm(3, 3, phi,theta)) )
    elif orb == "f_{y(3x^2-y^2)}":
        orbital = np.real( radial_part(r,3,z)*(1j/np.sqrt(2.0))*(sph_harm(-3, 3, phi,theta) + sph_harm(3, 3, phi,theta)) )
    else:
        raise ValueError(f"Unknown orbital: {orb}")
    # fmt: on

    return orbital

# Effective nuclear charge using Clementi or Slater method (when Clementi is not available).
Z_EFF = {
    1: {0: 1.0, 1: 1.0, 2: 0.30000000000000004, 3: 0.30000000000000004},
    2: {0: 1.6875, 1: 1.7, 2: 0.30000000000000004, 3: 0.30000000000000004},
    3: {0: 1.2792, 1: 1.3, 2: 0.3500000000000001, 3: 0.3500000000000001},
    4: {
        0: 1.912,
        1: 1.9500000000000002,
        2: 0.3500000000000001,
        3: 0.3500000000000001,
    },
    5: {0: 2.5762, 1: 2.4214, 2: 0.34999999999999964, 3: 0.34999999999999964},
    6: {0: 3.2166, 1: 3.1358, 2: 0.34999999999999964, 3: 0.34999999999999964},
    7: {0: 3.8474, 1: 3.834, 2: 0.34999999999999964, 3: 0.34999999999999964},
    8: {0: 4.4916, 1: 4.4532, 2: 0.34999999999999964, 3: 0.34999999999999964},
    9: {0: 5.1276, 1: 5.1, 2: 0.34999999999999964, 3: 0.34999999999999964},
    10: {0: 5.7584, 1: 5.7584, 2: 0.34999999999999964, 3: 0.34999999999999964},
    11: {
        0: 2.5074000000000005,
        1: 2.1999999999999993,
        2: 0.34999999999999964,
        3: 0.34999999999999964,
    },
    12: {
        0: 3.307500000000001,
        1: 2.8499999999999996,
        2: 0.34999999999999964,
        3: 0.34999999999999964,
    },
    13: {0: 4.1172, 1: 4.0656, 2: 0.34999999999999964, 3: 0.34999999999999964},
    14: {0: 4.9032, 1: 4.2852, 2: 0.34999999999999964, 3: 0.34999999999999964},
    15: {0: 5.6418, 1: 4.8864, 2: 0.34999999999999964, 3: 0.34999999999999964},
    16: {
        0: 6.366900000000001,
        1: 5.4818999999999996,
        2: 0.34999999999999964,
        3: 0.34999999999999964,
    },
    17: {
        0: 7.068300000000001,
        1: 6.116099999999999,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    18: {
        0: 7.7568,
        1: 6.764100000000001,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    19: {
        0: 3.4952000000000005,
        1: 2.1999999999999993,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    20: {
        0: 4.398,
        1: 2.849999999999998,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    21: {0: 10.3398, 1: 9.4062, 2: 7.1198999999999995, 3: 2.3500000000000014},
    22: {0: 11.033100000000001, 1: 10.1037, 2: 8.1414, 3: 2.3500000000000014},
    23: {0: 11.709299999999999, 1: 10.785, 2: 8.9829, 3: 2.3500000000000014},
    24: {0: 12.3678, 1: 11.466000000000001, 2: 9.7566, 3: 1.3500000000000014},
    25: {0: 13.0179, 1: 12.109200000000001, 2: 10.5282, 3: 2.3500000000000014},
    26: {0: 13.6761, 1: 12.777899999999999, 2: 11.1798, 3: 2.3500000000000014},
    27: {0: 14.322299999999998, 1: 13.4346, 2: 11.8554, 3: 2.3500000000000014},
    28: {0: 14.961, 1: 14.085, 2: 12.529499999999999, 3: 2.3500000000000014},
    29: {0: 15.5943, 1: 14.730599999999999, 2: 13.2006, 3: 1.3500000000000014},
    30: {0: 16.2192, 1: 15.369299999999999, 2: 13.8783, 3: 2.3500000000000014},
    31: {
        0: 7.066800000000001,
        1: 6.221599999999999,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    32: {
        0: 8.043599999999998,
        1: 6.7804,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    33: {
        0: 8.944000000000003,
        1: 7.449200000000001,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    34: {
        0: 9.7576,
        1: 8.287199999999999,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    35: {
        0: 10.552799999999998,
        1: 9.027999999999999,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    36: {
        0: 11.3156,
        1: 9.769199999999998,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    37: {
        0: 4.984499999999997,
        1: 2.200000000000003,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    38: {
        0: 6.070499999999999,
        1: 2.8500000000000014,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    39: {0: 14.2636, 1: 12.7456, 2: 15.958399999999997, 3: 2.3500000000000014},
    40: {0: 14.901600000000002, 1: 13.46, 2: 13.0716, 3: 2.3500000000000014},
    41: {
        0: 15.282800000000002,
        1: 14.084400000000002,
        2: 11.2376,
        3: 1.3500000000000014,
    },
    42: {0: 16.0964, 1: 14.9768, 2: 11.392400000000002, 3: 1.3500000000000014},
    43: {0: 17.1984, 1: 15.8112, 2: 12.881999999999998, 3: 2.3500000000000014},
    44: {0: 17.656, 1: 16.4348, 2: 12.8128, 3: 1.3500000000000014},
    45: {0: 18.5816, 1: 17.1396, 2: 13.4424, 3: 1.3500000000000014},
    46: {0: 18.986, 1: 17.7232, 2: 13.617599999999996, 3: 0.3500000000000014},
    47: {0: 19.8648, 1: 18.5624, 2: 14.762799999999999, 3: 1.3500000000000014},
    48: {0: 20.8692, 1: 19.4112, 2: 15.876800000000003, 3: 2.3500000000000014},
    49: {
        0: 9.511499999999998,
        1: 8.469999999999999,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    50: {
        0: 10.628500000000003,
        1: 9.102000000000004,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    51: {
        0: 11.611000000000004,
        1: 9.994500000000002,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    52: {
        0: 12.537999999999997,
        1: 10.808500000000002,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    53: {
        0: 13.403500000000001,
        1: 11.6115,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    54: {
        0: 14.218000000000004,
        1: 12.424500000000002,
        2: 0.3500000000000014,
        3: 0.3500000000000014,
    },
    55: {
        0: 15.444500000000005,
        1: 13.650999999999996,
        2: 1.3500000000000014,
        3: 1.3500000000000014,
    },
    56: {
        0: 16.619500000000002,
        1: 14.8005,
        2: 2.3500000000000014,
        3: 2.3500000000000014,
    },
    57: {0: 28.7964, 1: 27.7064, 2: 24.7252, 3: 1.3599999999999994},
    58: {0: 29.68, 1: 28.6064, 2: 25.660799999999995, 3: 1.676000000000002},
    59: {0: 30.3332, 1: 29.0568, 2: 26.297200000000004, 3: 21.1008},
    60: {0: 30.9864, 1: 30.014, 2: 26.809200000000004, 3: 22.266},
    61: {0: 31.6396, 1: 30.6232, 2: 27.739999999999995, 3: 23.134},
    62: {0: 32.2924, 1: 31.088, 2: 28.239599999999996, 3: 23.531599999999997},
    63: {0: 32.868, 1: 31.8748, 2: 28.940799999999996, 3: 24.32},
    64: {0: 33.444, 1: 32.6468, 2: 29.6336, 3: 25.013599999999997},
    65: {0: 34.02, 1: 33.3988, 2: 30.310000000000002, 3: 25.864800000000002},
    66: {0: 34.592, 1: 33.826, 2: 31.018, 3: 26.536},
    67: {0: 35.312, 1: 34.5628, 2: 31.671599999999998, 3: 27.4696},
    68: {0: 36.232, 1: 35.1092, 2: 32.2712, 3: 27.9784},
    69: {0: 37.1376, 1: 35.988, 2: 32.944, 3: 28.634},
    70: {0: 37.5176, 1: 36.402, 2: 33.5896, 3: 29.432000000000002},
    71: {0: 38.2692, 1: 37.1904, 2: 35.2892, 3: 30.931200000000004},
    72: {0: 21.833, 1: 19.585, 2: 16.619500000000002, 3: 2.3499999999999943},
    73: {0: 22.6935, 1: 20.4735, 2: 16.368000000000002, 3: 2.3499999999999943},
    74: {
        0: 23.5415,
        1: 21.325500000000005,
        2: 16.741999999999997,
        3: 2.3499999999999943,
    },
    75: {0: 24.357, 1: 22.144, 2: 17.382999999999996, 3: 2.3499999999999943},
    76: {0: 25.095, 1: 22.909999999999997, 2: 17.997, 3: 2.3499999999999943},
    77: {0: 25.8455, 1: 23.661, 2: 18.695999999999998, 3: 2.3499999999999943},
    78: {0: 26.587999999999994, 1: 24.4195, 2: 19.4075, 3: 1.3499999999999943},
    79: {0: 27.3275, 1: 25.17, 2: 20.1265, 3: 1.3499999999999943},
    80: {
        0: 28.111000000000004,
        1: 25.967,
        2: 20.855999999999995,
        3: 2.3499999999999943,
    },
    81: {
        0: 29.122,
        1: 27.088499999999996,
        2: 22.025000000000006,
        3: 3.3499999999999943,
    },
    82: {0: 30.131500000000003, 1: 28.03, 2: 23.152, 3: 4.349999999999994},
    83: {0: 31.028999999999996, 1: 29.021, 2: 24.244, 3: 5.349999999999994},
    84: {
        0: 32.023,
        1: 30.024500000000003,
        2: 25.304000000000002,
        3: 6.349999999999994,
    },
    85: {0: 32.9335, 1: 31.04, 2: 26.339, 3: 7.349999999999994},
    86: {0: 33.893, 1: 31.970999999999997, 2: 27.353, 3: 8.349999999999994},
    87: {
        0: 29.349999999999994,
        1: 29.349999999999994,
        2: 15.849999999999994,
        3: 9.349999999999994,
    },
    88: {
        0: 30.349999999999994,
        1: 30.349999999999994,
        2: 16.849999999999994,
        3: 10.349999999999994,
    },
    89: {
        0: 31.349999999999994,
        1: 31.349999999999994,
        2: 17.849999999999994,
        3: 11.349999999999994,
    },
    90: {
        0: 32.349999999999994,
        1: 32.349999999999994,
        2: 18.849999999999994,
        3: 12.349999999999994,
    },
    91: {
        0: 33.349999999999994,
        1: 33.349999999999994,
        2: 17.849999999999994,
        3: 12.650000000000006,
    },
    92: {
        0: 34.349999999999994,
        1: 34.349999999999994,
        2: 17.849999999999994,
        3: 13.299999999999997,
    },
    93: {
        0: 35.349999999999994,
        1: 35.349999999999994,
        2: 17.849999999999994,
        3: 13.950000000000003,
    },
    94: {
        0: 36.349999999999994,
        1: 36.349999999999994,
        2: 16.849999999999994,
        3: 14.25,
    },
    95: {
        0: 37.349999999999994,
        1: 37.349999999999994,
        2: 16.849999999999994,
        3: 14.900000000000006,
    },
    96: {
        0: 38.349999999999994,
        1: 38.349999999999994,
        2: 17.849999999999994,
        3: 15.900000000000006,
    },
    97: {
        0: 39.349999999999994,
        1: 39.349999999999994,
        2: 16.849999999999994,
        3: 16.200000000000003,
    },
    98: {
        0: 40.349999999999994,
        1: 40.349999999999994,
        2: 16.849999999999994,
        3: 16.849999999999994,
    },
    99: {
        0: 41.349999999999994,
        1: 41.349999999999994,
        2: 16.849999999999994,
        3: 17.5,
    },
    100: {
        0: 42.349999999999994,
        1: 42.349999999999994,
        2: 16.849999999999994,
        3: 18.150000000000006,
    },
    101: {
        0: 43.349999999999994,
        1: 43.349999999999994,
        2: 16.849999999999994,
        3: 18.799999999999997,
    },
    102: {
        0: 44.349999999999994,
        1: 44.349999999999994,
        2: 16.849999999999994,
        3: 19.450000000000003,
    },
    103: {
        0: 45.349999999999994,
        1: 45.349999999999994,
        2: 17.849999999999994,
        3: 20.450000000000003,
    },
    104: {
        0: 46.349999999999994,
        1: 46.349999999999994,
        2: 18.849999999999994,
        3: 21.450000000000003,
    },
    105: {
        0: 47.349999999999994,
        1: 47.349999999999994,
        2: 19.849999999999994,
        3: 22.450000000000003,
    },
    106: {
        0: 48.349999999999994,
        1: 48.349999999999994,
        2: 20.849999999999994,
        3: 23.450000000000003,
    },
    107: {
        0: 49.349999999999994,
        1: 49.349999999999994,
        2: 21.849999999999994,
        3: 24.450000000000003,
    },
    108: {
        0: 50.349999999999994,
        1: 50.349999999999994,
        2: 22.849999999999994,
        3: 25.450000000000003,
    },
    109: {
        0: 51.349999999999994,
        1: 51.349999999999994,
        2: 23.849999999999994,
        3: 26.450000000000003,
    },
    110: {
        0: 52.349999999999994,
        1: 52.349999999999994,
        2: 24.849999999999994,
        3: 27.450000000000003,
    },
    111: {
        0: 53.349999999999994,
        1: 53.349999999999994,
        2: 25.849999999999994,
        3: 28.450000000000003,
    },
    112: {
        0: 54.349999999999994,
        1: 54.349999999999994,
        2: 26.849999999999994,
        3: 29.450000000000003,
    },
    113: {
        0: 55.349999999999994,
        1: 55.349999999999994,
        2: 27.849999999999994,
        3: 30.450000000000003,
    },
    114: {
        0: 56.349999999999994,
        1: 56.349999999999994,
        2: 28.849999999999994,
        3: 31.450000000000003,
    },
    115: {
        0: 57.349999999999994,
        1: 57.349999999999994,
        2: 29.849999999999994,
        3: 32.45,
    },
    116: {
        0: 58.349999999999994,
        1: 58.349999999999994,
        2: 30.849999999999994,
        3: 33.45,
    },
    117: {
        0: 59.349999999999994,
        1: 59.349999999999994,
        2: 31.849999999999994,
        3: 34.45,
    },
    118: {
        0: 60.349999999999994,
        1: 60.349999999999994,
        2: 32.849999999999994,
        3: 35.45,
    },
}
