name: release

on:
  workflow_dispatch:
  push:
    paths:
      - 'turbopipe/version.py'

jobs:
  sdist:
    name: Package source
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: deps
        run: python -m pip install -U pip wheel build

      - name: sdist
        run: python -m build --sdist -o package

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: package-sdist
          path: package/*.tar.gz

  wheels:
    name: Build Python wheels on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]

    env:
      CIBW_BUILD: cp37-* cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
      CIBW_ARCHS_LINUX: auto
      CIBW_ARCHS_MACOS: arm64 x86_64
      CIBW_ARCHS_WINDOWS: auto
      CIBW_SKIP: '*musllinux* *i686* *-win32'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Install MSVC
        if: matrix.os == 'windows-latest'
        uses: bus1/cabuild/action/msdevshell@v1

      - name: deps
        run: python -m pip install cibuildwheel==2.21.3

      - name: wheels
        run: python -m cibuildwheel --output-dir package

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: package-wheels-${{ matrix.os }}
          path: package/*.whl

  publish:
    needs: [sdist, wheels]
    name: Publish to PyPI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'package-*'
          merge-multiple: true
          path: package

      - name: deps
        run: python -m pip install -U twine

      - name: publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
        run: twine upload package/*

  tag:
    needs: publish
    name: Create Release Tag
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Get version
        run: echo VERSION=$(python turbopipe/version.py) >> $GITHUB_ENV
        shell: bash

      - name: Create Release Tag
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION
