Metadata-Version: 2.1
Name: detail
Version: 0.3.0
Summary: Build automations off of structured notes in your project
Home-page: https://github.com/Opus10/detail
License: BSD-3-Clause
Author: Wes Kendall
Requires-Python: >=3.9.0,<4
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Dist: click (>=7.0)
Requires-Dist: click-default-group (>=1.2.2)
Requires-Dist: formaldict (>=0.2.0)
Requires-Dist: jinja2 (>=2.10.3)
Requires-Dist: python-dateutil (>=2.8.1)
Requires-Dist: pyyaml (>=5.1.2,<=5.3.1)
Requires-Dist: requests (>=2.22.0)
Project-URL: Documentation, https://detail.readthedocs.io
Project-URL: Repository, https://github.com/Opus10/detail
Description-Content-Type: text/markdown

# detail

`detail` allows contributors to create structured and configurable notes in a project, providing the ability to do automations such as:

1. Ensuring that contributors add information to pull requests that provide QA instructions, release notes, and associated tickets. The `detail lint` command ensures that notes are present in a pull request and adhere to the schema.

2. Rendering dynamic logs from the notes. `detail log` provides the ability to slice and dice the commit log however you need, pulling in a `notes` variable in a Jinja template with all notes that can be grouped and filtered.

3. Other automations, such as version bumping, Slack posting, ticket comments, etc can be instrumented in continuous integration from the structured notes.

When contributing a change, call `detail` to be prompted for all information defined in the project's detail schema. Information can be collected conditionally based on previous steps all thanks to the [formaldict](https://github.com/Opus10/formaldict) library.

Below is an example of a contributor creating a structured note with the type of change they are making, a summary, a description, and an associated Jira ticket:

![intro.gif](https://raw.githubusercontent.com/opus10/detail/main/docs/static/detail-intro.gif)

Notes are commited to projects, allowing review of them before they are used to perform automations in continuous integration.

## Documentation

[View the detail docs here](https://detail.readthedocs.io/).

## Installation

Install detail with:

    pip3 install detail

## Contributing Guide

For information on setting up detail for development and contributing changes, view [CONTRIBUTING.rst](CONTRIBUTING.rst).

## Creators

- @wesleykendall (Wes Kendall)
- @tomage (Tómas Árni Jónasson)

