# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.api_generate_talking_avatar_request_body_aspect_ratio import ApiGenerateTalkingAvatarRequestBodyAspectRatio
from .types.api_generate_talking_avatar_request_body_audio_source import ApiGenerateTalkingAvatarRequestBodyAudioSource
from ..types.avatar_image_input import AvatarImageInput
from ..core.request_options import RequestOptions
from ..types.api_project_initialization_response_body import ApiProjectInitializationResponseBody
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CharactersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def initialize_talking_head_avatar(
        self,
        *,
        content_length: typing.Optional[int] = None,
        text: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        voice_url: typing.Optional[str] = OMIT,
        avatar_image: typing.Optional[str] = OMIT,
        aspect_ratio: typing.Optional[ApiGenerateTalkingAvatarRequestBodyAspectRatio] = OMIT,
        audio_source: typing.Optional[ApiGenerateTalkingAvatarRequestBodyAudioSource] = OMIT,
        avatar_image_input: typing.Optional[AvatarImageInput] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectInitializationResponseBody:
        """
        Parameters
        ----------
        content_length : typing.Optional[int]

        text : typing.Optional[str]
            text to convert to audio. Ignored if audio_source is not tts

        voice_id : typing.Optional[str]
            Voice ID

        voice_url : typing.Optional[str]
            URL of audio uploaded using the /v1/audio endpoint

        avatar_image : typing.Optional[str]
            URL of image uploaded via /v1/portrait

        aspect_ratio : typing.Optional[ApiGenerateTalkingAvatarRequestBodyAspectRatio]
            URL of audio uploaded using the /v1/audio endpoint

        audio_source : typing.Optional[ApiGenerateTalkingAvatarRequestBodyAudioSource]
            `tts` for text to speech or `audio`

        avatar_image_input : typing.Optional[AvatarImageInput]
            Image metadata

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectInitializationResponseBody
            Successful Response

        Examples
        --------
        from hedra import Hedra

        client = Hedra(
            api_key="YOUR_API_KEY",
        )
        client.characters.initialize_talking_head_avatar()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/characters",
            method="POST",
            json={
                "text": text,
                "voiceId": voice_id,
                "voiceUrl": voice_url,
                "avatarImage": avatar_image,
                "aspectRatio": aspect_ratio,
                "audioSource": audio_source,
                "avatarImageInput": convert_and_respect_annotation_metadata(
                    object_=avatar_image_input, annotation=AvatarImageInput, direction="write"
                ),
            },
            headers={
                "content-length": str(content_length) if content_length is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectInitializationResponseBody,
                    parse_obj_as(
                        type_=ApiProjectInitializationResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCharactersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def initialize_talking_head_avatar(
        self,
        *,
        content_length: typing.Optional[int] = None,
        text: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        voice_url: typing.Optional[str] = OMIT,
        avatar_image: typing.Optional[str] = OMIT,
        aspect_ratio: typing.Optional[ApiGenerateTalkingAvatarRequestBodyAspectRatio] = OMIT,
        audio_source: typing.Optional[ApiGenerateTalkingAvatarRequestBodyAudioSource] = OMIT,
        avatar_image_input: typing.Optional[AvatarImageInput] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiProjectInitializationResponseBody:
        """
        Parameters
        ----------
        content_length : typing.Optional[int]

        text : typing.Optional[str]
            text to convert to audio. Ignored if audio_source is not tts

        voice_id : typing.Optional[str]
            Voice ID

        voice_url : typing.Optional[str]
            URL of audio uploaded using the /v1/audio endpoint

        avatar_image : typing.Optional[str]
            URL of image uploaded via /v1/portrait

        aspect_ratio : typing.Optional[ApiGenerateTalkingAvatarRequestBodyAspectRatio]
            URL of audio uploaded using the /v1/audio endpoint

        audio_source : typing.Optional[ApiGenerateTalkingAvatarRequestBodyAudioSource]
            `tts` for text to speech or `audio`

        avatar_image_input : typing.Optional[AvatarImageInput]
            Image metadata

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiProjectInitializationResponseBody
            Successful Response

        Examples
        --------
        import asyncio

        from hedra import AsyncHedra

        client = AsyncHedra(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.characters.initialize_talking_head_avatar()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/characters",
            method="POST",
            json={
                "text": text,
                "voiceId": voice_id,
                "voiceUrl": voice_url,
                "avatarImage": avatar_image,
                "aspectRatio": aspect_ratio,
                "audioSource": audio_source,
                "avatarImageInput": convert_and_respect_annotation_metadata(
                    object_=avatar_image_input, annotation=AvatarImageInput, direction="write"
                ),
            },
            headers={
                "content-length": str(content_length) if content_length is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiProjectInitializationResponseBody,
                    parse_obj_as(
                        type_=ApiProjectInitializationResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
