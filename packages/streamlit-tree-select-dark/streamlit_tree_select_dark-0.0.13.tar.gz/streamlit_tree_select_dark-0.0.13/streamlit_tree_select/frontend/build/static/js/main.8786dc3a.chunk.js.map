{"version":3,"sources":["TreeSelect.tsx","index.tsx"],"names":["TreeSelect","StreamlitComponentBase","state","checked","expanded","checked_changed","expanded_changed","render","nodes","this","props","args","checkModel","direction","disabled","expandDisabled","expandOnClick","noCascade","onlyLeafCheckboxes","showExpandAll","icons","check","className","uncheck","halfCheck","expandClose","expandOpen","expandAll","collapseAll","parentClose","parentOpen","leaf","onCheck","setState","Streamlit","setComponentValue","onExpand","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"+MASA,MAAMA,UAAmBC,IAAwB,cAAD,yBACvCC,MAAQ,CACbC,QAAS,GACTC,SAAU,GACVC,iBAAiB,EACjBC,kBAAkB,GAL0B,KASvCC,OAAS,KAEd,MAAMC,EAAQC,KAAKC,MAAMC,KAAX,MACRC,EAAaH,KAAKC,MAAMC,KAAX,YACbR,EAAUM,KAAKC,MAAMC,KAAX,QACVE,EAAYJ,KAAKC,MAAMC,KAAX,UACZG,EAAWL,KAAKC,MAAMC,KAAX,SACXI,EAAiBN,KAAKC,MAAMC,KAAX,gBACjBK,EAAgBP,KAAKC,MAAMC,KAAX,gBAChBP,EAAWK,KAAKC,MAAMC,KAAX,SACXM,EAAYR,KAAKC,MAAMC,KAAX,WACZO,EAAqBT,KAAKC,MAAMC,KAAX,qBACrBQ,EAAgBV,KAAKC,MAAMC,KAAX,gBAUtB,OARKF,KAAKP,MAAMG,kBACdI,KAAKP,MAAMC,QAAUA,GAGlBM,KAAKP,MAAMI,mBACdG,KAAKP,MAAME,SAAWA,GAGhB,kBAAC,IAAD,CACNgB,MAAO,CACLC,MAAO,0BAAMC,UAAU,4BACvBC,QAAS,0BAAMD,UAAU,8BACzBE,UAAW,0BAAMF,UAAU,iCAC3BG,YAAa,0BAAMH,UAAU,mCAC7BI,WAAY,0BAAMJ,UAAU,kCAC5BK,UAAW,0BAAML,UAAU,iCAC3BM,YAAa,0BAAMN,UAAU,mCAC7BO,YAAa,0BAAMP,UAAU,mCAC7BQ,WAAY,0BAAMR,UAAU,kCAC5BS,KAAM,0BAAMT,UAAU,4BAExBd,MAAOA,EACPI,WAAYA,EACZC,UAAWA,EACXC,SAAUA,EACVC,eAAgBA,EAChBC,cAAeA,EACfC,UAAWA,EACXC,mBAAoBA,EACpBC,cAAeA,EACfhB,QAASM,KAAKP,MAAMC,QACpBC,SAAUK,KAAKP,MAAME,SACrB4B,QAAU7B,IAAcM,KAAKwB,SAAS,CAAE9B,YAAY+B,IAAUC,kBAAkB,CAAC,QAAWhC,EAAS,SAAYM,KAAKP,MAAME,WAAYK,KAAKP,MAAMG,iBAAkB,GACrK+B,SAAWhC,IAAcK,KAAKwB,SAAS,CAAE7B,aAAa8B,IAAUC,kBAAkB,CAAE,QAAW1B,KAAKP,MAAMC,QAAS,SAAYC,IAAYK,KAAKP,MAAMI,kBAAmB,OAahK+B,kBAAwBrC,GC1EvCsC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.8786dc3a.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport CheckboxTree from 'react-checkbox-tree';\r\n\r\n\r\nclass TreeSelect extends StreamlitComponentBase {\r\n  public state = {\r\n    checked: [],\r\n    expanded: [],\r\n    checked_changed: false,\r\n    expanded_changed: false,\r\n  };\r\n\r\n\r\n  public render = (): ReactNode => {\r\n\r\n    const nodes = this.props.args['nodes']\r\n    const checkModel = this.props.args['check_model']\r\n    const checked = this.props.args['checked']\r\n    const direction = this.props.args['direction']\r\n    const disabled = this.props.args['disabled']\r\n    const expandDisabled = this.props.args['expand_disabled']\r\n    const expandOnClick = this.props.args['expand_on_click']\r\n    const expanded = this.props.args['expanded']\r\n    const noCascade = this.props.args['no_cascade']\r\n    const onlyLeafCheckboxes = this.props.args['only_leaf_checkboxes']\r\n    const showExpandAll = this.props.args['show_expand_all']\r\n\r\n    if (!this.state.checked_changed) {\r\n      this.state.checked = checked;\r\n    };\r\n\r\n    if (!this.state.expanded_changed){\r\n      this.state.expanded = expanded;\r\n    }\r\n\r\n    return (<CheckboxTree\r\n      icons={{\r\n        check: <span className=\"rct-icon rct-icon-check\" />,\r\n        uncheck: <span className=\"rct-icon rct-icon-uncheck\" />,\r\n        halfCheck: <span className=\"rct-icon rct-icon-half-check\" />,\r\n        expandClose: <span className=\"rct-icon rct-icon-expand-close\" />,\r\n        expandOpen: <span className=\"rct-icon rct-icon-expand-open\" />,\r\n        expandAll: <span className=\"rct-icon rct-icon-expand-all\" />,\r\n        collapseAll: <span className=\"rct-icon rct-icon-collapse-all\" />,\r\n        parentClose: <span className=\"rct-icon rct-icon-parent-close\" />,\r\n        parentOpen: <span className=\"rct-icon rct-icon-parent-open\" />,\r\n        leaf: <span className=\"rct-icon rct-icon-leaf\" />,\r\n      }}\r\n      nodes={nodes}\r\n      checkModel={checkModel}\r\n      direction={direction}\r\n      disabled={disabled}\r\n      expandDisabled={expandDisabled}\r\n      expandOnClick={expandOnClick}\r\n      noCascade={noCascade}\r\n      onlyLeafCheckboxes={onlyLeafCheckboxes}\r\n      showExpandAll={showExpandAll}\r\n      checked={this.state.checked}\r\n      expanded={this.state.expanded}\r\n      onCheck={(checked) => { this.setState({ checked }); Streamlit.setComponentValue({'checked': checked, 'expanded': this.state.expanded}); this.state.checked_changed = true; }}\r\n      onExpand={(expanded) => {this.setState({ expanded }); Streamlit.setComponentValue({ 'checked': this.state.checked, 'expanded': expanded}); this.state.expanded_changed = true;}}\r\n    />)\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(TreeSelect)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TreeSelect from \"./TreeSelect\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TreeSelect />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}