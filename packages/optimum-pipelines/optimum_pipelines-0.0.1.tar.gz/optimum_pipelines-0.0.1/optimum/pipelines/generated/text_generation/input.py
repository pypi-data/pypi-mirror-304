# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Literal, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    PositiveFloat,
    PositiveInt,
    RootModel,
    confloat,
    conint,
)


class Type(Enum):
    json = "json"


class TextGenerationInputGrammarType1(BaseModel):
    type: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    value: Any = Field(
        ...,
        description="A string that represents a [JSON Schema](https://json-schema.org/).\n\nJSON Schema is a declarative language that allows to annotate JSON documents\nwith types and descriptions.",
    )


class Type1(Enum):
    regex = "regex"


class TextGenerationInputGrammarType2(BaseModel):
    type: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    value: str


class TextGenerationInputGrammarType(
    RootModel[Union[TextGenerationInputGrammarType1, TextGenerationInputGrammarType2]]
):
    root: Union[TextGenerationInputGrammarType1, TextGenerationInputGrammarType2] = Field(
        ..., discriminator="type", title="TextGenerationInputGrammarType"
    )


class TextGenerationInputGenerateParameters(BaseModel):
    best_of: Optional[conint(ge=0, gt=0)] = Field("null", examples=[1])
    decoder_input_details: Optional[bool] = "false"
    details: Optional[bool] = "true"
    do_sample: Optional[bool] = Field("false", examples=[True])
    frequency_penalty: Optional[confloat(gt=-2.0)] = Field("null", examples=[0.1])
    grammar: Optional[TextGenerationInputGrammarType] = Field(
        default_factory=lambda: TextGenerationInputGrammarType.model_validate("null")
    )
    max_new_tokens: Optional[conint(ge=0)] = Field("100", examples=["20"])
    repetition_penalty: Optional[PositiveFloat] = Field("null", examples=[1.03])
    return_full_text: Optional[bool] = Field("null", examples=[False])
    seed: Optional[conint(ge=0, gt=0)] = Field("null", examples=["null"])
    stop: Optional[List[str]] = Field(None, examples=[["photographer"]], max_length=4)
    temperature: Optional[PositiveFloat] = Field("null", examples=[0.5])
    top_k: Optional[PositiveInt] = Field("null", examples=[10])
    top_n_tokens: Optional[conint(ge=0, gt=0)] = Field("null", examples=[5])
    top_p: Optional[confloat(le=1.0, gt=0.0)] = Field("null", examples=[0.95])
    truncate: Optional[conint(ge=0)] = Field("null", examples=["null"])
    typical_p: Optional[confloat(le=1.0, gt=0.0)] = Field("null", examples=[0.95])
    watermark: Optional[bool] = Field("false", examples=[True])


class TextGenerationInput(BaseModel):
    inputs: str = Field(..., examples=["My name is Olivier and I"])
    parameters: Optional[TextGenerationInputGenerateParameters] = None
    stream: Optional[bool] = "false"
