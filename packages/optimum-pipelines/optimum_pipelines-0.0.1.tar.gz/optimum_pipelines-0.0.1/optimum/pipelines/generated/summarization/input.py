# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class Truncation(Enum):
    do_not_truncate = "do_not_truncate"
    longest_first = "longest_first"
    only_first = "only_first"
    only_second = "only_second"


class SummarizationParameters(BaseModel):
    clean_up_tokenization_spaces: Optional[bool] = Field(
        None,
        description="Whether to clean up the potential extra spaces in the text output.",
    )
    truncation: Optional[Truncation] = Field(
        None,
        description="The truncation strategy to use.",
        title="SummarizationTruncationStrategy",
    )
    generate_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional parametrization of the text generation algorithm.",
        title="generateParameters",
    )


class SummarizationInput(BaseModel):
    inputs: str = Field(..., description="The input text to summarize.")
    parameters: Optional[SummarizationParameters] = Field(None, description="Additional inference parameters.")
