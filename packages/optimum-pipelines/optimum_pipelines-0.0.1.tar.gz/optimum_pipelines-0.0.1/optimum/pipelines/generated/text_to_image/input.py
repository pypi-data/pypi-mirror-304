# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:29+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class TargetSize(BaseModel):
    width: int
    height: int


class TextToImageParameters(BaseModel):
    guidance_scale: Optional[float] = Field(
        None,
        description="A higher guidance scale value encourages the model to generate images closely linked to the text prompt, but values too high may cause saturation and other artifacts.",
    )
    negative_prompt: Optional[List[str]] = Field(
        None,
        description="One or several prompt to guide what NOT to include in image generation.",
    )
    num_inference_steps: Optional[int] = Field(
        None,
        description="The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.",
    )
    target_size: Optional[TargetSize] = Field(None, description="The size in pixel of the output image")
    scheduler: Optional[str] = Field(None, description="Override the scheduler with a compatible one.")
    seed: Optional[int] = Field(None, description="Seed for the random number generator.")


class TextToImageInput(BaseModel):
    inputs: str = Field(..., description='The input text data (sometimes called "prompt")')
    parameters: Optional[TextToImageParameters] = Field(None, description="Additional inference parameters")
