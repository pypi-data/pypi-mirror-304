# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:20+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class FillMaskParameters(BaseModel):
    top_k: Optional[int] = Field(None, description="When passed, overrides the number of predictions to return.")
    targets: Optional[List[str]] = Field(
        None,
        description="When passed, the model will limit the scores to the passed targets instead of looking up in the whole vocabulary. If the provided targets are not in the model vocab, they will be tokenized and the first resulting token will be used (with a warning, and that might be slower).",
    )


class FillMaskInput(BaseModel):
    inputs: str = Field(..., description="The text with masked tokens")
    parameters: Optional[FillMaskParameters] = Field(None, description="Additional inference parameters")
