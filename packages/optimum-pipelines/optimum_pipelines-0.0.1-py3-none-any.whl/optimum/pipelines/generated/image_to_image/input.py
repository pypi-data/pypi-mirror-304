# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:22+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class TargetSize(BaseModel):
    width: int
    height: int


class ImageToImageParameters(BaseModel):
    guidance_scale: Optional[float] = Field(
        None,
        description="For diffusion models. A higher guidance scale value encourages the model to generate images closely linked to the text prompt at the expense of lower image quality.",
    )
    negative_prompt: Optional[List[str]] = Field(
        None,
        description="One or several prompt to guide what NOT to include in image generation.",
    )
    num_inference_steps: Optional[int] = Field(
        None,
        description="For diffusion models. The number of denoising steps. More denoising steps usually lead to a higher quality image at the expense of slower inference.",
    )
    target_size: Optional[TargetSize] = Field(None, description="The size in pixel of the output image.")


class ImageToImageInput(BaseModel):
    inputs: str = Field(
        ...,
        description="The input image data as a base64-encoded string. If no `parameters` are provided, you can also provide the image data as a raw bytes payload.",
    )
    parameters: Optional[ImageToImageParameters] = Field(None, description="Additional inference parameters")
