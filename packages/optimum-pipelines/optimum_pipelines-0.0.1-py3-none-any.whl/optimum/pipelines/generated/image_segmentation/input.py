# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Subtask(Enum):
    instance = "instance"
    panoptic = "panoptic"
    semantic = "semantic"


class ImageSegmentationParameters(BaseModel):
    mask_threshold: Optional[float] = Field(
        None,
        description="Threshold to use when turning the predicted masks into binary values.",
    )
    overlap_mask_area_threshold: Optional[float] = Field(
        None,
        description="Mask overlap threshold to eliminate small, disconnected segments.",
    )
    subtask: Optional[Subtask] = Field(
        None,
        description="Segmentation task to be performed, depending on model capabilities.",
        title="ImageSegmentationSubtask",
    )
    threshold: Optional[float] = Field(None, description="Probability threshold to filter out predicted masks.")


class ImageSegmentationInput(BaseModel):
    inputs: str = Field(
        ...,
        description="The input image data as a base64-encoded string. If no `parameters` are provided, you can also provide the image data as a raw bytes payload.",
    )
    parameters: Optional[ImageSegmentationParameters] = Field(None, description="Additional inference parameters")
