# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2024-10-25T08:14:32+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Inputs(BaseModel):
    text: str = Field(..., description="The text to classify")
    candidateLabels: List[str] = Field(..., description="The set of possible class labels to classify the text into.")


class ZeroShotClassificationParameters(BaseModel):
    hypothesis_template: Optional[str] = Field(
        None,
        description="The sentence used in conjunction with candidateLabels to attempt the text classification by replacing the placeholder with the candidate labels.",
    )
    multi_label: Optional[bool] = Field(
        None,
        description="Whether multiple candidate labels can be true. If false, the scores are normalized such that the sum of the label likelihoods for each sequence is 1. If true, the labels are considered independent and probabilities are normalized for each candidate.",
    )


class ZeroShotClassificationInput(BaseModel):
    inputs: Inputs = Field(
        ...,
        description="The input text data, with candidate labels",
        title="ZeroShotClassificationInputData",
    )
    parameters: Optional[ZeroShotClassificationParameters] = Field(None, description="Additional inference parameters")
