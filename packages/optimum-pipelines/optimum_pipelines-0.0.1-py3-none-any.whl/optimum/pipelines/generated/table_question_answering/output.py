# generated by datamodel-codegen:
#   filename:  output.json
#   timestamp: 2024-10-25T08:14:26+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class TableQuestionAnsweringOutputItem(BaseModel):
    answer: str = Field(
        ...,
        description="The answer of the question given the table. If there is an aggregator, the answer will be preceded by `AGGREGATOR >`.",
    )
    coordinates: List[List[int]] = Field(..., description="Coordinates of the cells of the answers.")
    cells: List[str] = Field(..., description="List of strings made up of the answer cell values.")
    aggregator: Optional[str] = Field(None, description="If the model has an aggregator, this returns the aggregator.")


class TableQuestionAnsweringOutput(RootModel[List[TableQuestionAnsweringOutputItem]]):
    root: List[TableQuestionAnsweringOutputItem] = Field(
        ...,
        description="Outputs of inference for the Table Question Answering task",
        title="TableQuestionAnsweringOutput",
    )
