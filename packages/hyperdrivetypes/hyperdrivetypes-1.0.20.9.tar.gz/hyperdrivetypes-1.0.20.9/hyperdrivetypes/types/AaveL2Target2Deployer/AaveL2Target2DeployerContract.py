"""A web3.py Contract class for the AaveL2Target2Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.46.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    check_txn_receipt,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    handle_contract_logic_error,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}


class AaveL2Target2DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=AaveL2Target2DeployerContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=AaveL2Target2DeployerContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=AaveL2Target2DeployerContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=AaveL2Target2DeployerContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=AaveL2Target2DeployerContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class AaveL2Target2DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> AaveL2Target2DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> AaveL2Target2DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            AaveL2Target2DeployerDeployTargetContractFunction0._type_signature: AaveL2Target2DeployerDeployTargetContractFunction0.factory(
                "AaveL2Target2DeployerDeployTargetContractFunction0", **kwargs
            ),
        }
        return out


class AaveL2Target2DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the AaveL2Target2Deployer contract."""

    deployTarget: AaveL2Target2DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            AaveL2Target2DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


aavel2target2deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class AaveL2Target2DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the AaveL2Target2Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class AaveL2Target2DeployerContract(Contract):
    """A web3.py Contract class for the AaveL2Target2Deployer contract."""

    abi: ABI = aavel2target2deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b50615117806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638c98b3c61462000033575b600080fd5b6200004a6200004436600462000247565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051620000a290620000da565b620000af929190620003bc565b8190604051809103906000f5905080158015620000d0573d6000803e3d6000fd5b5095945050505050565b614bf180620004f183390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001255762000125620000e8565b60405290565b80356001600160a01b03811681146200014357600080fd5b919050565b6000608082840312156200015b57600080fd5b6040516080810181811067ffffffffffffffff82111715620001815762000181620000e8565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112620001c457600080fd5b813567ffffffffffffffff80821115620001e257620001e2620000e8565b604051601f8301601f19908116603f011681019082821181831017156200020d576200020d620000e8565b816040528381528660208588010111156200022757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c08112156200026057600080fd5b610260808212156200027157600080fd5b6200027b620000fe565b915062000288876200012b565b825262000298602088016200012b565b6020830152620002ab604088016200012b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e0830152610100808801358184015250610120808801358184015250610140808801358184015250610160620003168189016200012b565b908301526101806200032a8882016200012b565b908301526101a06200033e8882016200012b565b908301526101c0620003528882016200012b565b908301526101e0620003678989830162000148565b81840152508195506200037c8188016200012b565b9450505061028085013567ffffffffffffffff8111156200039c57600080fd5b620003aa87828801620001b2565b949793965093946102a0013593505050565b82516001600160a01b0316815261028081016020840151620003e960208401826001600160a01b03169052565b5060408401516200040560408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162000478828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102a06040523480156200001257600080fd5b5060405162004bf138038062004bf1833981016040819052620000359162000578565b600160005581516001600160a01b039081166080908152602080850151831660a0818152928601516101a052918501516101c05260c0808601516101e090815260e08088015161020052610120808901519093526101008089015190915261014080890151909152908701805151909252815183015190528051604090810151610160529051606090810151610180528187015185166102405286015161026052928416610220528251633a9ae92360e11b815292519192637535d24692600480830193928290030181865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620006b5565b6001600160a01b039081166102808190526080516200015d921690600162000165565b50506200072a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001bf90859083906200023116565b6200022b57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200021f918691620002e216565b6200022b8482620002e2565b50505050565b6000806000846001600160a01b031684604051620002509190620006d5565b6000604051808303816000865af19150503d80600081146200028f576040519150601f19603f3d011682016040523d82523d6000602084013e62000294565b606091505b5091509150818015620002c2575080511580620002c2575080806020019051810190620002c2919062000706565b8015620002d957506000856001600160a01b03163b115b95945050505050565b6000620002f96001600160a01b0384168362000355565b90508051600014158015620003215750808060200190518101906200031f919062000706565b155b156200035057604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b606062000365838360006200036c565b9392505050565b606081471015620003935760405163cd78605960e01b815230600482015260240162000347565b600080856001600160a01b03168486604051620003b19190620006d5565b60006040518083038185875af1925050503d8060008114620003f0576040519150601f19603f3d011682016040523d82523d6000602084013e620003f5565b606091505b5090925090506200040886838362000412565b9695505050505050565b6060826200042b57620004258262000476565b62000365565b81511580156200044357506001600160a01b0384163b155b156200046e57604051639996b31560e01b81526001600160a01b038516600482015260240162000347565b508062000365565b805115620004875780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405161020081016001600160401b0381118282101715620004d557634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620004a057600080fd5b8051620004fe81620004db565b919050565b6000608082840312156200051657600080fd5b604051608081016001600160401b03811182821017156200054757634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000808284036102808112156200058e57600080fd5b610260808212156200059f57600080fd5b620005a9620004a3565b9150620005b685620004f1565b8252620005c660208601620004f1565b6020830152620005d960408601620004f1565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016062000644818701620004f1565b9083015261018062000658868201620004f1565b908301526101a06200066c868201620004f1565b908301526101c062000680868201620004f1565b908301526101e0620006958787830162000503565b8184015250819350620006aa818601620004f1565b925050509250929050565b600060208284031215620006c857600080fd5b81516200036581620004db565b6000825160005b81811015620006f85760208186018101518583015201620006dc565b506000920191825250919050565b6000602082840312156200071957600080fd5b815180151581146200036557600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516142cc62000925600039600081816116a30152818161174501528181612677015281816129710152612a2d015260005050600050506000610c4101526000505060008181610100015281816103100152612fdc0152600081816114d801528181611dd401528181611e37015281816125e901528181612bc101528181612bfd01528181612df50152612fb60152600081816107ef01528181610da101528181610de301528181610ed50152818161134b015281816113aa0152612f90015260006119f3015260008181611b190152818161272b015281816127a401526130f60152600081816109b301528181610e560152818161144501528181611aed0152612778015260008181610e35015281816126f701526130b201526000818161081001528181610d7f01528181610e0401528181610ef601528181611329015281816113cb01526130020152600081816101de015281816103a8015281816108eb01526137030152600081816106a9015281816107290152818161079f0152818161086b01526108a3015260006117c4015260008181611676015281816116d701528181611705015281816126560152612a0c01526142cc6000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c366004613b27565b61006d565b6040805192835260208301919091520160405180910390f35b610041610068366004613b27565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a461052a565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610554565b6100de83610575565b6000806100eb88866105ae565b909250905060006100fc8383610683565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106a1565b905061017a8184600460016106d2565b50600080600061018a8787610d50565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613b9c565b909155506101d99050844283610f32565b6102037f000000000000000000000000000000000000000000000000000000000000000085613b9c565b98506102118389888c611070565b600061021e60018b61120a565b90506102378161023160208e018e613bc4565b8b61123f565b8d8a8a898e8561024a6020830183613bc4565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a8688866102876040880160208901613bef565b8961029560408a018a613c0c565b6040516102a89796959493929190613c7c565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d461052a565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610554565b61030e83610575565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b60006103596112e7565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106a1565b9050600061039f6103956106a1565b84600460016106d2565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613b9c565b90506000806000806103e08e89886112fa565b60098054949850929650909450925083916000906103ff908490613b9c565b909155506104109050874283610f32565b50600061041e84898d611480565b9050808d10156104415760405163c972651760e01b815260040160405180910390fd5b61044b818c6105ae565b508e905061045b81858b896114b2565b600061046860028861120a565b90508c6104828261047c6020840184613bc4565b8561123f565b858b86846104936020860186613bc4565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d060408b0160208c01613bef565b6104e4896104de8a8d613cbd565b90610683565b8d6104f260408e018e613c0c565b604051610506989796959493929190613cd0565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361054d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b341561057357604051631574f9f360e01b815260040160405180910390fd5b565b60006105846020830183613bc4565b6001600160a01b0316036105ab5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b816000806105c26040850160208601613bef565b156105e7576105dd856105d86040870187613c0c565b611666565b90935090506105ff565b50346105ff856105fa6040870187613c0c565b6117c2565b6106076112e7565b9150801561067a57604051600090339083908381818185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106988383670de0b6b3a764000061187a565b90505b92915050565b60006106cd427f0000000000000000000000000000000000000000000000000000000000000000611898565b905090565b600084815260086020526040812060018101546001600160801b03161515806106fa57504286115b1561071357600101546001600160801b03169050610d48565b60008060006107206106a1565b9050600061074e7f00000000000000000000000000000000000000000000000000000000000000008b613b9c565b90505b818110156107c4576000818152600860205260409020600101546001600160801b0316801561079c576000828152600860205260409020549094506001600160801b031692506107c4565b507f000000000000000000000000000000000000000000000000000000000000000001610751565b83600003610837578893506108346107da6118ae565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118cf565b92505b50610841836118ef565b6001850180546001600160801b0319166001600160801b03929092169190911790556108976108907f00000000000000000000000000000000000000000000000000000000000000008b613cbd565b8a84610f32565b6108d5896108cf6108c87f000000000000000000000000000000000000000000000000000000000000000083613b9c565b429061191d565b84610f32565b6108de88611932565b50600090506008816109107f00000000000000000000000000000000000000000000000000000000000000008d613cbd565b815260208101919091526040016000908120600101546001600160801b0316915061093c60028c61120a565b6000818152600b60205260408120549192508c8c8315610a82576001925060008061096b86898d866000611ad6565b9150915080600960008282546109819190613b9c565b9091555061099d90508660008461099781611ba5565b88611bcf565b6109a78183613b9c565b91506109d786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611d49565b91506109eb6109e68385610683565b611d93565b60068054600290610a0c9084906201000090046001600160701b0316613d18565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a39826118ef565b60068054601090610a5b908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610a8f60018461120a565b6000818152600b60205260409020549091508015610b9e5760019450600080610abc838b8f886001611ad6565b915091508060096000828254610ad29190613b9c565b90915550610aee905083600084610ae881611ba5565b8a611dbd565b610af88183613cbd565b9150610b076109e68387610683565b60068054600290610b289084906201000090046001600160701b0316613d18565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b55826118ef565b60068054601090610b77908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bd857610bca610bb087611ba5565b610bb983611ba5565b610bc39190613d58565b6000611fae565b8e610bd58482611fed565b50505b6000610be3846121e7565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613d88565b90506001600160a01b03811615610d3657610d335a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612333565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610d606118ae565b600254909150610dc5908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000006123be565b600254909450610e28908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118cf565b9150610e7f8785610e7a857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006123ea565b61244f565b15610e8c57610e8c612491565b610e98878588856124aa565b91965094509250670de0b6b3a7640000610f1a610eb58784613b9c565b600254610ed3908890600160801b90046001600160801b0316613cbd565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118cf565b1115610f2857610f28612491565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610f5e5750505050565b6000848152600860205260408120546001600160801b031690819003610fb857610f87836118ef565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611036565b611009611004670de0b6b3a7640000610fd18886613cbd565b610fdb9190613da5565b85670de0b6b3a7640000610fef878a613cbd565b610ff99190613da5565b8592919060016124f6565b6118ef565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61103f846118ef565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110b26110048261109c670de0b6b3a764000086613da5565b6005546001600160801b031691908860016124f6565b600580546001600160801b0319166001600160801b03929092169190911790556110db856118ef565b600280546000906110f69084906001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611123846118ef565b60028054601090611145908490600160801b90046001600160801b0316613dbc565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611172846118ef565b61117c9082613d38565b600380546001600160801b03808416600160801b029116179055905060006111a38361259e565b90506111c1816111b287611ba5565b6111bc9084613ddc565b611fae565b6111ca846125e2565b6111d6576111d6612491565b60006111e185612642565b90508061120157604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b038211156112345760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290611271908490613b9c565b90915550506000838152600b602052604081208054839290611294908490613b9c565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60006106cd670de0b6b3a764000061264f565b600080600080600061130a6118ae565b60025490915061136f908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f000000000000000000000000000000000000000000000000000000000000000061269c565b93508761137c85896126bd565b111561138a5761138a612491565b60025460009081906113ef908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118cf565b93506114058a670de0b6b3a7640000868c6126d2565b5091935090915061141890508183613cbd565b6114229087613cbd565b95508861146f816114698d611437868c613cbd565b8d61144287826127e0565b877f00000000000000000000000000000000000000000000000000000000000000006127f6565b906126bd565b975090945050505093509350935093565b60006114926040830160208401613bef565b1561149e5750826114ab565b6114a8848461281b565b90505b9392505050565b6002546001600160801b0316838110156114ce576114ce612491565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611506908390600f0b612830565b101561151457611514612491565b60045461155e9061100490600160801b90046001600160801b0316611541670de0b6b3a764000086613da5565b600554600160801b90046001600160801b031691908960016124f6565b600580546001600160801b03928316600160801b029216919091179055611584816118ef565b600280546001600160801b0319166001600160801b03929092169190911790556115ad856118ef565b600280546010906115cf908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506115fc856118ef565b6004805460109061161e908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061164d8361259e565b90506111c18161165c88611ba5565b6111bc9084613d58565b60008061169e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088612856565b6116fe7f00000000000000000000000000000000000000000000000000000000000000006116cd876001613b9c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128bd565b600061172c7f000000000000000000000000000000000000000000000000000000000000000087600061294d565b6040516303de9ce160e61b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f7a7384090602401600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b505050506117b286612a05565b600092509250505b935093915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd33306117fc8761264f565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190613e04565b50505050565b600082600019048411830215820261189157600080fd5b5091020490565b60006118a48284613e37565b6106989084613cbd565b6002546004546000916106cd916001600160801b0390911690600f0b612830565b60006118e6826118e085888861187a565b90612a52565b95945050505050565b60006001600160801b0382111561191957604051630f0af95160e11b815260040160405180910390fd5b5090565b600081831161192c5782610698565b50919050565b6006546000908190611955908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611ad157600061197f8383613cbd565b905061198e6110048286612abd565b600680546010906119b0908490600160801b90046001600160801b0316613dbc565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006119e9858361281b90919063ffffffff16565b90506000611a17827f0000000000000000000000000000000000000000000000000000000000000000610683565b90508060096000828254611a2b9190613b9c565b90915550611a3b90508183613cbd565b9150611a46826118ef565b60028054600090611a619084906001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a8e82612ad2565b60048054600090611aa3908490600f0b613e4b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611ae3878561281b565b91506000611b11837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611b3d817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611b6057611b4f8282613cbd565b611b599084613cbd565b9250611b77565b611b6a8282613cbd565b611b749084613b9c565b92505b86861015611b9a57611b8a83878961187a565b9250611b9782878961187a565b91505b509550959350505050565b60006001600160ff1b038211156119195760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611c1861100482611bfb670de0b6b3a764000086613da5565b600554600160801b90046001600160801b031691908a60006124f6565b600580546001600160801b03928316600160801b029216919091179055611c3e866118ef565b611c489082613dbc565b600480546001600160801b03928316600160801b029216919091179055611c6e846118ef565b60028054600090611c899084906001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611cb683612afc565b60048054600090611ccb908490600f0b613e4b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611cfb856118ef565b60028054601090611d1d908490600160801b90046001600160801b0316613dbc565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611d6184611d5b8a888a61187a565b9061281b565b9050611d6e88848661187a565b611d789082613b9c565b905086811115611d885786810391505b509695505050505050565b60006001600160701b038211156119195760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611dff57507f0000000000000000000000000000000000000000000000000000000000000000611dfd8583613cbd565b105b15611e0c57611e0c612491565b6004549084900390600f0b611e218482613d58565b905083611e2d86611ba5565b138015611e6257507f0000000000000000000000000000000000000000000000000000000000000000611e608383612830565b105b15611e6f57611e6f612491565b600354600160801b90046001600160801b0316611eb161100482611e9b670de0b6b3a764000088613da5565b6005546001600160801b031691908c60006124f6565b600580546001600160801b0319166001600160801b0392909216919091179055611edb8882613cbd565b9050611ee6816118ef565b600380546001600160801b03928316600160801b029216919091179055611f0c836118ef565b600280546001600160801b0319166001600160801b0392909216919091179055611f3582612afc565b600480546001600160801b0319166001600160801b0392909216919091179055611f5e876118ef565b60028054601090611f80908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611fc990611004906001600160801b03168484612b38565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291612038916001600160801b031690613cbd565b90508060000361204c57600191505061069b565b600061205785612b9f565b90508060000361206c5760019250505061069b565b60008061207a838589612c3b565b915091508061209057600094505050505061069b565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016120cc929190613ef6565b6040805180830381865af41580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210c9190613f6c565b9150915061212a61211c82611ba5565b61212590613f90565b612daf565b925082612140576000965050505050505061069b565b612149826118ef565b600780546000906121649084906001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612191816118ef565b600780546010906121b3908490600160801b90046001600160801b0316613d38565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61221087612f47565b6040518263ffffffff1660e01b815260040161222c9190613fac565b6040805180830381865af4158015612248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226c9190613fbb565b9150915080612282575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122e891613b9c565b6122f29190613cbd565b90508060000361230a57506000958695509350505050565b600080871161231a576000612325565b61232584888461187a565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561235957612359613feb565b6040519080825280601f01601f191660200182016040528015612383576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156123a4578692505b828152826000602083013e90999098509650505050505050565b60006123df8787876123d888670de0b6b3a7640000613cbd565b8787613081565b979650505050505050565b60006114a861242b61240484670de0b6b3a7640000613cbd565b611469670de0b6b3a764000061241a818a612abd565b6124249190613cbd565b87906126bd565b61243d90670de0b6b3a7640000613b9c565b611d5b84670de0b6b3a7640000613cbd565b6000806124868561245e6118ae565b6124689190613b9c565b600254610ed3908790600160801b90046001600160801b0316613cbd565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b60008060008060006124bd8987896130a4565b90925090506124cc8289613cbd565b975060006124db82888a61187a565b90506124e7818b613cbd565b9a989950979650505050505050565b6000826000036125075750846118e6565b811561255a5761253861251a8487613b9c565b6125248587610683565b61252e888a610683565b611d5b9190613b9c565b90506000612546858861191d565b905080821015612554578091505b506118e6565b828503612569575060006118e6565b6125946125768487613cbd565b61258085876126bd565b61258a888a610683565b611d5b9190613cbd565b9695505050505050565b60006125c6600b60006125b260028661120a565b815260200190815260200160002054611ba5565b6125d8600b60006125b260018761120a565b61069b9190613d58565b600061260e7f0000000000000000000000000000000000000000000000000000000000000000836126bd565b60035461262491906001600160801b0316613b9c565b60025461263a906001600160801b031684610683565b101592915050565b600061069b826004611fed565b600061069b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613124565b60006123df8787876126b688670de0b6b3a7640000613cbd565b8787613147565b60006106988383670de0b6b3a7640000613158565b6000808080612723878661271c8b6114696126f58c670de0b6b3a7640000613cbd565b7f0000000000000000000000000000000000000000000000000000000000000000906126bd565b9190613158565b935061274f847f0000000000000000000000000000000000000000000000000000000000000000610683565b9150600061277061276889670de0b6b3a7640000613cbd565b8a9088613158565b905061279c817f00000000000000000000000000000000000000000000000000000000000000006126bd565b93506127c8847f0000000000000000000000000000000000000000000000000000000000000000610683565b6127d29084613b9c565b915050945094509450949050565b60008183116127ef5781610698565b5090919050565b60008061280e846128088a888a613158565b90612abd565b9050611d6e888486613158565b600061069883670de0b6b3a76400008461187a565b60008061283d848461317e565b90925090508061284f5761284f612491565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526118749186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506131ba565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261290e8482613227565b611874576040516001600160a01b0384811660248301526000604483015261294391869182169063095ea7b39060640161288b565b61187484826131ba565b6040516335ea6a7560e01b81526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa1580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129dd91906140c7565b60e00151905060006129ee856118ef565b60101b609085901b01919091019150509392505050565b600061069b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846132ca565b600081600003612a6b5750670de0b6b3a764000061069b565b82600003612a7b5750600061069b565b6000612a8683611ba5565b90506000612a9b612a9686611ba5565b6132ee565b9050818102612ab2670de0b6b3a7640000826141ea565b905061259481613514565b600061069883670de0b6b3a764000084613158565b600060016001607f1b038211156119195760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612b1a575060016001607f1b0382135b156119195760405163a5353be560e01b815260040160405180910390fd5b600080612b468460006136a9565b612b518460006136a9565b612b5b9190613d58565b90506000811315612b7757612b708186613b9c565b9450612b96565b6000811215612b9657612b8981613f90565b612b939086613cbd565b94505b50929392505050565b6003546000908190612bba906001600160801b031684612abd565b9050612be67f000000000000000000000000000000000000000000000000000000000000000082613b9c565b6002546001600160801b0316111561192c576002547f000000000000000000000000000000000000000000000000000000000000000090612c319083906001600160801b0316613cbd565b6114ab9190613cbd565b612c43613a74565b600080612c4f84612f47565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612c8a9190613fac565b6040805180830381865af4158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca9190613fbb565b9350905082612cdf5750600091506117ba9050565b6000612d06612d0184610160015185610140015161068390919063ffffffff16565b611ba5565b612d26612d018561012001518661010001516126bd90919063ffffffff16565b612d309190613d58565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8c9190614218565b935093509350935080612ea85750600098975050505050505050565b868414612ed957612eb8846118ef565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612f0a57612ee983612afc565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612f3857612f1a826118ef565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612f4f613ac6565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161304791166136b8565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192613079929004166136b8565b905292915050565b60008061309288888888888861372e565b909250905080611d8857611d88612491565b6000806130ee8561146985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006130e4818c612abd565b6114699190613cbd565b915061311a827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b60006114a861313385856137f6565b83906b033b2e3c9fd0803ce800000061187a565b600080613092888888888888613864565b600082600019048411830215820261316f57600080fd5b50910281810615159190040190565b60008060008361318d86611ba5565b6131979190613d58565b905060008112156131af57600080925092505061067c565b946001945092505050565b60006131cf6001600160a01b03841683613924565b905080516000141580156131f45750808060200190518101906131f29190613e04565b155b1561322257604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b031684604051613244919061424e565b6000604051808303816000865af19150503d8060008114613281576040519150601f19603f3d011682016040523d82523d6000602084013e613286565b606091505b50915091508180156132b05750805115806132b05750808060200190518101906132b09190613e04565b80156118e65750505050506001600160a01b03163b151590565b60006114a86b033b2e3c9fd0803ce80000006132e686866137f6565b84919061187a565b60008082136133105760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906133939084901c611ba5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361352f57506000919050565b680755bf798b4a1bf1e58212613558576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061259474029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611ba5565b60008183136127ef5781610698565b600080670de0b6b3a76400006136cc6106a1565b6136d69190613da5565b90508083116136e65760006136f0565b6136f08184613cbd565b91506114ab613727670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613da5565b839061281b565b60008060006137408989888888613932565b905061375a866118e06137538a8d613b9c565b8790610683565b9850613767858a8661187a565b98508881101561377e5760008092509250506137eb565b888103670de0b6b3a764000081106137b3576137ac6137a5670de0b6b3a764000089612abd565b8290612a52565b90506137cb565b6137c86137a5670de0b6b3a76400008961281b565b90505b808910156137e1576000809350935050506137eb565b8803925060019150505b965096945050505050565b60405163d15e005360e01b81526001600160a01b0383811660048301526000919083169063d15e005390602401602060405180830381865afa158015613840573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610698919061427d565b60008060006138768989888888613932565b9050613886866118e0898b613b9c565b97508781101561389d5760008092509250506137eb565b8781036138ab818688613158565b9050670de0b6b3a764000081106138d8576138d16137a5670de0b6b3a764000089612abd565b90506138f0565b6138ed6137a5670de0b6b3a76400008961281b565b90505b6138fa8186612abd565b9050808a1015613912576000809350935050506137eb565b90980398600198509650505050505050565b606061069883836000613961565b600061393e8585612a52565b61395761394f866118e0868b6126bd565b859085613158565b6125949190613b9c565b6060814710156139865760405163cd78605960e01b8152306004820152602401613219565b600080856001600160a01b031684866040516139a2919061424e565b60006040518083038185875af1925050503d80600081146139df576040519150601f19603f3d011682016040523d82523d6000602084013e6139e4565b606091505b5091509150612594868383606082613a04576139ff82613a4b565b6114ab565b8151158015613a1b57506001600160a01b0384163b155b15613a4457604051639996b31560e01b81526001600160a01b0385166004820152602401613219565b50806114ab565b805115613a5b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101200160405280613a88613ac6565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060008060808587031215613b3d57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613b6957600080fd5b850160608188031215613b7b57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069b5761069b613b86565b6001600160a01b03811681146105ab57600080fd5b600060208284031215613bd657600080fd5b81356114ab81613baf565b80151581146105ab57600080fd5b600060208284031215613c0157600080fd5b81356114ab81613be1565b6000808335601e19843603018112613c2357600080fd5b83018035915067ffffffffffffffff821115613c3e57600080fd5b60200191503681900382131561067c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613cb060c083018486613c53565b9998505050505050505050565b8181038181111561069b5761069b613b86565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613d0a60e083018486613c53565b9a9950505050505050505050565b6001600160701b0381811683821601908082111561284f5761284f613b86565b6001600160801b0381811683821601908082111561284f5761284f613b86565b818103600083128015838313168383128216171561284f5761284f613b86565b8051613d8381613baf565b919050565b600060208284031215613d9a57600080fd5b81516114ab81613baf565b808202811582820484141761069b5761069b613b86565b6001600160801b0382811682821603908082111561284f5761284f613b86565b8082018281126000831280158216821582161715613dfc57613dfc613b86565b505092915050565b600060208284031215613e1657600080fd5b81516114ab81613be1565b634e487b7160e01b600052601260045260246000fd5b600082613e4657613e46613e21565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069b5761069b613b86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613f0a828551613e78565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613f7f57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613fa557613fa5613b86565b5060000390565b610180810161069b8284613e78565b60008060408385031215613fce57600080fd5b825191506020830151613fe081613be1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561403357634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561404b57600080fd5b6040516020810181811067ffffffffffffffff8211171561407c57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516001600160801b0381168114613d8357600080fd5b805164ffffffffff81168114613d8357600080fd5b805161ffff81168114613d8357600080fd5b60006101e082840312156140da57600080fd5b6140e2614001565b6140ec8484614039565b81526140fa60208401614089565b602082015261410b60408401614089565b604082015261411c60608401614089565b606082015261412d60808401614089565b608082015261413e60a08401614089565b60a082015261414f60c084016140a0565b60c082015261416060e084016140b5565b60e0820152610100614173818501613d78565b90820152610120614185848201613d78565b90820152610140614197848201613d78565b908201526101606141a9848201613d78565b908201526101806141bb848201614089565b908201526101a06141cd848201614089565b908201526101c06141df848201614089565b908201529392505050565b6000826141f9576141f9613e21565b600160ff1b82146000198414161561421357614213613b86565b500590565b6000806000806080858703121561422e57600080fd5b8451935060208501519250604085015191506060850151613b7b81613be1565b6000825160005b8181101561426f5760208186018101518583015201614255565b506000920191825250919050565b60006020828403121561428f57600080fd5b505191905056fea26469706673582212207492f57df76f48c058a3fbac3555a413ad0ccd0b17fe5c0979df67ef0d5e27fd64736f6c63430008160033a26469706673582212202efa5fa61ba8fe3e6af4c9a79a5cc9edeb2b7bdc045a8b451b4e005bc594cd8264736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = AaveL2Target2DeployerContractFunctions(aavel2target2deployer_abi, self.w3, address)  # type: ignore

    functions: AaveL2Target2DeployerContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = AaveL2Target2DeployerContractFunctions(
            aavel2target2deployer_abi, w3, None
        )

        return contract
