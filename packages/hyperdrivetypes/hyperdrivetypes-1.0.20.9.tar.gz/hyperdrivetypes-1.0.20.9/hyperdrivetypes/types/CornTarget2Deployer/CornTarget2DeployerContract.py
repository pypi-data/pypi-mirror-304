"""A web3.py Contract class for the CornTarget2Deployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.46.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    check_txn_receipt,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    handle_contract_logic_error,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..CornConversions import CornConversionsContract
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..LPMath import LPMathContract

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}


class CornTarget2DeployerDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(IHyperdrive.PoolConfig,str,bytes,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.PoolConfig", "str", "bytes", "bytes"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=CornTarget2DeployerContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=CornTarget2DeployerContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=CornTarget2DeployerContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=CornTarget2DeployerContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=CornTarget2DeployerContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class CornTarget2DeployerDeployTargetContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _config: IHyperdrive.PoolConfig, _adminController: str, arg3: bytes, _salt: bytes) -> CornTarget2DeployerDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> CornTarget2DeployerDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            CornTarget2DeployerDeployTargetContractFunction0._type_signature: CornTarget2DeployerDeployTargetContractFunction0.factory(
                "CornTarget2DeployerDeployTargetContractFunction0", **kwargs
            ),
        }
        return out


class CornTarget2DeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the CornTarget2Deployer contract."""

    deployTarget: CornTarget2DeployerDeployTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployTarget = (
            CornTarget2DeployerDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )


corntarget2deployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_cornSilo",
                    "type": "address",
                    "internalType": "contract ICornSilo",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {"name": "", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
    ],
)


class CornTarget2DeployerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the CornTarget2Deployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class CornTarget2DeployerContract(Contract):
    """A web3.py Contract class for the CornTarget2Deployer contract."""

    abi: ABI = corntarget2deployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612031929190613cbd565b6040805180830381865af415801561204d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120719190613d33565b9150915061208f61208182611b0a565b61208a90613d57565b612c3f565b9250826120a5576000965050505050505061069b565b6120ae82611854565b600780546000906120c99084906001600160801b0316613b13565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120f681611854565b60078054601090612118908490600160801b90046001600160801b0316613b13565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61217587612dd7565b6040518263ffffffff1660e01b81526004016121919190613d73565b6040805180830381865af41580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190613d82565b91509150806121e7575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161224d91613977565b6122579190613a98565b90508060000361226f57506000958695509350505050565b600080871161227f57600061228a565b61228a8488846117df565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156122be576122be613db2565b6040519080825280601f01601f1916602001820160405280156122e8576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612309578692505b828152826000602083013e90999098509650505050505050565b600061234487878761233d88670de0b6b3a7640000613a98565b8787612f11565b979650505050505050565b60006114a861239061236984670de0b6b3a7640000613a98565b611469670de0b6b3a764000061237f818a61294d565b6123899190613a98565b879061264c565b6123a290670de0b6b3a7640000613977565b611cc084670de0b6b3a7640000613a98565b6000806123eb856123c3611813565b6123cd9190613977565b600254610ed3908790600160801b90046001600160801b0316613a98565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000612422898789612f34565b90925090506124318289613a98565b9750600061244082888a6117df565b905061244c818b613a98565b9a989950979650505050505050565b60008260000361246c57508461184b565b81156124bf5761249d61247f8487613977565b6124898587610683565b612493888a610683565b611cc09190613977565b905060006124ab8588611882565b9050808210156124b9578091505b5061184b565b8285036124ce5750600061184b565b6124f96124db8487613a98565b6124e5858761264c565b6124ef888a610683565b611cc09190613a98565b9695505050505050565b600061252b600b600061251760028661120a565b815260200190815260200160002054611b0a565b61253d600b600061251760018761120a565b61069b9190613b33565b60006125737f00000000000000000000000000000000000000000000000000000000000000008361264c565b60035461258991906001600160801b0316613977565b60025461259f906001600160801b031684610683565b101592915050565b600061069b826004611f52565b60405163b88fed9f60e01b81526004810182905260009073__$5682da3f97efd8f880c10f145969e15691$__9063b88fed9f90602401602060405180830381865af4158015612607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190613bcf565b600061234487878761264588670de0b6b3a7640000613a98565b8787612fb4565b60006106988383670de0b6b3a7640000612fc5565b60008080806126b287866126ab8b6114696126848c670de0b6b3a7640000613a98565b7f00000000000000000000000000000000000000000000000000000000000000009061264c565b9190612fc5565b93506126de847f0000000000000000000000000000000000000000000000000000000000000000610683565b915060006126ff6126f789670de0b6b3a7640000613a98565b8a9088612fc5565b905061272b817f000000000000000000000000000000000000000000000000000000000000000061264c565b9350612757847f0000000000000000000000000000000000000000000000000000000000000000610683565b6127619084613977565b915050945094509450949050565b600081831161277e5781610698565b5090919050565b60008061279d846127978a888a612fc5565b9061294d565b9050611cd3888486612fc5565b600061069883670de0b6b3a7640000846117df565b6000806127cc8484612feb565b9092509050806127de576127de6123f6565b5092915050565b6040516001600160a01b03848116602483015283811660448301526064820183905261284c9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613027565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526128a38482613094565b61284c576040516001600160a01b038481166024830152600060448301526128d891869182169063095ea7b39060640161281a565b61284c8482613027565b6000816000036128fb5750670de0b6b3a764000061069b565b8260000361290b5750600061069b565b600061291683611b0a565b9050600061292b61292686611b0a565b613137565b9050818102612942670de0b6b3a764000082613dc8565b90506124f98161335d565b600061069883670de0b6b3a764000084612fc5565b600060016001607f1b0382111561187e5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b03198212806129aa575060016001607f1b0382135b1561187e5760405163a5353be560e01b815260040160405180910390fd5b6000806129d68460006134f2565b6129e18460006134f2565b6129eb9190613b33565b90506000811315612a0757612a008186613977565b9450612a26565b6000811215612a2657612a1981613d57565b612a239086613a98565b94505b50929392505050565b6003546000908190612a4a906001600160801b03168461294d565b9050612a767f000000000000000000000000000000000000000000000000000000000000000082613977565b6002546001600160801b03161115611891576002547f000000000000000000000000000000000000000000000000000000000000000090612ac19083906001600160801b0316613a98565b6114ab9190613a98565b612ad361384f565b600080612adf84612dd7565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612b1a9190613d73565b6040805180830381865af4158015612b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5a9190613d82565b9350905082612b6f5750600091506117be9050565b6000612b96612b9184610160015185610140015161068390919063ffffffff16565b611b0a565b612bb6612b9185610120015186610100015161264c90919063ffffffff16565b612bc09190613b33565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1c9190613df6565b935093509350935080612d385750600098975050505050505050565b868414612d6957612d4884611854565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612d9a57612d798361298c565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612dc857612daa82611854565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612ddf6138a1565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612ed79116613501565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612f0992900416613501565b905292915050565b600080612f22888888888888613577565b909250905080611ced57611ced6123f6565b600080612f7e8561146985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f74818c61294d565b6114699190613a98565b9150612faa827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b600080612f2288888888888861363f565b6000826000190484118302158202612fdc57600080fd5b50910281810615159190040190565b600080600083612ffa86611b0a565b6130049190613b33565b9050600081121561301c57600080925092505061067c565b946001945092505050565b600061303c6001600160a01b038416836136ff565b9050805160001415801561306157508080602001905181019061305f9190613e2c565b155b1561308f57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b0316846040516130b19190613e49565b6000604051808303816000865af19150503d80600081146130ee576040519150601f19603f3d011682016040523d82523d6000602084013e6130f3565b606091505b509150915081801561311d57508051158061311d57508080602001905181019061311d9190613e2c565b801561184b5750505050506001600160a01b03163b151590565b60008082136131595760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131dc9084901c611b0a565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361337857506000919050565b680755bf798b4a1bf1e582126133a1576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906124f974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b0a565b600081831361277e5781610698565b600080670de0b6b3a76400006135156106a1565b61351f9190613b70565b905080831161352f576000613539565b6135398184613a98565b91506114ab613570670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b70565b83906127aa565b6000806000613589898988888861370d565b90506135a38661184561359c8a8d613977565b8790610683565b98506135b0858a866117df565b9850888110156135c7576000809250925050613634565b888103670de0b6b3a764000081106135fc576135f56135ee670de0b6b3a76400008961294d565b82906128e2565b9050613614565b6136116135ee670de0b6b3a7640000896127aa565b90505b8089101561362a57600080935093505050613634565b8803925060019150505b965096945050505050565b6000806000613651898988888861370d565b905061366186611845898b613977565b975087811015613678576000809250925050613634565b878103613686818688612fc5565b9050670de0b6b3a764000081106136b3576136ac6135ee670de0b6b3a76400008961294d565b90506136cb565b6136c86135ee670de0b6b3a7640000896127aa565b90505b6136d5818661294d565b9050808a10156136ed57600080935093505050613634565b90980398600198509650505050505050565b60606106988383600061373c565b600061371985856128e2565b61373261372a86611845868b61264c565b859085612fc5565b6124f99190613977565b6060814710156137615760405163cd78605960e01b8152306004820152602401613086565b600080856001600160a01b0316848660405161377d9190613e49565b60006040518083038185875af1925050503d80600081146137ba576040519150601f19603f3d011682016040523d82523d6000602084013e6137bf565b606091505b50915091506124f98683836060826137df576137da82613826565b6114ab565b81511580156137f657506001600160a01b0384163b155b1561381f57604051639996b31560e01b81526001600160a01b0385166004820152602401613086565b50806114ab565b8051156138365780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806138636138a1565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561391857600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561394457600080fd5b85016060818803121561395657600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069b5761069b613961565b6001600160a01b03811681146105ab57600080fd5b6000602082840312156139b157600080fd5b81356114ab8161398a565b80151581146105ab57600080fd5b6000602082840312156139dc57600080fd5b81356114ab816139bc565b6000808335601e198436030181126139fe57600080fd5b83018035915067ffffffffffffffff821115613a1957600080fd5b60200191503681900382131561067c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a8b60c083018486613a2e565b9998505050505050505050565b8181038181111561069b5761069b613961565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613ae560e083018486613a2e565b9a9950505050505050505050565b6001600160701b038181168382160190808211156127de576127de613961565b6001600160801b038181168382160190808211156127de576127de613961565b81810360008312801583831316838312821617156127de576127de613961565b600060208284031215613b6557600080fd5b81516114ab8161398a565b808202811582820484141761069b5761069b613961565b6001600160801b038281168282160390808211156127de576127de613961565b8082018281126000831280158216821582161715613bc757613bc7613961565b505092915050565b600060208284031215613be157600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613c0d57613c0d613be8565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069b5761069b613961565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613cd1828551613c3f565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613d4657600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d6c57613d6c613961565b5060000390565b610180810161069b8284613c3f565b60008060408385031215613d9557600080fd5b825191506020830151613da7816139bc565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613dd757613dd7613be8565b600160ff1b821460001984141615613df157613df1613961565b500590565b60008060008060808587031215613e0c57600080fd5b8451935060208501519250604085015191506060850151613956816139bc565b600060208284031215613e3e57600080fd5b81516114ab816139bc565b6000825160005b81811015613e6a5760208186018101518583015201613e50565b50600092019182525091905056fea2646970667358221220cf485c2255af9ee589128efbe7cc36c250a65a6364231d8f9a9518d8d6d850cb64736f6c63430008160033a26469706673582212207e34769bdee11e76ee3b76e5166148e6228e8036730d13b5ee9f79b14c44dc3164736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = CornTarget2DeployerContractFunctions(corntarget2deployer_abi, self.w3, address)  # type: ignore

    functions: CornTarget2DeployerContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        cornSilo: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        CornConversions: CornConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "CornConversions": "__$5682da3f97efd8f880c10f145969e15691$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, cornSilo: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["CornConversions"],
                link_references.CornConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(dataclass_to_tuple(cornSilo))

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = CornTarget2DeployerContractFunctions(
            corntarget2deployer_abi, w3, None
        )

        return contract
