"""A web3.py Contract class for the StkWellHyperdriveInstanceTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.46.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    check_txn_receipt,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    handle_contract_logic_error,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from ..StkWellConversions import StkWellConversionsContract
from .StkWellHyperdriveInstanceTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}


class StkWellHyperdriveInstanceTestIS_TESTContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestIS_TESTContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestIS_TESTContractFunction0._type_signature: StkWellHyperdriveInstanceTestIS_TESTContractFunction0.factory(
                "StkWellHyperdriveInstanceTestIS_TESTContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestCreateUserContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> StkWellHyperdriveInstanceTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestCreateUserContractFunction0._type_signature: StkWellHyperdriveInstanceTestCreateUserContractFunction0.factory(
                "StkWellHyperdriveInstanceTestCreateUserContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction0._type_signature: StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestExcludeContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestExcludeContractsContractFunction0._type_signature: StkWellHyperdriveInstanceTestExcludeContractsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestExcludeContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestExcludeSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestExcludeSendersContractFunction0._type_signature: StkWellHyperdriveInstanceTestExcludeSendersContractFunction0.factory(
                "StkWellHyperdriveInstanceTestExcludeSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestFailedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestFailedContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestFailedContractFunction0._type_signature: StkWellHyperdriveInstanceTestFailedContractFunction0.factory(
                "StkWellHyperdriveInstanceTestFailedContractFunction0", **kwargs
            ),
        }
        return out


class StkWellHyperdriveInstanceTestSetUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestSetUpContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestSetUpContractFunction0._type_signature: StkWellHyperdriveInstanceTestSetUpContractFunction0.factory(
                "StkWellHyperdriveInstanceTestSetUpContractFunction0", **kwargs
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetArtifactsContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetArtifactsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetContractsContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetContractsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetInterfacesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetInterfacesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetInterfacesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetInterfacesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetSelectorsContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetSelectorsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTargetSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTargetSendersContractFunction0._type_signature: StkWellHyperdriveInstanceTestTargetSendersContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTargetSendersContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase() method."""

    _function_name = "test__deployAndInitialize__asBase"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares() method."""

    _function_name = "test__deployAndInitialize__asShares"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__kindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__kind() method."""

    _function_name = "test__kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__kindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__kindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__kindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__kindContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__kindContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__kindContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__nameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__name() method."""

    _function_name = "test__name"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__nameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__nameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__nameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__nameContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__nameContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__nameContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare(int) method."""

    _function_name = "test__pricePerVaultShare"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__pricePerVaultShare"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__rewardsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__rewards() method."""

    _function_name = "test__rewards"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__rewardsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__rewards method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__rewards"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__rewardsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__rewardsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__rewardsContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__rewardsContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__rewardsContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest__versionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__version() method."""

    _function_name = "test__version"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest__versionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test__version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest__versionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest__versionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest__versionContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest__versionContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest__versionContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base(int,int) method."""

    _function_name = "test_close_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares(int,int) method."""

    _function_name = "test_close_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base(int,int) method."""

    _function_name = "test_close_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares(int,int) method."""

    _function_name = "test_close_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_gettersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_getters() method."""

    _function_name = "test_getters"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_gettersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_getters method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_getters"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest_gettersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_gettersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_gettersContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_gettersContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_gettersContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base(int) method."""

    _function_name = "test_open_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth() method."""

    _function_name = "test_open_long_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares(int) method."""

    _function_name = "test_open_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base(int) method."""

    _function_name = "test_open_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth() method."""

    _function_name = "test_open_short_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares(int) method."""

    _function_name = "test_open_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int) -> StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int) -> StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep() method."""

    _function_name = "test_sweep_failure_directSweep"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_directSweep"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestTest_sweep_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success() method."""

    _function_name = "test_sweep_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestTest_sweep_successContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StkWellHyperdriveInstanceTestTest_sweep_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestTest_sweep_successContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestTest_sweep_successContractFunction0._type_signature: StkWellHyperdriveInstanceTestTest_sweep_successContractFunction0.factory(
                "StkWellHyperdriveInstanceTestTest_sweep_successContractFunction0",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=StkWellHyperdriveInstanceTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class StkWellHyperdriveInstanceTestWhaleTransferContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> StkWellHyperdriveInstanceTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> StkWellHyperdriveInstanceTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StkWellHyperdriveInstanceTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            StkWellHyperdriveInstanceTestWhaleTransferContractFunction0._type_signature: StkWellHyperdriveInstanceTestWhaleTransferContractFunction0.factory(
                "StkWellHyperdriveInstanceTestWhaleTransferContractFunction0",
                **kwargs,
            ),
            StkWellHyperdriveInstanceTestWhaleTransferContractFunction1._type_signature: StkWellHyperdriveInstanceTestWhaleTransferContractFunction1.factory(
                "StkWellHyperdriveInstanceTestWhaleTransferContractFunction1",
                **kwargs,
            ),
        }
        return out


class StkWellHyperdriveInstanceTestContractFunctions(ContractFunctions):
    """ContractFunctions for the StkWellHyperdriveInstanceTest contract."""

    IS_TEST: StkWellHyperdriveInstanceTestIS_TESTContractFunction

    createUser: StkWellHyperdriveInstanceTestCreateUserContractFunction

    excludeArtifacts: (
        StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction
    )

    excludeContracts: (
        StkWellHyperdriveInstanceTestExcludeContractsContractFunction
    )

    excludeSenders: StkWellHyperdriveInstanceTestExcludeSendersContractFunction

    failed: StkWellHyperdriveInstanceTestFailedContractFunction

    setUp: StkWellHyperdriveInstanceTestSetUpContractFunction

    targetArtifactSelectors: (
        StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: (
        StkWellHyperdriveInstanceTestTargetArtifactsContractFunction
    )

    targetContracts: (
        StkWellHyperdriveInstanceTestTargetContractsContractFunction
    )

    targetInterfaces: (
        StkWellHyperdriveInstanceTestTargetInterfacesContractFunction
    )

    targetSelectors: (
        StkWellHyperdriveInstanceTestTargetSelectorsContractFunction
    )

    targetSenders: StkWellHyperdriveInstanceTestTargetSendersContractFunction

    test__deployAndInitialize__asBase: StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction

    test__deployAndInitialize__asShares: StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction

    test__kind: StkWellHyperdriveInstanceTestTest__kindContractFunction

    test__name: StkWellHyperdriveInstanceTestTest__nameContractFunction

    test__pricePerVaultShare: (
        StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction
    )

    test__rewards: StkWellHyperdriveInstanceTestTest__rewardsContractFunction

    test__version: StkWellHyperdriveInstanceTestTest__versionContractFunction

    test_close_long_with_base: (
        StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction
    )

    test_close_long_with_shares: (
        StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction
    )

    test_close_short_with_base: (
        StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction
    )

    test_close_short_with_shares: StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction

    test_getters: StkWellHyperdriveInstanceTestTest_gettersContractFunction

    test_open_long_with_base: (
        StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction
    )

    test_open_long_with_eth: (
        StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction
    )

    test_open_long_with_shares: (
        StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction
    )

    test_open_short_with_base: (
        StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction
    )

    test_open_short_with_eth: (
        StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction
    )

    test_open_short_with_shares: (
        StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction
    )

    test_round_trip_long_instantaneous_with_base: StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction

    test_round_trip_long_instantaneous_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction

    test_round_trip_long_maturity_with_base: StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction

    test_round_trip_long_maturity_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction

    test_round_trip_lp_instantaneous_with_base: StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction

    test_round_trip_lp_instantaneous_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction

    test_round_trip_lp_withdrawal_shares_with_base: StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction

    test_round_trip_lp_withdrawal_shares_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction

    test_round_trip_short_instantaneous_with_base: StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction

    test_round_trip_short_instantaneous_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction

    test_round_trip_short_maturity_with_base: StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction

    test_round_trip_short_maturity_with_shares: StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction

    test_sweep_failure_directSweep: StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction

    test_sweep_success: (
        StkWellHyperdriveInstanceTestTest_sweep_successContractFunction
    )

    whaleTransfer: StkWellHyperdriveInstanceTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = (
            StkWellHyperdriveInstanceTestIS_TESTContractFunction.factory(
                "IS_TEST",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="IS_TEST",
            )
        )
        self.createUser = (
            StkWellHyperdriveInstanceTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = StkWellHyperdriveInstanceTestExcludeArtifactsContractFunction.factory(
            "excludeArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeArtifacts",
        )
        self.excludeContracts = StkWellHyperdriveInstanceTestExcludeContractsContractFunction.factory(
            "excludeContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeContracts",
        )
        self.excludeSenders = (
            StkWellHyperdriveInstanceTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeSenders",
            )
        )
        self.failed = (
            StkWellHyperdriveInstanceTestFailedContractFunction.factory(
                "failed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="failed",
            )
        )
        self.setUp = StkWellHyperdriveInstanceTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = StkWellHyperdriveInstanceTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = StkWellHyperdriveInstanceTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = StkWellHyperdriveInstanceTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = StkWellHyperdriveInstanceTestTargetInterfacesContractFunction.factory(
            "targetInterfaces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetInterfaces",
        )
        self.targetSelectors = StkWellHyperdriveInstanceTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = (
            StkWellHyperdriveInstanceTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test__deployAndInitialize__asBase = StkWellHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction.factory(
            "test__deployAndInitialize__asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asBase",
        )
        self.test__deployAndInitialize__asShares = StkWellHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction.factory(
            "test__deployAndInitialize__asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asShares",
        )
        self.test__kind = (
            StkWellHyperdriveInstanceTestTest__kindContractFunction.factory(
                "test__kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__kind",
            )
        )
        self.test__name = (
            StkWellHyperdriveInstanceTestTest__nameContractFunction.factory(
                "test__name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__name",
            )
        )
        self.test__pricePerVaultShare = StkWellHyperdriveInstanceTestTest__pricePerVaultShareContractFunction.factory(
            "test__pricePerVaultShare",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__pricePerVaultShare",
        )
        self.test__rewards = (
            StkWellHyperdriveInstanceTestTest__rewardsContractFunction.factory(
                "test__rewards",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__rewards",
            )
        )
        self.test__version = (
            StkWellHyperdriveInstanceTestTest__versionContractFunction.factory(
                "test__version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__version",
            )
        )
        self.test_close_long_with_base = StkWellHyperdriveInstanceTestTest_close_long_with_baseContractFunction.factory(
            "test_close_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_base",
        )
        self.test_close_long_with_shares = StkWellHyperdriveInstanceTestTest_close_long_with_sharesContractFunction.factory(
            "test_close_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_shares",
        )
        self.test_close_short_with_base = StkWellHyperdriveInstanceTestTest_close_short_with_baseContractFunction.factory(
            "test_close_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_base",
        )
        self.test_close_short_with_shares = StkWellHyperdriveInstanceTestTest_close_short_with_sharesContractFunction.factory(
            "test_close_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_shares",
        )
        self.test_getters = (
            StkWellHyperdriveInstanceTestTest_gettersContractFunction.factory(
                "test_getters",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_getters",
            )
        )
        self.test_open_long_with_base = StkWellHyperdriveInstanceTestTest_open_long_with_baseContractFunction.factory(
            "test_open_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_base",
        )
        self.test_open_long_with_eth = StkWellHyperdriveInstanceTestTest_open_long_with_ethContractFunction.factory(
            "test_open_long_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_eth",
        )
        self.test_open_long_with_shares = StkWellHyperdriveInstanceTestTest_open_long_with_sharesContractFunction.factory(
            "test_open_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_shares",
        )
        self.test_open_short_with_base = StkWellHyperdriveInstanceTestTest_open_short_with_baseContractFunction.factory(
            "test_open_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_base",
        )
        self.test_open_short_with_eth = StkWellHyperdriveInstanceTestTest_open_short_with_ethContractFunction.factory(
            "test_open_short_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_eth",
        )
        self.test_open_short_with_shares = StkWellHyperdriveInstanceTestTest_open_short_with_sharesContractFunction.factory(
            "test_open_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_shares",
        )
        self.test_round_trip_long_instantaneous_with_base = StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_long_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_base",
        )
        self.test_round_trip_long_instantaneous_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_long_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_shares",
        )
        self.test_round_trip_long_maturity_with_base = StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction.factory(
            "test_round_trip_long_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_base",
        )
        self.test_round_trip_long_maturity_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction.factory(
            "test_round_trip_long_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_shares",
        )
        self.test_round_trip_lp_instantaneous_with_base = StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_base",
        )
        self.test_round_trip_lp_instantaneous_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_shares",
        )
        self.test_round_trip_lp_withdrawal_shares_with_base = StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_base",
        )
        self.test_round_trip_lp_withdrawal_shares_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_shares",
        )
        self.test_round_trip_short_instantaneous_with_base = StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_short_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_base",
        )
        self.test_round_trip_short_instantaneous_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_short_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_shares",
        )
        self.test_round_trip_short_maturity_with_base = StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction.factory(
            "test_round_trip_short_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_base",
        )
        self.test_round_trip_short_maturity_with_shares = StkWellHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction.factory(
            "test_round_trip_short_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_shares",
        )
        self.test_sweep_failure_directSweep = StkWellHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction.factory(
            "test_sweep_failure_directSweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_directSweep",
        )
        self.test_sweep_success = StkWellHyperdriveInstanceTestTest_sweep_successContractFunction.factory(
            "test_sweep_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_success",
        )
        self.whaleTransfer = (
            StkWellHyperdriveInstanceTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class StkWellHyperdriveInstanceTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestCollectGovernanceFeeContractEvent(
    ContractEvent
):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestPauseStatusUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent(
    ContractEvent
):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_addressContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_bytes32ContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_decimal_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_decimal_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StkWellHyperdriveInstanceTestContractEvents(ContractEvents):
    """ContractEvents for the StkWellHyperdriveInstanceTest contract."""

    AddLiquidity: Type[StkWellHyperdriveInstanceTestAddLiquidityContractEvent]

    Approval: Type[StkWellHyperdriveInstanceTestApprovalContractEvent]

    ApprovalForAll: Type[
        StkWellHyperdriveInstanceTestApprovalForAllContractEvent
    ]

    CloseLong: Type[StkWellHyperdriveInstanceTestCloseLongContractEvent]

    CloseShort: Type[StkWellHyperdriveInstanceTestCloseShortContractEvent]

    CollectGovernanceFee: Type[
        StkWellHyperdriveInstanceTestCollectGovernanceFeeContractEvent
    ]

    CreateCheckpoint: Type[
        StkWellHyperdriveInstanceTestCreateCheckpointContractEvent
    ]

    Deployed: Type[StkWellHyperdriveInstanceTestDeployedContractEvent]

    Initialize: Type[StkWellHyperdriveInstanceTestInitializeContractEvent]

    OpenLong: Type[StkWellHyperdriveInstanceTestOpenLongContractEvent]

    OpenShort: Type[StkWellHyperdriveInstanceTestOpenShortContractEvent]

    PauseStatusUpdated: Type[
        StkWellHyperdriveInstanceTestPauseStatusUpdatedContractEvent
    ]

    RedeemWithdrawalShares: Type[
        StkWellHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent
    ]

    RemoveLiquidity: Type[
        StkWellHyperdriveInstanceTestRemoveLiquidityContractEvent
    ]

    Sweep: Type[StkWellHyperdriveInstanceTestSweepContractEvent]

    TransferSingle: Type[
        StkWellHyperdriveInstanceTestTransferSingleContractEvent
    ]

    log: Type[StkWellHyperdriveInstanceTestLogContractEvent]

    log_address: Type[StkWellHyperdriveInstanceTestLog_addressContractEvent]

    log_array: Type[StkWellHyperdriveInstanceTestLog_arrayContractEvent]

    log_bytes: Type[StkWellHyperdriveInstanceTestLog_bytesContractEvent]

    log_bytes32: Type[StkWellHyperdriveInstanceTestLog_bytes32ContractEvent]

    log_int: Type[StkWellHyperdriveInstanceTestLog_intContractEvent]

    log_named_address: Type[
        StkWellHyperdriveInstanceTestLog_named_addressContractEvent
    ]

    log_named_array: Type[
        StkWellHyperdriveInstanceTestLog_named_arrayContractEvent
    ]

    log_named_bytes: Type[
        StkWellHyperdriveInstanceTestLog_named_bytesContractEvent
    ]

    log_named_bytes32: Type[
        StkWellHyperdriveInstanceTestLog_named_bytes32ContractEvent
    ]

    log_named_decimal_int: Type[
        StkWellHyperdriveInstanceTestLog_named_decimal_intContractEvent
    ]

    log_named_decimal_uint: Type[
        StkWellHyperdriveInstanceTestLog_named_decimal_uintContractEvent
    ]

    log_named_int: Type[StkWellHyperdriveInstanceTestLog_named_intContractEvent]

    log_named_string: Type[
        StkWellHyperdriveInstanceTestLog_named_stringContractEvent
    ]

    log_named_uint: Type[
        StkWellHyperdriveInstanceTestLog_named_uintContractEvent
    ]

    log_string: Type[StkWellHyperdriveInstanceTestLog_stringContractEvent]

    log_uint: Type[StkWellHyperdriveInstanceTestLog_uintContractEvent]

    logs: Type[StkWellHyperdriveInstanceTestLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[StkWellHyperdriveInstanceTestAddLiquidityContractEvent],
            StkWellHyperdriveInstanceTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[StkWellHyperdriveInstanceTestApprovalContractEvent],
            StkWellHyperdriveInstanceTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[StkWellHyperdriveInstanceTestApprovalForAllContractEvent],
            StkWellHyperdriveInstanceTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[StkWellHyperdriveInstanceTestCloseLongContractEvent],
            StkWellHyperdriveInstanceTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[StkWellHyperdriveInstanceTestCloseShortContractEvent],
            StkWellHyperdriveInstanceTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[
                StkWellHyperdriveInstanceTestCollectGovernanceFeeContractEvent
            ],
            StkWellHyperdriveInstanceTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[StkWellHyperdriveInstanceTestCreateCheckpointContractEvent],
            StkWellHyperdriveInstanceTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            Type[StkWellHyperdriveInstanceTestDeployedContractEvent],
            StkWellHyperdriveInstanceTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            Type[StkWellHyperdriveInstanceTestInitializeContractEvent],
            StkWellHyperdriveInstanceTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[StkWellHyperdriveInstanceTestOpenLongContractEvent],
            StkWellHyperdriveInstanceTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[StkWellHyperdriveInstanceTestOpenShortContractEvent],
            StkWellHyperdriveInstanceTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[StkWellHyperdriveInstanceTestPauseStatusUpdatedContractEvent],
            StkWellHyperdriveInstanceTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[
                StkWellHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent
            ],
            StkWellHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[StkWellHyperdriveInstanceTestRemoveLiquidityContractEvent],
            StkWellHyperdriveInstanceTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[StkWellHyperdriveInstanceTestSweepContractEvent],
            StkWellHyperdriveInstanceTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[StkWellHyperdriveInstanceTestTransferSingleContractEvent],
            StkWellHyperdriveInstanceTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[StkWellHyperdriveInstanceTestLogContractEvent],
            StkWellHyperdriveInstanceTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[StkWellHyperdriveInstanceTestLog_addressContractEvent],
            StkWellHyperdriveInstanceTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[StkWellHyperdriveInstanceTestLog_arrayContractEvent],
            StkWellHyperdriveInstanceTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[StkWellHyperdriveInstanceTestLog_bytesContractEvent],
            StkWellHyperdriveInstanceTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[StkWellHyperdriveInstanceTestLog_bytes32ContractEvent],
            StkWellHyperdriveInstanceTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[StkWellHyperdriveInstanceTestLog_intContractEvent],
            StkWellHyperdriveInstanceTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_addressContractEvent],
            StkWellHyperdriveInstanceTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_arrayContractEvent],
            StkWellHyperdriveInstanceTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_bytesContractEvent],
            StkWellHyperdriveInstanceTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_bytes32ContractEvent],
            StkWellHyperdriveInstanceTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[
                StkWellHyperdriveInstanceTestLog_named_decimal_intContractEvent
            ],
            StkWellHyperdriveInstanceTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[
                StkWellHyperdriveInstanceTestLog_named_decimal_uintContractEvent
            ],
            StkWellHyperdriveInstanceTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_intContractEvent],
            StkWellHyperdriveInstanceTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_stringContractEvent],
            StkWellHyperdriveInstanceTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[StkWellHyperdriveInstanceTestLog_named_uintContractEvent],
            StkWellHyperdriveInstanceTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[StkWellHyperdriveInstanceTestLog_stringContractEvent],
            StkWellHyperdriveInstanceTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[StkWellHyperdriveInstanceTestLog_uintContractEvent],
            StkWellHyperdriveInstanceTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[StkWellHyperdriveInstanceTestLogsContractEvent],
            StkWellHyperdriveInstanceTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


stkwellhyperdriveinstancetest_abi: ABI = cast(
    ABI,
    [
        {"type": "constructor", "inputs": [], "stateMutability": "nonpayable"},
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__kind",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__name",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__pricePerVaultShare",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__rewards",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__version",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_close_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_getters",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_open_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_directSweep",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class StkWellHyperdriveInstanceTestExpInvalidExponentContractError(
    PypechainBaseError
):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestInsufficientLiquidityContractError(
    PypechainBaseError
):
    """ContractError for InsufficientLiquidity."""

    # Error name
    name: str = "InsufficientLiquidity"
    # 4 byte error selector
    selector: str = "0xbb55fd27"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientLiquidity()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestInvalidTimestampContractError(
    PypechainBaseError
):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestLnInvalidInputContractError(
    PypechainBaseError
):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestUnsafeCastToInt256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestUnsafeCastToUint256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToUint256."""

    # Error name
    name: str = "UnsafeCastToUint256"
    # 4 byte error selector
    selector: str = "0xe3a26e20"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint256()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestUnsupportedTokenContractError(
    PypechainBaseError
):
    """ContractError for UnsupportedToken."""

    # Error name
    name: str = "UnsupportedToken"
    # 4 byte error selector
    selector: str = "0x6a172882"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsupportedToken()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestWhaleIsContractContractError(
    PypechainBaseError
):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = stkwellhyperdriveinstancetest_abi


class StkWellHyperdriveInstanceTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the StkWellHyperdriveInstanceTest contract."""

    ExpInvalidExponent: (
        StkWellHyperdriveInstanceTestExpInvalidExponentContractError
    )

    InsufficientLiquidity: (
        StkWellHyperdriveInstanceTestInsufficientLiquidityContractError
    )

    InvalidTimestamp: StkWellHyperdriveInstanceTestInvalidTimestampContractError

    LnInvalidInput: StkWellHyperdriveInstanceTestLnInvalidInputContractError

    UnsafeCastToInt256: (
        StkWellHyperdriveInstanceTestUnsafeCastToInt256ContractError
    )

    UnsafeCastToUint256: (
        StkWellHyperdriveInstanceTestUnsafeCastToUint256ContractError
    )

    UnsupportedToken: StkWellHyperdriveInstanceTestUnsupportedTokenContractError

    WhaleBalanceExceeded: (
        StkWellHyperdriveInstanceTestWhaleBalanceExceededContractError
    )

    WhaleIsContract: StkWellHyperdriveInstanceTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            StkWellHyperdriveInstanceTestExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            StkWellHyperdriveInstanceTestInsufficientLiquidityContractError()
        )
        self.InvalidTimestamp = (
            StkWellHyperdriveInstanceTestInvalidTimestampContractError()
        )
        self.LnInvalidInput = (
            StkWellHyperdriveInstanceTestLnInvalidInputContractError()
        )
        self.UnsafeCastToInt256 = (
            StkWellHyperdriveInstanceTestUnsafeCastToInt256ContractError()
        )
        self.UnsafeCastToUint256 = (
            StkWellHyperdriveInstanceTestUnsafeCastToUint256ContractError()
        )
        self.UnsupportedToken = (
            StkWellHyperdriveInstanceTestUnsupportedTokenContractError()
        )
        self.WhaleBalanceExceeded = (
            StkWellHyperdriveInstanceTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            StkWellHyperdriveInstanceTestWhaleIsContractContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint256,
            self.UnsupportedToken,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class StkWellHyperdriveInstanceTestContract(Contract):
    """A web3.py Contract class for the StkWellHyperdriveInstanceTest contract."""

    abi: ABI = stkwellhyperdriveinstancetest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60a06040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b9052602060a452601060c4526f105490925514955357d49410d7d5549360821b60e4526000805160206204fa6583398151915263f877cb19610104600060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ae919081019062000b1f565b602c90620000bd908262000c85565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b60448201526000805160206204fa658339815191529063f877cb1990606401600060405180830381865afa15801562000126573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000150919081019062000b1f565b602d906200015f908262000c85565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c00000000000000000000000060448201526000805160206204fa658339815191529063f877cb1990606401600060405180830381865afa158015620001d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000203919081019062000b1f565b602e9062000212908262000c85565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b60448201526000805160206204fa658339815191529063f877cb1990606401600060405180830381865afa1580156200027c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a6919081019062000b1f565b602f90620002b5908262000c85565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b60448201526000805160206204fa658339815191529063f877cb1990606401600060405180830381865afa15801562000321573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034b919081019062000b1f565b6030906200035a908262000c85565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b60448201526000805160206204fa658339815191529063f877cb1990606401600060405180830381865afa158015620003c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003f0919081019062000b1f565b603190620003ff908262000c85565b50603580546001600160a01b0319908116909155607580547389d0f320ac73dd7d9513ffc5bc58d1161452a65792168217905560408051602081019091529081526200045090607690600162000a88565b50607780546001600160a01b031916735e564c1905fff9724621542f58d61be0405c487990811790915560408051602081019091529081526200049890607890600162000a88565b50348015620004a657600080fd5b506040805161058081018252600a6105408201908152694879706572647269766560b01b610560830152815281518083018352601181527053746b57656c6c4879706572647269766560781b60208281019190915280830191909152601282840152607680548451818402810184019095528085529293606085019390928301828280156200055f57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000540575b505050505081526020016078805480602002602001604051908101604052809291908181526020018280548015620005c157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620005a2575b5050505050815260200173a88594d404727625a9437c3f886c7643872296ae6001600160a01b0316815260200173e66e3a37c3274ac24fe8590f7d84a2427194dc176001600160a01b031681526020016000815260200166038d7ea4c68000815260200166038d7ea4c6800081526020016040518060800160405280600081526020016000815260200160008152602001600081525081526020016301e133808152602001600115158152602001600115158152602001600015158152602001600115158152602001636a17288260e01b604051602401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505081526020016000151581526020016000151581526020016002815260200160028152602001600281526020016103e881526020016103e881526020016298968081526020016298968081526020016103e8815260200161271081526020016103e881526020016127108152602001606481526020016103e88152602001606481526020016103e881526020016103e881526020016103e881526020016103e881526020016103e881526020016103e881526020016103e881526020016002815260200160038152508060386000820151816000019081620007ad919062000c85565b5060208201516001820190620007c4908262000c85565b50604082015160028201805460ff191660ff90921691909117905560608201518051620007fc91600384019160209091019062000a88565b50608082015180516200081a91600484019160209091019062000a88565b5060a08201516005820180546001600160a01b039283166001600160a01b03199182161790915560c084015160068401805491909316911617905560e0820151600782015561010080830151600883015561012083015160098301556101408301518051600a8401556020810151600b8401556040810151600c84015560600151600d830155610160830151600e830155610180830151600f830180546101a08601516101c08701516101e0880151151563010000000263ff0000001991151562010000029190911663ffff00001992151590960261ff00199515159590951661ffff199093169290921793909317929092169290921717905561020082015160108201906200092b908262000c85565b5061022082015160118201805461024085015115156101000261ff00199315159390931661ffff1990911617919091179055610260820151601282015561028082015160138201556102a082015160148201556102c082015160158201556102e08201516016820155610300820151601782015561032082015160188201556103408201516019820155610360820151601a820155610380820151601b8201556103a0820151601c8201556103c0820151601d8201556103e0820151601e820155610400820151601f82015561042082015160208201556104408201516021820155610460820151602282015561048082015160238201556104a082015160248201556104c082015160258201556104e0820151602682015561050082015160278201556105209091015160289091015550603d546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1460805262000d51565b82805482825590600052602060002090810192821562000ae0579160200282015b8281111562000ae057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000aa9565b5062000aee92915062000af2565b5090565b5b8082111562000aee576000815560010162000af3565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121562000b3357600080fd5b82516001600160401b038082111562000b4b57600080fd5b818501915085601f83011262000b6057600080fd5b81518181111562000b755762000b7562000b09565b604051601f8201601f19908116603f0116810190838211818310171562000ba05762000ba062000b09565b81604052828152888684870101111562000bb957600080fd5b600093505b8284101562000bdd578484018601518185018701529285019262000bbe565b600086848301015280965050505050505092915050565b600181811c9082168062000c0957607f821691505b60208210810362000c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000c80576000816000526020600020601f850160051c8101602086101562000c5b5750805b601f850160051c820191505b8181101562000c7c5782815560010162000c67565b5050505b505050565b81516001600160401b0381111562000ca15762000ca162000b09565b62000cb98162000cb2845462000bf4565b8462000c30565b602080601f83116001811462000cf1576000841562000cd85750858301515b600019600386901b1c1916600185901b17855562000c7c565b600085815260208120601f198616915b8281101562000d225788860151825594840194600190910190840162000d01565b508582101562000d415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516204ec7862000ded60003960008181610876015281816109c80152818161158c01528181611bb50152818161304a0152818161317d015281816154b4015281816155490152818161567c01528181617ec20152818161855a01528181619326015281816193b201528181619f2e0152818161a0e90152818161a22d0152818161a39c0152818161b0f6015261b76601526204ec786000f3fe60806040523480156200001157600080fd5b5060043610620002cd5760003560e01c8063838c573e1162000185578063ac948f4511620000df578063bd553e441162000092578063bd553e4414620005eb578063cdbfca291462000602578063e20c9f711462000619578063e7686d381462000623578063f502acad146200063a578063fa7626d4146200065157600080fd5b8063ac948f451462000577578063af5e60c4146200058e578063b22f6be914620005a5578063b5508aa914620005bc578063b75837d914620005c6578063ba414fa614620005d057600080fd5b8063942d20e21162000138578063942d20e21462000507578063982f9c56146200051e578063a10c70341462000535578063a89a9ae2146200053f578063aa55594f1462000556578063abf4cef7146200056057600080fd5b8063838c573e14620004a257806385226c8114620004b957806385b2600114620004d2578063916a17c614620004e9578063938f9cda14620004f35780639428be5e14620004fd57600080fd5b80633f7286f4116200023757806366d9a9a011620001ea57806366d9a9a014620004305780636bbd2f3714620004495780636f3a66c7146200045357806372e78ccd146200046a578063731d599514620004815780637b09763e146200049857600080fd5b80633f7286f414620003a757806341631a7914620003b15780634570d0d614620003bb57806349ccc4ad14620003d2578063507ffba514620003e957806356f10452146200041957600080fd5b806324f5a0be116200029057806324f5a0be14620003425780632ade3880146200034c5780633c26039814620003655780633db13e72146200036f5780633e5e0d2614620003865780633e5e3c23146200039d57600080fd5b80630a9254e414620002d25780631071676014620002de5780631966d53714620003085780631ed7831c14620003125780632111c118146200032b575b600080fd5b620002dc6200065f565b005b620002f5620002ef366004620110e2565b620007c6565b6040519081526020015b60405180910390f35b620002dc62000850565b6200031c62000ee3565b604051620002ff91906201117b565b620002dc6200033c36600462011190565b62000f47565b620002dc6200151c565b62000356620019f7565b604051620002ff919062011207565b620002dc62001b45565b620002dc62000380366004620112cd565b62001f86565b620002f562000397366004620112e7565b620022e2565b6200031c6200253c565b6200031c6200259e565b620002dc62002600565b620002dc620003cc366004620112cd565b6200283a565b620002dc620003e3366004620112cd565b62002ca1565b62000400620003fa3660046201142b565b6200330d565b6040516001600160a01b039091168152602001620002ff565b620002dc6200042a366004620112cd565b6200341d565b6200043a6200386c565b604051620002ff9190620114b2565b620002dc62003956565b620002dc62000464366004620112cd565b62003dc0565b620002dc6200047b36600462011190565b620040dc565b620002dc6200049236600462011190565b6200453b565b620002dc62004ccc565b620002dc620004b336600462011190565b62004e7c565b620004c362005253565b604051620002ff91906201156b565b620002dc620004e3366004620112cd565b6200532d565b6200043a62005881565b620002dc6200596b565b620002dc62005d40565b620002dc62000518366004620112cd565b62005efe565b620002dc6200052f36600462011190565b620062b4565b620002dc62006900565b620002dc62000550366004620112cd565b620069ea565b620002dc62006ce0565b620002dc62000571366004620112cd565b62006df1565b620002dc6200058836600462011190565b62006f62565b620002dc6200059f36600462011190565b620074f4565b620002dc620005b6366004620112cd565b620078dc565b620004c362007cae565b620002dc62007d88565b620005da62007dfd565b6040519015158152602001620002ff565b620002dc620005fc366004620112cd565b62007eb2565b620002dc6200061336600462011190565b62008274565b6200031c620084e7565b620002dc6200063436600462011190565b62008549565b620002dc6200064b36600462011190565b62008c90565b601e54620005da9060ff1681565b604051630637469360e31b815263013db593906000906000805160206204ec03833981519152906331ba3498906200069d90602d9060040162011694565b6020604051808303816000875af1158015620006bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e39190620116a9565b604051639ebf682760e01b8152600481018290529091506000805160206204ec0383398151915290639ebf682790602401600060405180830381600087803b1580156200072f57600080fd5b505af115801562000744573d6000803e3d6000fd5b505060405163d9bbf3a160e01b8152600481018590526000805160206204ec03833981519152925063d9bbf3a19150602401600060405180830381600087803b1580156200079157600080fd5b505af1158015620007a6573d6000803e3d6000fd5b50506032805460ff1916600117905550620007c2905062008f9d565b5050565b6040516370a0823160e01b81526001600160a01b0380851660048301526000916200084691869186918216906370a0823190602401602060405180830381865afa15801562000819573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200083f9190620116a9565b85620022e2565b90505b9392505050565b601e546047546101009091046001600160a01b0316319060ff16620008725750565b60007f00000000000000000000000000000000000000000000000000000000000000006200095757603a546200094f90620008b29060ff16600a620117d6565b620008c0906103e8620117e7565b606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a08231906024015b602060405180830381865afa15801562000916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200093c9190620116a9565b62000948919062011817565b9062009ce1565b9050620009a0565b603a546200099d906200096f9060ff16600a620117d6565b6200097d906103e8620117e7565b601e546200094890600a9061010090046001600160a01b03163162011817565b90505b6000620009ad8262009cfd565b9050620009c663beefbabe63deadfade84600162009d78565b7f00000000000000000000000000000000000000000000000000000000000000001562000a1657601e5462000a169061010090046001600160a01b03163162000a1084866201182e565b6200a40a565b6036546040805163313ce56760e01b8152905162000a99926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a89919062011844565b603a5460ff91821691166200a40a565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262000c2e921690633656eec290604401602060405180830381865afa15801562000af7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b1d9190620116a9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000b72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b989190620118e4565b60a0015162000ba9906002620117e7565b6036546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562000bf3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c199190620116a9565b62000c2591906201182e565b603f546200a46e565b60365460408051630c048d9160e31b8152905162000cac926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca29190620119f7565b518260016200a46e565b60365460408051630c048d9160e31b8152905162000e2b926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562000cfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d209190620119f7565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562000d79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9f9190620118e4565b60a00151603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562000df8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e1e9190620119f7565b5162000a1091906201182e565b607454603654601e5460408051630161b2cb60e71b8152905162000ede946001600160a01b039081169481169361010090041691879166b1a2bc2ec5000091600191869163b0d96580916004808301926102609291908290030181865afa15801562000e9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec19190620118e4565b60a001516040805160008152602081019091525b603f546200a4d8565b505050565b6060601680548060200260200160405190810160405280929190818152602001828054801562000f3d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000f1e575b5050505050905090565b604754610100900460ff1662000f5b575050565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f592916200100a91849163b0d96580916004808301926102609291908290030181865afa15801562000fb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd99190620118e4565b60c0015162000fea906002620117e7565b60365462001001906001600160a01b03166200abfa565b8691906200ac09565b6040518263ffffffff1660e01b81526004016200102991815260200190565b602060405180830381865afa15801562001047573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200106d9190620116a9565b601f5490925060009081906200108e906001600160a01b031685836200ac95565b6049549193509150610100900460ff1615620010c357620010bb836000683635c9adc5dea000006200ac09565b9250620010c8565b600092505b60365460408051630161b2cb60e71b8152905162001148926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001116573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200113c9190620118e4565b6101000151846200ad39565b600080620011556200adf8565b601f54919350915060009062001174906001600160a01b03166200af01565b60365490915060009062001191906001600160a01b03166200af01565b6047549091506000906301000000900460ff1615620013b457601f54600090620011c7906001600160a01b03168989846200af61565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562001212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012389190620116a9565b9150620012fb826038601f0154620012e9603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200129e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012c49190620118e4565b6101e0015160200151620012e190670de0b6b3a76400006201182e565b8b906200afed565b620012f5919062011ab5565b6200b004565b620013ad82620013a4603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001359573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137f9190620118e4565b6101e00151602001516200139c90670de0b6b3a76400006201182e565b8a906200afed565b6058546200a46e565b50620014e5565b601f54620013cd906001600160a01b031688886200b03f565b905062001433816038601d0154620012e9603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001359573d6000803e3d6000fd5b620014e581620014dc603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001491573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b79190620118e4565b6101e0015160200151620014d490670de0b6b3a76400006201182e565b89906200afed565b6056546200a46e565b601f5460475462001511916001600160a01b03169083906301000000900460ff1615888888886200b073565b505050505050505050565b601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200157157600080fd5b505af115801562001586573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000008015620015ba575060475460ff165b156200177c57601f54603654604080516060810182526001600160a01b03938416808252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d92671bc16d674ec80000926200163792670de0b6b3a76400009291829160040162011b00565b604080518083038185885af115801562001655573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200167c919062011b27565b5050601f54620016a4906001600160a01b03163162000a10670de0b6b3a7640000846201182e565b50601f54603654604080516060810182526001600160a01b03938416808252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529031949093169263cba2e58d926706f05b59d3b20000926200171992670de0b6b3a76400009291829160040162011b00565b604080518083038185885af115801562001737573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200175e919062011b27565b5050601f5462001779906001600160a01b031631826200a40a565b50565b604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e090620017b790631574f9f360e01b9060040162011b4c565b600060405180830381600087803b158015620017d257600080fd5b505af1158015620017e7573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350671bc16d674ec80000926200185f92670de0b6b3a764000092909182919060040162011b00565b604080518083038185885af11580156200187d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620018a4919062011b27565b5050604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e090620018e190631574f9f360e01b9060040162011b4c565b600060405180830381600087803b158015620018fc57600080fd5b505af115801562001911573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063cba2e58d93506706f05b59d3b2000092670de0b6b3a764000092909182918101825b6040519080825280601f01601f1916602001820160405280156200198b576020820181803683370190505b508152506040518663ffffffff1660e01b8152600401620019b0949392919062011b00565b604080518083038185885af1158015620019ce573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620007c2919062011b27565b565b6060601d805480602002602001604051908101604052809291908181526020016000905b8282101562001b3c57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562001b2457838290600052602060002001805462001a9090620115d3565b80601f016020809104026020016040519081016040528092919081815260200182805462001abe90620115d3565b801562001b0f5780601f1062001ae35761010080835404028352916020019162001b0f565b820191906000526020600020905b81548152906001019060200180831162001af157829003601f168201915b50505050508152602001906001019062001a6e565b50505050815250508152602001906001019062001a1b565b50505050905090565b601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b15801562001b9a57600080fd5b505af115801562001baf573d6000803e3d6000fd5b505050507f0000000000000000000000000000000000000000000000000000000000000000801562001be3575060475460ff165b1562001da157601f54603654604080516060810182526001600160a01b039384168082526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529031949293929092169163dbbe807091671bc16d674ec800009162001c6491670de0b6b3a7640000918291889160040162011b00565b604080518083038185885af115801562001c82573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001ca9919062011b27565b601f5490925062001ccb91506001600160a01b03163162000a1083856201182e565b601f54603654604080516060810182526001600160a01b039384168082526000602080840182905284518281529081018552838501529251630dbbe80760e41b815290319650939092169263dbbe8070926706f05b59d3b200009262001d4192670de0b6b3a76400009283929160040162011b00565b604080518083038185885af115801562001d5f573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001d86919062011b27565b5050601f54620007c2906001600160a01b031631836200a40a565b604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062001ddc90631574f9f360e01b9060040162011b4c565b600060405180830381600087803b15801562001df757600080fd5b505af115801562001e0c573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526001602080840191909152835160008082529181018552838501529251630dbbe80760e41b81529316945063dbbe80709350671bc16d674ec800009262001e8192670de0b6b3a764000092839260040162011b00565b604080518083038185885af115801562001e9f573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001ec6919062011b27565b5050604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062001f0390631574f9f360e01b9060040162011b4c565b600060405180830381600087803b15801562001f1e57600080fd5b505af115801562001f33573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b0390811682526000602083018190529316945063dbbe807093506706f05b59d3b2000092670de0b6b3a76400009283929081018262001960565b604754610100900460ff1662001f995750565b60365460408051630161b2cb60e71b8152905162002114926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001fe7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200200d9190620118e4565b60c001516200201e906002620117e7565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa15801562002069573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200208f919062011b61565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015620020d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020ff9190620116a9565b6200210b919062011817565b8391906200ac09565b60495490915060ff161562002131576200212e8162009cfd565b90505b601f546000906200214d906001600160a01b031683836200b363565b90506000806200215c6200adf8565b601f5491935091506000906200217b906001600160a01b03166200af01565b60365490915060009062002198906001600160a01b03166200af01565b6047549091506000906301000000900460ff16156200226c57601f546000908190620021cf906001600160a01b031689836200b3fa565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200221d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022439190620116a9565b9250620022528160006200a40a565b62002264828a6038601601546200a46e565b5050620022ad565b601f5460009062002287906001600160a01b0316886200b47d565b9092509050620022998160006200a40a565b620022ab82896038601501546200a46e565b505b601f54604754620022d9916001600160a01b03169083906301000000900460ff1615888888886200b073565b50505050505050565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa1580156200232e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023549190620116a9565b905080841115620023785760405163188c93a560e31b815260040160405180910390fd5b6000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620023c657600080fd5b505af1158015620023db573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200243057600080fd5b505af115801562002445573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206204ec03833981519152925063c88a5e6d915062002487908990670de0b6b3a76400009060040162011b81565b600060405180830381600087803b158015620024a257600080fd5b505af1158015620024b7573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038816925063a9059cbb9150620024eb908690889060040162011b81565b6020604051808303816000875af11580156200250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002531919062011bab565b509295945050505050565b6060601880548060200260200160405190810160405280929190818152602001828054801562000f3d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f1e575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801562000f3d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f1e575050505050905090565b60365460408051630a4e149360e01b815290516000926001600160a01b031691630a4e14939160048083019260209291908290030181865afa1580156200264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002671919062011b61565b90506001600160a01b038116620026855750565b607354604080516310780f7360e01b815290516000805160206204ec03833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa158015620026e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200270d919062011b61565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156200274f57600080fd5b505af115801562002764573d6000803e3d6000fd5b5050604051630618f58760e51b81526000805160206204ec03833981519152925063c31eb0e09150620027a3906313dd85ff60e31b9060040162011b4c565b600060405180830381600087803b158015620027be57600080fd5b505af1158015620027d3573d6000803e3d6000fd5b505060365460405162b40d3160e11b81526001600160a01b03858116600483015290911692506301681a629150602401600060405180830381600087803b1580156200281e57600080fd5b505af115801562002833573d6000803e3d6000fd5b5050505050565b604754610100900460ff166200284d5750565b60365460408051630161b2cb60e71b81529051620028e9926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200289b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028c19190620118e4565b60c00151620028d2906002620117e7565b6036546200210b906001600160a01b03166200b4bd565b601f5490915060009081906200290a906001600160a01b031684836200b4cc565b915091506000806200291b6200adf8565b601f5491935091506000906200293a906001600160a01b03166200af01565b60365490915060009062002957906001600160a01b03166200af01565b6047549091506000906301000000900460ff161562002ac057601f546000906200298d906001600160a01b0316898b846200b562565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620029d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029fe9190620116a9565b915062002a1e816038602301548962002a18919062011ab5565b6200b5e5565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002a73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a999190620118e4565b6101e001515160000362002ab95762002ab981886038602401546200a46e565b5062002c6b565b601f5462002ad9906001600160a01b0316888a6200b620565b60595460365460405163b88fed9f60e01b8152600481018a905292935062002b62928492916001600160a01b03169063b88fed9f906024015b602060405180830381865afa15801562002b30573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b569190620116a9565b62002a18919062011ab5565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002bb7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bdd9190620118e4565b6101e001515160000362002c6b5760365460405163b88fed9f60e01b81526004810188905262002c6b9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562002c3c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c629190620116a9565b605a546200a46e565b601f5460475462002c97916001600160a01b03169083906301000000900460ff1615888888886200b073565b5050505050505050565b60008062002cae6200adf8565b601f54919350915060009062002ccd906001600160a01b03166200af01565b60365490915060009062002cea906001600160a01b03166200af01565b905062002d9c603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562002d45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d6b9190620118e4565b60c0015162002d7c906002620117e7565b60365462002d93906001600160a01b03166200abfa565b8791906200ac09565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b15801562002df457600080fd5b505af115801562002e09573d6000803e3d6000fd5b505060475460ff16915062003048905057604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062002e5590631574f9f360e01b9060040162011b4c565b600060405180830381600087803b15801562002e7057600080fd5b505af115801562002e85573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d9350899262002eed928492909182919060040162011b00565b604080518083038185885af115801562002f0b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062002f32919062011b27565b5050604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062002f6f9063350b944160e11b9060040162011b4c565b600060405180830381600087803b15801562002f8a57600080fd5b505af115801562002f9f573d6000803e3d6000fd5b505060365460408051606081018252601f546001600160a01b039081168252600160208084019190915283516000808252918101855283850152925163cba2e58d60e01b81529316945063cba2e58d935062003003928a9291829160040162011b00565b60408051808303816000875af115801562003022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022d9919062011b27565b7f00000000000000000000000000000000000000000000000000000000000000006200316557603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015620030c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030e8919062011b61565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200311d92911690899060040162011b81565b6020604051808303816000875af11580156200313d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003163919062011bab565b505b60365460009081906001600160a01b031663cba2e58d7f0000000000000000000000000000000000000000000000000000000000000000620031a9576000620031ab565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b16815262003206928d92909182919060040162011b00565b604080518083038185885af115801562003224573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200324b919062011b27565b6036549193509150620032ef906001600160a01b0316633656eec2620032736001866200b654565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b031660248201526044015b602060405180830381865afa158015620032c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620032e89190620116a9565b826200a40a565b601f54620022d9906001600160a01b0316886001898989896200b68a565b60008160405160200162003322919062011bc9565b60408051601f198184030181529082905280516020909101206318caf8e360e31b825291506000805160206204ec038339815191529063c657c7189062003370908490869060040162011bde565b600060405180830381600087803b1580156200338b57600080fd5b505af1158015620033a0573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206204ec03833981519152925063c88a5e6d9150620033e490849069021e19e0c9bab24000009060040162011b81565b600060405180830381600087803b158015620033ff57600080fd5b505af115801562003414573d6000803e3d6000fd5b50505050919050565b604754610100900460ff16620034305750565b60365460408051630161b2cb60e71b815290516001600160a01b039092169163c6e6f59291620034df91849163b0d96580916004808301926102609291908290030181865afa15801562003488573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034ae9190620118e4565b60c00151620034bf906002620117e7565b603654620034d6906001600160a01b03166200abfa565b8591906200ac09565b6040518263ffffffff1660e01b8152600401620034fe91815260200190565b602060405180830381865afa1580156200351c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035429190620116a9565b601f54909150600090819062003563906001600160a01b031684836200ac95565b91509150600080620035746200adf8565b601f54919350915060009062003593906001600160a01b03166200af01565b603654909150600090620035b0906001600160a01b03166200af01565b6047549091506000906301000000900460ff16156200370c57601f54600090620035e6906001600160a01b03168989846200af61565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562003631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036579190620116a9565b915062003671816038601b01548b62002a18919062011ab5565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620036c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036ec9190620118e4565b6101e001515160000362002ab95762002ab9818a6038601c01546200a46e565b601f5462003725906001600160a01b031688886200b03f565b60515460365460405163b88fed9f60e01b8152600481018c905292935062003763928492916001600160a01b03169063b88fed9f9060240162002b12565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620037b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037de9190620118e4565b6101e001515160000362002c6b5760365460405163b88fed9f60e01b8152600481018a905262002c6b9183916001600160a01b039091169063b88fed9f90602401602060405180830381865afa1580156200383d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620038639190620116a9565b6052546200a46e565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101562001b3c5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200393d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620038fe5790505b5050505050815250508152602001906001019062003890565b600073e66e3a37c3274ac24fe8590f7d84a2427194dc176001600160a01b03166399248ea76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620039ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620039d1919062011b61565b90506001600160a01b038116620039e55750565b620039f66301e1338060006200ad39565b603654604051637e90d7ef60e01b81526001600160a01b03909116600482015260009073e66e3a37c3274ac24fe8590f7d84a2427194dc1790637e90d7ef90602401602060405180830381865afa15801562003a56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a7c9190620116a9565b9050603660009054906101000a90046001600160a01b03166001600160a01b031663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003acf57600080fd5b505af115801562003ae4573d6000803e3d6000fd5b50506036546040516370a0823160e01b81526001600160a01b03918216600482015262003b20935090851691506370a0823190602401620032a4565b60365460408051630161b2cb60e71b815290516000926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562003b6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b929190620118e4565b6101a0015190506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003be757600080fd5b505af115801562003bfc573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03841660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b15801562003c5157600080fd5b505af115801562003c66573d6000803e3d6000fd5b505060365460405162b40d3160e11b81526001600160a01b03878116600483015290911692506301681a629150602401600060405180830381600087803b15801562003cb157600080fd5b505af115801562003cc6573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03848116600483015262003d439350861691506370a0823190602401602060405180830381865afa15801562003d16573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d3c9190620116a9565b836200a40a565b6036546040516370a0823160e01b81526001600160a01b03918216600482015262000ede918516906370a0823190602401602060405180830381865afa15801562003d92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003db89190620116a9565b60006200a40a565b604754610100900460ff1662003dd35750565b60008062003de06200adf8565b601f54919350915060009062003dff906001600160a01b03166200af01565b60365490915060009062003e1c906001600160a01b03166200af01565b60365490915060009062003e39906001600160a01b03166200abfa565b835160365460408051630161b2cb60e71b81529051939450919262003ee1926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa15801562003e90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003eb69190620118e4565b60c0015162003ec7906002620117e7565b82841162003ed6578362003ed8565b825b8991906200ac09565b9650600062003ef08862009cfd565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b15801562003f4857600080fd5b505af115801562003f5d573d6000803e3d6000fd5b5050604754610100900460ff16915062003fe3905057604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062003fae9063350b944160e11b9060040162011b4c565b600060405180830381600087803b15801562003fc957600080fd5b505af115801562003fde573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b039081168252600060208084018290528451828152908101855283850152925163cba2e58d60e01b81529293849391169163cba2e58d91620040459187918691829160040162011b00565b60408051808303816000875af115801562004064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200408a919062011b27565b6036549193509150620040b2906001600160a01b0316633656eec2620032736001866200b654565b601f54620040d0906001600160a01b03168b60008c8c8c8c6200b68a565b50505050505050505050565b6047546301000000900460ff16620040f2575050565b601f546000906200410c906001600160a01b03166200af01565b604954909150610100900460ff1615620041ad5760365460408051630161b2cb60e71b81529051620041a7926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200416e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041949190620118e4565b610100015166b1a2bc2ec500006200ad39565b6200422e565b60365460408051630161b2cb60e71b815290516200422e926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620041fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620042219190620118e4565b610100015160006200ad39565b60365460009062004248906001600160a01b03166200abfa565b825160365460408051630161b2cb60e71b815290519394509192620042ee926001600160a01b039092169163b0d96580916004808301926102609291908290030181865afa1580156200429f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620042c59190620118e4565b60c00151620042d6906002620117e7565b828411620042e5578362002d93565b8690836200ac09565b601f5490955060009081906200431a906001600160a01b0316620043128962009cfd565b60006200ac95565b6049549193509150610100900460ff16156200434e57620043468660006722b1c8c1227a00006200ba09565b955062004353565b600095505b60365460408051630161b2cb60e71b81529051620043d3926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620043a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620043c79190620118e4565b6101000151876200ad39565b600080620043e06200adf8565b601f549193509150620043fc906001600160a01b03166200af01565b60365490975060009062004419906001600160a01b03166200af01565b601f5490915060009062004439906001600160a01b03168787846200af61565b9050600062004448826200baa0565b9050620044a881620012f5603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001491573d6000803e3d6000fd5b6200450f8162004506603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001491573d6000803e3d6000fd5b604a546200a46e565b601f546200452d906001600160a01b031682600088888f896200b073565b505050505050505050505050565b604754610100900460ff166200454f575050565b60365460408051630161b2cb60e71b81529051620046ca926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200459d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045c39190620118e4565b60c00151620045d4906002620117e7565b60365460408051630a4e149360e01b81529051600a926001600160a01b031691630a4e14939160048083019260209291908290030181865afa1580156200461f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004645919062011b61565b601f546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa1580156200468f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620046b59190620116a9565b620046c1919062011817565b8491906200ac09565b60495490925060ff1615620046e757620046e48262009cfd565b91505b601f5460009062004703906001600160a01b031684836200b363565b90506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200475357600080fd5b505af115801562004768573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b158015620047c557600080fd5b505af1158015620047da573d6000803e3d6000fd5b505060365460009250620047f891506001600160a01b03166200b4bd565b601e549091506200481a9061010090046001600160a01b03168260006200b4cc565b50506047546301000000900460ff161562004ad557601f5460009081906200484d906001600160a01b031685836200b3fa565b915091506200485e8160006200badc565b604954610100900460ff16156200488d57620048858560006722b1c8c1227a00006200ac09565b945062004892565b600094505b60365460408051630161b2cb60e71b8152905162004912926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620049069190620118e4565b6101000151866200ad39565b6036546001600160a01b031663414f826d6200492e826200bb17565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200496f57600080fd5b505af115801562004984573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620049df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a059190620119f7565b6101a00151601f5490915060009062004a29906001600160a01b031684836200bb9c565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562004a7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004aa29190620116a9565b905062004ab082856200a40a565b62004aca8162004ac186866200afed565b6050546200a46e565b505050505062004cc6565b601f54600090819062004af2906001600160a01b0316856200b47d565b9150915062004b038160006200badc565b604954610100900460ff161562004b325762004b2a8560006722b1c8c1227a00006200ac09565b945062004b37565b600094505b60365460408051630161b2cb60e71b8152905162004b85926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048e0573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62004ba1826200bb17565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b15801562004be257600080fd5b505af115801562004bf7573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562004c52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004c789190620119f7565b6101a00151601f5490915060009062004c9b906001600160a01b0316846200bc1f565b909450905062004cac81846200a40a565b62002c978462004cbd85856200afed565b604f546200a46e565b50505050565b603654604080516306fdde0360e01b8152905162004ddc926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562004d19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004d43919081019062011c50565b6038805462004d5290620115d3565b80601f016020809104026020016040519081016040528092919081815260200182805462004d8090620115d3565b801562004dd15780601f1062004da55761010080835404028352916020019162004dd1565b820191906000526020600020905b81548152906001019060200180831162004db357829003601f168201915b50505050506200bc53565b607454604080516306fdde0360e01b81529051620019f5926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562004e29573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004e53919081019062011c50565b60405162004e679060389060200162011c88565b6040516020818303038152906040526200bc53565b60475460ff1662004e8b575050565b60365460408051630161b2cb60e71b8152905162004f27926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562004ed9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004eff9190620118e4565b60c0015162004f10906002620117e7565b603654620046c1906001600160a01b03166200abfa565b601f54909250600090819062004f47906001600160a01b0316856200bc89565b6049549193509150610100900460ff161562004f7c5762004f74836000683635c9adc5dea000006200ac09565b925062004f81565b600092505b62004f916301e13380846200ad39565b60008062004f9e6200adf8565b601f54919350915060009062004fbd906001600160a01b03166200af01565b60365490915060009062004fda906001600160a01b03166200af01565b60475490915060009062010000900460ff1615620050d557601f546200500b906001600160a01b031688886200b03f565b905062005071816038601d0154620012e9603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001359573d6000803e3d6000fd5b620050cf81620014dc603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001491573d6000803e3d6000fd5b62005229565b601f54600090620050f2906001600160a01b03168989846200af61565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200513d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051639190620116a9565b9150620051c9826038601f0154620012e9603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200129e573d6000803e3d6000fd5b6200522782620013a4603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562001359573d6000803e3d6000fd5b505b601f5460475462001511916001600160a01b031690839062010000900460ff16888888886200b073565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101562001b3c5783829060005260206000200180546200529990620115d3565b80601f0160208091040260200160405190810160405280929190818152602001828054620052c790620115d3565b8015620053185780601f10620052ec5761010080835404028352916020019162005318565b820191906000526020600020905b815481529060010190602001808311620052fa57829003601f168201915b50505050508152602001906001019062005277565b6000806200533a6200adf8565b601f54919350915060009062005359906001600160a01b03166200af01565b60365490915060009062005376906001600160a01b03166200af01565b90506200541f603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620053d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620053f79190620118e4565b60c0015162005408906002620117e7565b60365462002d93906001600160a01b03166200b4bd565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200547757600080fd5b505af11580156200548c573d6000803e3d6000fd5b505060475460ff169150620055479050576000805160206204ec0383398151915263c31eb0e07f0000000000000000000000000000000000000000000000000000000000000000620054e65763350b944160e11b620054ef565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200550d919062011b4c565b600060405180830381600087803b1580156200552857600080fd5b505af11580156200553d573d6000803e3d6000fd5b5050505062005664565b7f00000000000000000000000000000000000000000000000000000000000000006200566457603660009054906101000a90046001600160a01b03166001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015620055c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620055e7919062011b61565b60365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200561c92911690899060040162011b81565b6020604051808303816000875af11580156200563c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005662919062011bab565b505b60365460009081906001600160a01b031663dbbe80707f0000000000000000000000000000000000000000000000000000000000000000620056a8576000620056aa565b885b60408051606081018252601f546001600160a01b0316815260016020808301919091528251600080825291810184528284015291516001600160e01b031960e086901b16815262005702928d92839260040162011b00565b604080518083038185885af115801562005720573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062005747919062011b27565b604754919350915060ff16620057605750505050505050565b603654620057fe906001600160a01b0316633656eec2620057836002866200b654565b601f5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015620057d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620057f79190620116a9565b886200a40a565b60006200582062005810838a6201182e565b89670de0b6b3a76400006200bcec565b90506200582f8260006200badc565b604654620058639082906200585d906200584e906301e133806200bd7d565b66b1a2bc2ec50000906200afed565b6200bd94565b601f5462002c97906001600160a01b03168360018a8a8a8a6200b68a565b6060601c805480602002602001604051908101604052809291908181526020016000905b8282101562001b3c5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200595257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620059135790505b50505050508152505081526020019060010190620058a5565b601e546047546001600160a01b036101009283900416319160ff910416620059905750565b603a54600090620059f690620059ab9060ff16600a620117d6565b620059b9906103e8620117e7565b606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152600a9216906370a0823190602401620008f8565b60495490915060ff161562005a135762005a108162009cfd565b90505b62005a2a63beefbabe63deadfade83600062009d78565b601e5462005a489061010090046001600160a01b031631836200a40a565b6036546040805163313ce56760e01b8152905162005a95926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000a63573d6000803e3d6000fd5b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262005bb2921690633656eec2906044015b602060405180830381865afa15801562005af4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005b1a9190620116a9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562005b6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005b959190620118e4565b60a0015162005ba6906002620117e7565b62000c2590846201182e565b60365460408051630c048d9160e31b8152905162005c2e926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005c00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005c269190620119f7565b51826200a40a565b60365460408051630c048d9160e31b8152905162005cf5926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562005c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005ca29190620119f7565b60a0015160655460365460408051630c048d9160e31b815290516001600160a01b03909216916360246c88916004818101926101e0929091908290030181865afa15801562000df8573d6000803e3d6000fd5b607454603654601e54606554620007c2936001600160a01b039081169381169261010090041690859066b1a2bc2ec500009060009062000ed560408051600081526020810190915290565b607354604080516310780f7360e01b815290516000805160206204ec03833981519152926306447d56926001600160a01b03909116916310780f73916004808201926020929091908290030181865afa15801562005da2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005dc8919062011b61565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562005e0a57600080fd5b505af115801562005e1f573d6000803e3d6000fd5b505050506000601260008060001960405162005e3b9062010e51565b60c080825260099082015268537765657061626c6560b81b60e08201526101006020820181905260059082015264053574545560dc1b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f08015801562005ebe573d6000803e3d6000fd5b506036546040516340c10f1960e01b81529192506001600160a01b03808416926340c10f1992620027a3921690678ac7230489e800009060040162011b81565b60475460ff1662005f0c5750565b60365460408051630161b2cb60e71b8152905162005f5a926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200289b573d6000803e3d6000fd5b601f54909150600090819062005f7a906001600160a01b0316846200bdcf565b9150915060008062005f8b6200adf8565b601f54919350915060009062005faa906001600160a01b03166200af01565b60365490915060009062005fc7906001600160a01b03166200af01565b60475490915060009062010000900460ff1615620060b357601f5462005ff8906001600160a01b0316888a6200b620565b905062006012816038602101548862002a18919062011ab5565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562006067573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200608d9190620118e4565b6101e0015151600003620060ad57620060ad81876038602201546200a46e565b6200628a565b601f54600090620060d0906001600160a01b0316898b846200b562565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa1580156200611b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061419190620116a9565b605b546036546040516363737ac960e11b8152600481018b90529294506200617f928492916001600160a01b03169063c6e6f5929060240162002b12565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620061d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061fa9190620118e4565b6101e001515160000362006288576036546040516363737ac960e11b815260048101899052620062889183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562006259573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200627f9190620116a9565b605c546200a46e565b505b601f5460475462002c97916001600160a01b031690839062010000900460ff16888888886200b073565b601f54600090620062ce906001600160a01b03166200af01565b604954909150610100900460ff1615620063365760365460408051630161b2cb60e71b8152905162006330926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200416e573d6000803e3d6000fd5b62006384565b60365460408051630161b2cb60e71b8152905162006384926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620041fb573d6000803e3d6000fd5b6036546000906200639e906001600160a01b03166200abfa565b604754909150600090819060ff16156200647357602084015160365460408051630161b2cb60e71b815290516200644b926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562006405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200642b9190620118e4565b60c001516200643c906002620117e7565b82861162003ed6578562003ed8565b601f5490975062006466906001600160a01b0316886200bc89565b90935091506200652e9050565b835160365460408051630161b2cb60e71b8152905162006503926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620064c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620064e99190620118e4565b60c00151620064fa906002620117e7565b8890866200ac09565b601f5490975062006527906001600160a01b03166200431283620009488b62009cfd565b9093509150505b604954610100900460ff16156200655d57620065558560006722b1c8c1227a00006200ba09565b945062006562565b600094505b60365460408051630161b2cb60e71b81529051620065b0926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048e0573d6000803e3d6000fd5b600080620065bd6200adf8565b601f549193509150620065d9906001600160a01b03166200af01565b603654909650600090620065f6906001600160a01b03166200af01565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200664e57600080fd5b505af115801562006663573d6000803e3d6000fd5b505060475462010000900460ff169150620066e490505760405163f28dceb360e01b81526000805160206204ec038339815191529063f28dceb390620066af9060489060040162011694565b600060405180830381600087803b158015620066ca57600080fd5b505af1158015620066df573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b03908116825260016020830152600093169163ded06231918991899186918101826040519080825280601f01601f19166020018201604052801562006747576020820181803683370190505b508152506040518563ffffffff1660e01b81526004016200676c949392919062011b00565b6020604051808303816000875af11580156200678c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620067b29190620116a9565b60475490915062010000900460ff16620067d25750505050505050505050565b6200687b81620012f5603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562006830573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620068569190620118e4565b6101e00151602001516200687390670de0b6b3a76400006201182e565b88906200afed565b620068e281620068d9603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562006830573d6000803e3d6000fd5b604b546200a46e565b601f54620040d0906001600160a01b031682600187878d886200b073565b6036546040805163054fd4d560e41b815290516200699d926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa1580156200694d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006977919081019062011c50565b60405180604001604052806007815260200166076312e302e32360cc1b8152506200bc53565b6074546040805163054fd4d560e41b81529051620019f5926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa1580156200694d573d6000803e3d6000fd5b604754610100900460ff16620069fd5750565b60008062006a0a6200adf8565b601f54919350915060009062006a29906001600160a01b03166200af01565b60365490915060009062006a46906001600160a01b03166200af01565b905062006aa1603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620053d1573d6000803e3d6000fd5b601f546040516303223eab60e11b81526001600160a01b0390911660048201529095506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b15801562006af957600080fd5b505af115801562006b0e573d6000803e3d6000fd5b5050604754610100900460ff16915062006b94905057604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e09062006b5f9063350b944160e11b9060040162011b4c565b600060405180830381600087803b15801562006b7a57600080fd5b505af115801562006b8f573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b0390811682526000602080840182905284518281529081018552838501529251630dbbe80760e41b81529293849391169163dbbe80709162006bf6918b918291879160040162011b00565b60408051808303816000875af115801562006c15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006c3b919062011b27565b603654919350915062006c63906001600160a01b0316633656eec2620057836002866200b654565b600062006c70826200baa0565b9050600062006c9462006c84838b6201182e565b8a670de0b6b3a76400006200bcec565b905062006ca38260006200badc565b60465462006cc29082906200585d906200584e906301e133806200bd7d565b601f5462001511906001600160a01b03168360008b8b8b8b6200b68a565b603654604080516304baa00b60e01b8152905162006d66926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562006d2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006d57919081019062011c50565b6039805462004d5290620115d3565b607454604080516304baa00b60e01b81529051620019f5926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562006db3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262006ddd919081019062011c50565b60405162004e679060399060200162011c88565b60008062006dfe6200adf8565b915091506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562006e59573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006e7f9190620119f7565b60c00151905062006e968162000a1085856200bd7d565b60365460408051630161b2cb60e71b8152905162006ee4926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562000fb3573d6000803e3d6000fd5b60365490945060009062006f01906001600160a01b03166200be31565b601f5490925062006f1d91506001600160a01b0316866200bc89565b505060365460009062006f39906001600160a01b03166200be31565b915062006f5a90508162006f4e88866200bd7d565b62000c25908562011ab5565b505050505050565b604954610100900460ff161562006fc75760365460408051630161b2cb60e71b8152905162006fc1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200416e573d6000803e3d6000fd5b62007015565b60365460408051630161b2cb60e71b8152905162007015926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620041fb573d6000803e3d6000fd5b60365460408051630161b2cb60e71b81529051620070b1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007063573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620070899190620118e4565b60c001516200709a906002620117e7565b603654620046c1906001600160a01b03166200b4bd565b601f54604754919350600091620070d7916001600160a01b031690859060ff166200b4cc565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007131573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620071579190620119f7565b60c00151604954909150610100900460ff161562007193576200718b83662386f26fc100006722b1c8c1227a00006200ba09565b925062007198565b600092505b60365460408051630161b2cb60e71b81529051620071e6926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001116573d6000803e3d6000fd5b600080620071f36200adf8565b601f54919350915060009062007212906001600160a01b03166200af01565b6036549091506000906200722f906001600160a01b03166200af01565b601f546040516303223eab60e11b81526001600160a01b0390911660048201529091506000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200728757600080fd5b505af11580156200729c573d6000803e3d6000fd5b5050505060006200733b86603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620072fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620073229190620119f7565b60c001516200733291906201182e565b8a90886200bf2e565b60475490915062010000900460ff16158015620073585750600088135b15620073c85760405163f28dceb360e01b81526000805160206204ec038339815191529063f28dceb390620073939060489060040162011694565b600060405180830381600087803b158015620073ae57600080fd5b505af1158015620073c3573d6000803e3d6000fd5b505050505b60365460408051606081018252601f546001600160a01b0390811682526001602083015260009316916329b23fc1918b918e9186918101826040519080825280601f01601f1916602001820160405280156200742b576020820181803683370190505b508152506040518563ffffffff1660e01b815260040162007450949392919062011b00565b6020604051808303816000875af115801562007470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620074969190620116a9565b60475490915062010000900460ff16620074b65750505050505050505050565b620074c881620012f584600a62011ab5565b620074d6818360646200a46e565b601f54620040d0906001600160a01b0316826001898989896200b073565b6047546301000000900460ff166200750a575050565b604954610100900460ff16156200756f5760365460408051630161b2cb60e71b8152905162007569926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200416e573d6000803e3d6000fd5b620075bd565b60365460408051630161b2cb60e71b81529051620075bd926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620041fb573d6000803e3d6000fd5b60365460408051630161b2cb60e71b815290516200760b926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007063573d6000803e3d6000fd5b601f549092506000906200762a906001600160a01b031684836200b4cc565b5090506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562007684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620076aa9190620119f7565b60c00151604954909150610100900460ff1615620076e057620076d88360006722b1c8c1227a00006200ba09565b9250620076e5565b600092505b60365460408051630161b2cb60e71b8152905162007733926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562001116573d6000803e3d6000fd5b600080620077406200adf8565b601f5491935091506000906200775f906001600160a01b03166200af01565b6036549091506000906200777c906001600160a01b03166200af01565b90506000620077da86603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620072fc573d6000803e3d6000fd5b6047549091506301000000900460ff166200785f57604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e0906200782a9063350b944160e11b9060040162011b4c565b600060405180830381600087803b1580156200784557600080fd5b505af11580156200785a573d6000803e3d6000fd5b505050505b601f546000906200787c906001600160a01b0316898c846200b562565b905060006200788b826200baa0565b90506200789f81620012f585600a62011ab5565b620078b181846038601401546200a46e565b601f54620078cf906001600160a01b03168260008a8a8a8a6200b073565b5050505050505050505050565b60475460ff16620078ea5750565b60365460408051630161b2cb60e71b8152905162007986926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007938573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200795e9190620118e4565b60c001516200796f906002620117e7565b6036546200210b906001600160a01b03166200abfa565b601f549091506000908190620079a6906001600160a01b0316846200bc89565b91509150600080620079b76200adf8565b601f549193509150600090620079d6906001600160a01b03166200af01565b603654909150600090620079f3906001600160a01b03166200af01565b60475490915060009062010000900460ff161562007ad957601f5462007a24906001600160a01b031688886200b03f565b905062007a3e816038601901548a62002a18919062011ab5565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562007a93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007ab99190620118e4565b6101e0015151600003620060ad57620060ad81896038601a01546200a46e565b601f5460009062007af6906001600160a01b03168989846200af61565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562007b41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007b679190620116a9565b6053546036546040516363737ac960e11b8152600481018d905292945062007ba5928492916001600160a01b03169063c6e6f5929060240162002b12565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562007bfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007c209190620118e4565b6101e001515160000362006288576036546040516363737ac960e11b8152600481018b9052620062889183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562007c7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007ca59190620116a9565b6054546200a46e565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101562001b3c57838290600052602060002001805462007cf490620115d3565b80601f016020809104026020016040519081016040528092919081815260200182805462007d2290620115d3565b801562007d735780601f1062007d475761010080835404028352916020019162007d73565b820191906000526020600020905b81548152906001019060200180831162007d5557829003601f168201915b50505050508152602001906001019062007cd2565b60365460009062007da2906001600160a01b03166200be31565b91505062001779603660009054906101000a90046001600160a01b03166001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa158015620032c2573d6000803e3d6000fd5b60085460009060ff161562007e16575060085460ff1690565b604051630667f9d760e41b81526000906000805160206204ec038339815191529063667f9d709062007e67906000805160206204ec23833981519152906519985a5b195960d21b9060040162011b81565b602060405180830381865afa15801562007e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007eab9190620116a9565b1415905090565b60475460ff1662007ec05750565b7f00000000000000000000000000000000000000000000000000000000000000001562007f8f5760365460408051630161b2cb60e71b8152905162007f87926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007f35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007f5b9190620118e4565b60c0015162007f6c906002620117e7565b601f546200210b90600a906001600160a01b03163162011817565b905062008062565b60365460408051630161b2cb60e71b815290516200805f926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007fdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620080039190620118e4565b60c0015162008014906002620117e7565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa15801562002069573d6000803e3d6000fd5b90505b601f546000906200807d906001600160a01b0316836200bf4d565b90506000806200808c6200adf8565b601f549193509150600090620080ab906001600160a01b03166200af01565b603654909150600090620080c8906001600160a01b03166200af01565b60475490915060009062010000900460ff16156200812657601f54600090620080fb906001600160a01b0316886200b47d565b90925090506200810d8160006200a40a565b6200811f82896038601501546200a46e565b506200824a565b601f54600090819062008144906001600160a01b031689836200b3fa565b60365460405163b88fed9f60e01b8152600481018490529294509092506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562008192573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620081b89190620116a9565b9250620081c78160006200a40a565b6036546040516363737ac960e11b8152600481018b9052620082479184916001600160a01b039091169063c6e6f59290602401602060405180830381865afa15801562008218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200823e9190620116a9565b604e546200a46e565b50505b601f54604754620022d9916001600160a01b031690839062010000900460ff16888888886200b073565b60475460ff1662008283575050565b60365460408051630161b2cb60e71b81529051620082d1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007063573d6000803e3d6000fd5b601f54909250600090620082ef906001600160a01b0316846200bdcf565b50604954909150610100900460ff161562008322576200831a8260006722b1c8c1227a00006200ac09565b915062008327565b600091505b60365460408051630161b2cb60e71b81529051620083a7926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200839b9190620118e4565b6101000151836200ad39565b600080620083b46200adf8565b601f549193509150600090620083d3906001600160a01b03166200af01565b603654909150600090620083f0906001600160a01b03166200af01565b60475490915060009062010000900460ff16156200843d57601f5462008421906001600160a01b0316878a6200b620565b9050620060ad81620084348a8a6200afed565b605d546200a46e565b601f546000906200845a906001600160a01b0316888b846200b562565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa158015620084a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620084cb9190620116a9565b91506200628882620084de8b8b6200afed565b605e546200a46e565b6060601580548060200260200160405190810160405280929190818152602001828054801562000f3d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000f1e575050505050905090565b60475460ff1662008558575050565b7f000000000000000000000000000000000000000000000000000000000000000015620086275760365460408051630161b2cb60e71b815290516200861f926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620085cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620085f39190620118e4565b60c0015162008604906002620117e7565b601f54620046c190600a906001600160a01b03163162011817565b9150620086fa565b60365460408051630161b2cb60e71b81529051620086f7926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200869b9190620118e4565b60c00151620086ac906002620117e7565b6036546040805163c55dae6360e01b81529051600a926001600160a01b03169163c55dae639160048083019260209291908290030181865afa1580156200461f573d6000803e3d6000fd5b91505b601f5460009062008715906001600160a01b0316846200bf4d565b90506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200876557600080fd5b505af11580156200877a573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b158015620087d757600080fd5b505af1158015620087ec573d6000803e3d6000fd5b5050603654600092506200880a91506001600160a01b03166200b4bd565b601e549091506200882a9061010090046001600160a01b0316826200bdcf565b505060475462010000900460ff161562008a3057601f5460009081906200885b906001600160a01b0316856200b47d565b915091506200886c8160006200badc565b604954610100900460ff16156200889b57620088938560006722b1c8c1227a00006200ac09565b9450620088a0565b600094505b60365460408051630161b2cb60e71b81529051620088ee926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048e0573d6000803e3d6000fd5b6036546001600160a01b031663414f826d6200890a826200bb17565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156200894b57600080fd5b505af115801562008960573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa158015620089bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620089e19190620119f7565b6101a00151601f5490915060009062008a04906001600160a01b0316846200bc1f565b909450905062008a1581846200a40a565b62008a268462004cbd85856200afed565b5050505062004cc6565b601f54600090819062008a4e906001600160a01b031685836200b3fa565b9150915062008a5f8160006200badc565b604954610100900460ff161562008a8e5762008a868560006722b1c8c1227a00006200ac09565b945062008a93565b600094505b60365460408051630161b2cb60e71b8152905162008ae1926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa158015620048e0573d6000803e3d6000fd5b6036546001600160a01b031663414f826d62008afd826200bb17565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b15801562008b3e57600080fd5b505af115801562008b53573d6000803e3d6000fd5b505050506000603660009054906101000a90046001600160a01b03166001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa15801562008bae573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008bd49190620119f7565b6101a00151601f5490915060009062008bf8906001600160a01b031684836200bb9c565b60365460405163b88fed9f60e01b8152600481018490529296509092506000916001600160a01b039091169063b88fed9f90602401602060405180830381865afa15801562008c4b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008c719190620116a9565b905062008c7f82856200a40a565b620015118162004ac186866200afed565b604754610100900460ff1662008ca4575050565b60365460408051630161b2cb60e71b8152905162008cf2926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562007063573d6000803e3d6000fd5b601f5490925060009062008d11906001600160a01b031684836200b4cc565b50604954909150610100900460ff161562008d445762008d3c8260006722b1c8c1227a00006200ba09565b915062008d49565b600091505b60365460408051630161b2cb60e71b8152905162008d97926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa15801562008375573d6000803e3d6000fd5b60008062008da46200adf8565b601f54919350915060009062008dc3906001600160a01b03166200af01565b60365490915060009062008de0906001600160a01b03166200af01565b9050600080600062008e7589603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562008e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008e679190620118e4565b61010001518c91906200bfad565b91505062008e83816200c02a565b6047549092506301000000900460ff1615905062008f4457601f5460009062008eb8906001600160a01b0316898c846200b562565b60365460405163b88fed9f60e01b8152600481018390529192506001600160a01b03169063b88fed9f90602401602060405180830381865afa15801562008f03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062008f299190620116a9565b925062008f3d83836038602601546200a46e565b5062008f71565b601f5462008f5d906001600160a01b0316888b6200b620565b915062008f7182826038602501546200a46e565b601f5460475462001511916001600160a01b03169084906301000000900460ff1615898989896200b073565b62008fa76200c052565b601e5460405163c88a5e6d60e01b81526000805160206204ec038339815191529163c88a5e6d9162008ff79161010090046001600160a01b03169069152d02c7e14af68000009060040162011b81565b600060405180830381600087803b1580156200901257600080fd5b505af115801562009027573d6000803e3d6000fd5b5050601f5460405163c88a5e6d60e01b81526000805160206204ec03833981519152935063c88a5e6d925062009076916001600160a01b03169069152d02c7e14af68000009060040162011b81565b600060405180830381600087803b1580156200909157600080fd5b505af1158015620090a6573d6000803e3d6000fd5b506000925060029150620090b79050565b604051908082528060200260200182016040528015620090e1578160200160208202803683370190505b509050601e60019054906101000a90046001600160a01b03168160008151811062009110576200911062011d21565b6001600160a01b039283166020918202929092010152601f5482519116908290600190811062009144576200914462011d21565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b603b54811015620091c857603654603d54603b8054620091bf936001600160a01b039081169316919085908110620091a357620091a362011d21565b6000918252602090912001546001600160a01b0316856200c540565b60010162009167565b5060005b603c548110156200921157603654603e54603c805462009208936001600160a01b039081169316919085908110620091a357620091a362011d21565b600101620091cc565b506200921c6200c719565b60735462009233906001600160a01b03166200ce63565b607480546001600160a01b0319166001600160a01b03928316908117909155607354604051630843957560e31b815260048101929092529091169063421caba890602401600060405180830381600087803b1580156200929257600080fd5b505af1158015620092a7573d6000803e3d6000fd5b505060475460009250610100900460ff1690508015620092ca575060495460ff16155b15620092f057603a54620092e890620059ab9060ff16600a620117d6565b90506200937d565b604754610100900460ff16156200932457603a54620092e8906200931e90620059ab9060ff16600a620117d6565b62009cfd565b7f00000000000000000000000000000000000000000000000000000000000000006200936257603a54620092e890620008b29060ff16600a620117d6565b603a546200937a906200096f9060ff16600a620117d6565b90505b604754620093a29063deadbeef9063deadbabe908490610100900460ff161562009d78565b60475460ff168015620093d357507f0000000000000000000000000000000000000000000000000000000000000000155b1562009767576000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200942757600080fd5b505af11580156200943c573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200949957600080fd5b505af1158015620094ae573d6000803e3d6000fd5b5050603d54603654606154601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa15801562009518573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200953e9190620116a9565b6040518363ffffffff1660e01b81526004016200955d92919062011b81565b6020604051808303816000875af11580156200957d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620095a3919062011bab565b506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620095f257600080fd5b505af115801562009607573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200966057600080fd5b505af115801562009675573d6000803e3d6000fd5b5050603d54603654606154601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa158015620096da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620097009190620116a9565b6040518363ffffffff1660e01b81526004016200971f92919062011b81565b6020604051808303816000875af11580156200973f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009765919062011bab565b505b604754610100900460ff161562009b06576000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620097c657600080fd5b505af1158015620097db573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200983857600080fd5b505af11580156200984d573d6000803e3d6000fd5b5050603e54603654606254601e546040516370a0823160e01b81526101009091046001600160a01b039081166004830152938416955063095ea7b394509183169216906370a0823190602401602060405180830381865afa158015620098b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620098dd9190620116a9565b6040518363ffffffff1660e01b8152600401620098fc92919062011b81565b6020604051808303816000875af11580156200991c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009942919062011bab565b506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200999157600080fd5b505af1158015620099a6573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b158015620099ff57600080fd5b505af115801562009a14573d6000803e3d6000fd5b5050603e54603654606254601f546040516370a0823160e01b81526001600160a01b039182166004820152938116955063095ea7b39450918216929116906370a0823190602401602060405180830381865afa15801562009a79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009a9f9190620116a9565b6040518363ffffffff1660e01b815260040162009abe92919062011b81565b6020604051808303816000875af115801562009ade573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009b04919062011bab565b505b604754610100900460ff161562009b6357603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262009b5d921690633656eec29060440162005ad6565b62009c7e565b603654601e54604051631b2b776160e11b8152600060048201526101009091046001600160a01b03908116602483015262009c7e921690633656eec290604401602060405180830381865afa15801562009bc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009be79190620116a9565b603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562009c3c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009c629190620118e4565b60a0015162009c73906002620117e7565b62000c198462009cfd565b6000805160206204ec2383398151915260001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562009ccc57600080fd5b505af115801562006f5a573d6000803e3d6000fd5b600081831162009cf2578262009cf4565b815b90505b92915050565b6040516363737ac960e11b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063c6e6f592906024015b602060405180830381865af415801562009d52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009cf79190620116a9565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b15801562009dd157600080fd5b505af115801562009de6573d6000803e3d6000fd5b5050505060005b607460009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562009e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009e679190620116a9565b81101562009f22576073546074546001600160a01b03918216916349f13de791889116606162009ea260408051600081526020810190915290565b66b1a2bc2ec5000080888c6040518963ffffffff1660e01b815260040162009ed298979695949392919062011e25565b6020604051808303816000875af115801562009ef2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009f18919062011b61565b5060010162009ded565b5080801562009f4f57507f0000000000000000000000000000000000000000000000000000000000000000155b1562009fda57603d5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262009f8d92911690869060040162011b81565b6020604051808303816000875af115801562009fad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062009fd3919062011bab565b506200a0bb565b8015801562009fec575060495460ff16155b156200a02a57603e5460745460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262009f8d92911690869060040162011b81565b806200a0bb57603e546074546001600160a01b039182169163095ea7b391166200a054856200baa0565b6040518363ffffffff1660e01b81526004016200a07392919062011b81565b6020604051808303816000875af11580156200a093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a0b9919062011bab565b505b60475460ff161580156200a0cc5750805b156200a177576000805160206204ec0383398151915263c31eb0e07f00000000000000000000000000000000000000000000000000000000000000006200a11b5763350b944160e11b6200a124565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200a142919062011b4c565b600060405180830381600087803b1580156200a15d57600080fd5b505af11580156200a172573d6000803e3d6000fd5b505050505b604754610100900460ff161580156200a18e575080155b156200a20457604051630618f58760e51b81526000805160206204ec038339815191529063c31eb0e0906200a1cf9063350b944160e11b9060040162011b4c565b600060405180830381600087803b1580156200a1ea57600080fd5b505af11580156200a1ff573d6000803e3d6000fd5b505050505b601e546073546001600160a01b036101009092048216319116632e7cd9718380156200a24d57507f00000000000000000000000000000000000000000000000000000000000000005b6200a25a5760006200a267565b6200a267856002620117e7565b60745488906001600160a01b0316603860616200a28f60408051600081526020810190915290565b60408051606081018252601e5461010090046001600160a01b031681528b151560208201528c9166b1a2bc2ec50000918291810160006040519080825280601f01601f1916602001820160405280156200a2f0576020820181803683370190505b508152508f6040518c63ffffffff1660e01b81526004016200a31c9a9998979695949392919062011e8c565b60206040518083038185885af11580156200a33b573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200a362919062011b61565b603680546001600160a01b0319166001600160a01b039290921691909117905560475460ff1680156200a3925750815b80156200a3bc57507f00000000000000000000000000000000000000000000000000000000000000005b156200a3f0576200a3ea6200a3d284836201182e565b601e5461010090046001600160a01b0316316200a40a565b62002833565b601e546200283390829061010090046001600160a01b0316315b60405163260a5b1560e21b815260048101839052602481018290526000805160206204ec03833981519152906398296c54906044015b60006040518083038186803b1580156200a45957600080fd5b505afa15801562006f5a573d6000803e3d6000fd5b604051630b6903e360e11b81526004810184905260248101839052604481018290526000805160206204ec03833981519152906316d207c69060640160006040518083038186803b1580156200a4c357600080fd5b505afa158015620022d9573d6000803e3d6000fd5b60006000805160206204ec2383398151915260001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200a52d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200a557919081019062011f4a565b905060006200a587827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200d049565b90506200a597815160016200a40a565b6200a601816000815181106200a5b1576200a5b162011d21565b6020026020010151600001516000815181106200a5d2576200a5d262011d21565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200d16b565b6200a657816000815181106200a61b576200a61b62011d21565b6020026020010151600001516001815181106200a63c576200a63c62011d21565b602002602001015160001c8c6001600160a01b03166200a40a565b600080600080846000815181106200a673576200a67362011d21565b6020026020010151602001518060200190518101906200a6949190620120c3565b93509350935093506200a6a8848f6200d1a6565b6200a71c838f6001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200a6ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200a716919081019062011c50565b6200bc53565b60008e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200a75e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200a7849190620118e4565b835181519192506200a796916200d1a6565b6200a7aa836020015182602001516200d1a6565b6200a7be836040015182604001516200d1a6565b6200a7d2836060015182606001516200d16b565b6200a7e683608001518260a001516200a40a565b6200a7fa8360a001518260c001516200a40a565b6200a80f8360e001518261010001516200a40a565b6200a8258361010001518261012001516200a40a565b6200a83b8361012001518261014001516200a40a565b6200a8518361014001518261016001516200d1a6565b6200a8678361016001518261018001516200d1a6565b6101c0830151516101e0820151516200a88191906200a40a565b6200a89f836101c0015160200151826101e00151602001516200a40a565b6200a8bd836101c0015160400151826101e00151604001516200a40a565b6200a8db836101c0015160600151826101e00151606001516200a40a565b6200a937826040516020016200a8f2919062011bc9565b604051602081830303815290604052805190602001208a6040516020016200a91b919062011bc9565b604051602081830303815290604052805190602001206200d16b565b50505050505060006200a96b827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200d049565b90506200a97b815160016200a40a565b6200a9e5816000815181106200a995576200a99562011d21565b6020026020010151600001516000815181106200a9b6576200a9b662011d21565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200d16b565b6200aa32816000815181106200a9ff576200a9ff62011d21565b6020026020010151600001516001815181106200aa20576200aa2062011d21565b602002602001015160001c8a6200d1a6565b60008a90506000806000806000866000815181106200aa55576200aa5562011d21565b6020026020010151602001518060200190518101906200aa76919062012258565b9398509196509450925090508d8c156200ab2b576200ab25866200aa9c8e6002620117e7565b6200ab128a6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200aae0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ab069190620118e4565b6080015185906200bd7d565b6200ab1e91906201182e565b8c6200a46e565b6200ab49565b6200ab49866200ab3d8e6002620117e7565b6200ab1e90846201182e565b6200ab5585826200a40a565b6200abce84886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200ab9a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200abc09190620118e4565b60800151620186a06200a46e565b6200abda838e6200d1ea565b6200abe6828f6200a40a565b505050505050505050505050505050505050565b600062009cf78260076200d227565b6000818311156200ac525760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064015b60405180910390fd5b60006200ac6084846201182e565b6200ac6d90600162011ab5565b905060006200ac7d8287620122a4565b90506200ac8b858262011ab5565b9695505050505050565b6000806200ad2c85856040518060e001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200acdc576200acdc62011341565b6040519080825280601f01601f1916602001820160405280156200ad07576020820181803683370190505b508152602001888152602001600081526020018881526020016000198152506200d42a565b915091505b935093915050565b80156200ad9d5760405162461bcd60e51b815260206004820152602b60248201527f53746b57656c6c48797065726472697665546573743a207661726961626c655260448201526a06174652069736e277420360ac1b60648201526084016200ac49565b6000805160206204ec0383398151915263e5d6bf026200adbe844262011ab5565b6040518263ffffffff1660e01b81526004016200addd91815260200190565b600060405180830381600087803b15801562009ccc57600080fd5b603d546040516370a0823160e01b815273e66e3a37c3274ac24fe8590f7d84a2427194dc17600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156200ae5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ae809190620116a9565b73e66e3a37c3274ac24fe8590f7d84a2427194dc176001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200aed3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200aef99190620116a9565b915091509091565b6200af2660405180606001604052806000815260200160008152602001600081525090565b6000806200af34846200be31565b6040805160608101825291825260208201929092526001600160a01b039095163190850152509192915050565b60006200afe4858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200afa8576200afa862011341565b6040519080825280601f01601f1916602001820160405280156200afd3576020820181803683370190505b50815260200160008152506200d863565b95945050505050565b600062009cf48383670de0b6b3a76400006200bf2e565b604051638466f41560e01b815260048101839052602481018290526000805160206204ec0383398151915290638466f415906044016200a440565b60408051608081018252600181526001600160a01b038516602082015260009162000846918691869186918101866200afa8565b84156200b2345760475462010000900460ff166200b0a45760405163350b944160e11b815260040160405180910390fd5b6000806200b0b16200adf8565b90925090506200b0cf826200b0c78a896201182e565b60016200a46e565b6200b0f4816200b0df8a62009cfd565b6200b0eb90886201182e565b6060546200a46e565b7f00000000000000000000000000000000000000000000000000000000000000006200b15c5760365460408401516200b138916001600160a01b031631906200a40a565b601f5460408501516200b156916001600160a01b031631906200a40a565b6200b19f565b60365460408401516200b17a916001600160a01b031631906200a40a565b601f5460408501516200b19f916001600160a01b0316319062000a10908b9062011ab5565b60365460009081906200b1bb906001600160a01b03166200be31565b915091506000806200b1cd8d6200be31565b915091506200b1e18488602001516200a40a565b6200b1f8828d8a6020015162000a10919062011ab5565b6200b216836200b2088e62009cfd565b89516200b0eb91906201182e565b87516060546200b2289183916200a46e565b505050505050620022d9565b6047546301000000900460ff166200b25f5760405163350b944160e11b815260040160405180910390fd5b6000806200b26c6200adf8565b915091506200b27e828760016200a46e565b6200b28c818660016200a46e565b60365460408401516200b2aa916001600160a01b031631906200a40a565b601f5460408501516200b2c8916001600160a01b031631906200a40a565b60365460009081906200b2e4906001600160a01b03166200be31565b915091506000806200b2f68d6200be31565b915091506200b3108488602001516038602801546200a46e565b6200b3268289602001516038602801546200a46e565b6200b336836200b2088e62009cfd565b6200b354816200b3468e62009cfd565b8a516200b0eb919062011ab5565b50505050505050505050505050565b60006200084684846040518060e001604052808615158152602001886001600160a01b0316815260200160006001600160401b038111156200b3a9576200b3a962011341565b6040519080825280601f01601f1916602001820160405280156200b3d4576020820181803683370190505b50815260200187815260200160008152602001600081526020016000198152506200d9dc565b6000806200ad2c858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200b441576200b44162011341565b6040519080825280601f01601f1916602001820160405280156200b46c576020820181803683370190505b50815260200160008152506200ddb6565b60408051608081018252600181526001600160a01b038416602082015260009182916200b4b191869186918101856200b441565b915091505b9250929050565b600062009cf78260076200df2d565b6000806200ad2c85856040518060e001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200b513576200b51362011341565b6040519080825280601f01601f1916602001820160405280156200b53e576020820181803683370190505b5081526020018881526020016000815260200160008152602001888152506200e126565b60006200afe4858585604051806080016040528087151581526020018a6001600160a01b0316815260200160006001600160401b038111156200b5a9576200b5a962011341565b6040519080825280601f01601f1916602001820160405280156200b5d4576020820181803683370190505b50815260200160008152506200e5a7565b60405163b12fc00560e01b815260048101839052602481018290526000805160206204ec038339815191529063b12fc005906044016200a440565b60408051608081018252600181526001600160a01b038516602082015260009162000846918691869186918101866200b5a9565b60006001600160f81b038211156200b67f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b84156200b8f55760475460ff166200b6b55760405163350b944160e11b815260040160405180910390fd5b6000806200b6c26200adf8565b90925090506200b6e1826200b6d88a8962011ab5565b605f546200a46e565b6036546040516363737ac960e11b8152600481018a90526200b7649183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200b732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b7589190620116a9565b6200b6d8908862011ab5565b7f00000000000000000000000000000000000000000000000000000000000000006200b7c85760365460408401516200b7a8916001600160a01b031631906200a40a565b6200b7c2896001600160a01b03163185604001516200a40a565b6200b807565b60365460408401516200b7e6916001600160a01b031631906200a40a565b6200b807896001600160a01b03163189866040015162000a1091906201182e565b60365460009081906200b823906001600160a01b03166200be31565b915091506000806200b8358d6200be31565b915091506200b8498488602001516200a40a565b6200b860828d8a6020015162000a1091906201182e565b6036546040516363737ac960e11b8152600481018e90526200b8e59185916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200b8b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200b8d79190620116a9565b89516200b6d8919062011ab5565b6200b2288189600001516200a40a565b604754610100900460ff166200b91e5760405163350b944160e11b815260040160405180910390fd5b6000806200b92b6200adf8565b915091506200b93b82876200a40a565b6200b94d81866038602701546200a46e565b60365460408401516200b96b916001600160a01b031631906200a40a565b601f5460408501516200b989916001600160a01b031631906200a40a565b60365460009081906200b9a5906001600160a01b03166200be31565b915091506000806200b9b78d6200be31565b915091506200b9cb8488602001516200a40a565b6200b9db8289602001516200a40a565b6200b9eb836200b8d78e62009cfd565b6200b354816200b9fb8e62009cfd565b8a516200b6d891906201182e565b6000818313156200ba4e5760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064016200ac49565b60006200ba5c8484620122bb565b6200ba69906001620122de565b905060006200ba79828762012309565b905060008112156200ba94576200ba918282620122de565b90505b6200ac8b8582620122de565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f9060240162009d34565b604051636d83fe6960e11b815260048101839052602481018290526000805160206204ec038339815191529063db07fcd2906044016200a440565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200bb59573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bb7f9190620118e4565b61012001516200bb909042620122a4565b62009cf790426201182e565b6000806200ad2c858560405180608001604052808715158152602001896001600160a01b0316815260200160006001600160401b038111156200bbe3576200bbe362011341565b6040519080825280601f01601f1916602001820160405280156200bc0e576020820181803683370190505b50815260200160008152506200e6da565b60408051608081018252600181526001600160a01b038416602082015260009182916200b4b191869186918101856200bbe3565b60405163f320d96360e01b81526000805160206204ec038339815191529063f320d963906200a440908590859060040162012320565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200b4b1928792879291908201908152602001878152602001600081526020018781526020016000198152506200d42a565b6000670de0b6b3a764000082111580156200bd075750600082115b6200bd5f5760405162461bcd60e51b815260206004820152602160248201527f457870656374696e67204e6f726d616c697a656454696d6552656d61696e696e6044820152606760f81b60648201526084016200ac49565b620008466200bd6f85846200afed565b6200bd7b86866201182e565b905b600062009cf483670de0b6b3a7640000846200bf2e565b60405163a8d4d1d960e01b815260048101839052602481018290526000805160206204ec038339815191529063a8d4d1d9906044016200a440565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909283926200b4b19287928792919082019081526020018781526020016000815260200160008152602001878152506200e126565b603d546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa1580156200be80573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bea69190620116a9565b6040516370a0823160e01b81526001600160a01b038516600482015273e66e3a37c3274ac24fe8590f7d84a2427194dc17906370a0823190602401602060405180830381865afa1580156200beff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200bf259190620116a9565b91509150915091565b60008260001904841183021582026200bf4657600080fd5b5091020490565b6040805160e081018252600181526001600160a01b038416602080830191909152825160008082529181018452909262009cf49286928692820190815260200186815260200160008152602001600081526020016000198152506200d9dc565b600080806200bfc1846301e133806200bd7d565b905060008512156200c001576200bff06200bfe8826200bfe18862012349565b906200afed565b87906200afed565b6200bffb9062012349565b6200c011565b6200c0116200bfe886836200afed565b91506200c01f8287620122de565b925050935093915050565b6000808212156200c04e5760405163071d137160e51b815260040160405180910390fd5b5090565b6200c05c6200e80c565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200c0b557600080fd5b505af11580156200c0ca573d6000803e3d6000fd5b5050505060126000806000196040516200c0e49062010e51565b60c08082526004908201819052634261736560e01b60e083015261010060208301819052820152634241534560e01b61012082015260ff90941660408501526001600160a01b0390921660608401521515608083015260a082015261014001604051809103906000f0801580156200c160573d6000803e3d6000fd5b50603380546001600160a01b0319166001600160a01b03929092169190911790556040516200c18f9062010e5f565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200c1d3573d6000803e3d6000fd5b50603260016101000a8154816001600160a01b0302191690836001600160a01b031602179055506040516200c2089062010e6d565b604051809103906000f0801580156200c225573d6000803e3d6000fd5b50603480546001600160a01b0319166001600160a01b0392831690811790915560295460408051637ab4339d60e01b81526004810191909152601260448201527148797065726472697665526567697374727960701b60648201529216602483015290637ab4339d90608401600060405180830381600087803b1580156200c2ac57600080fd5b505af11580156200c2c1573d6000803e3d6000fd5b5050505060006200c2de66b1a2bc2ec500006301e133806200ebdc565b6040805160018082528183019092529192506000919060208083019080368337505060285482519293506001600160a01b0316918391506000906200c327576200c32762011d21565b60200260200101906001600160a01b031690816001600160a01b031681525050816101600151826101800151836101a00151846101c00151846040516200c36e9062010e7b565b6200c37e95949392919062012368565b604051809103906000f0801580156200c39b573d6000803e3d6000fd5b50603780546001600160a01b0319166001600160a01b03928316179055601e546200c3ce9161010090910416836200ecce565b6000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200c41c57600080fd5b505af11580156200c431573d6000803e3d6000fd5b50506027546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200c48a57600080fd5b505af11580156200c49f573d6000803e3d6000fd5b50506036546028546040516338c0646560e11b81526001600160a01b0391821660048201526001602482015291169250637180c8ca9150604401600060405180830381600087803b1580156200c4f457600080fd5b505af11580156200c509573d6000803e3d6000fd5b505060325460ff169150620007c29050576000805160206204ec0383398151915263e5d6bf026200adbe6301e133806003620117e7565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa1580156200c58b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c5b19190620116a9565b905060005b825181101562006f5a576200c5f884868551856200c5d5919062011817565b8685815181106200c5ea576200c5ea62011d21565b6020026020010151620022e2565b506000805160206204ec2383398151915260001c6001600160a01b03166306447d568483815181106200c62f576200c62f62011d21565b60200260200101516040518263ffffffff1660e01b81526004016200c66391906001600160a01b0391909116815260200190565b600060405180830381600087803b1580156200c67e57600080fd5b505af11580156200c693573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038816925063095ea7b391506200c6c99089906000199060040162011b81565b6020604051808303816000875af11580156200c6e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200c70f919062011bab565b506001016200c5b6565b602480546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec03833981519152916306447d569101600060405180830381600087803b1580156200c76d57600080fd5b505af11580156200c782573d6000803e3d6000fd5b5060009250600191506200c7939050565b6040519080825280602002602001820160405280156200c7bd578160200160208202803683370190505b50601f5481519192506001600160a01b03169082906000906200c7e4576200c7e462011d21565b60200260200101906001600160a01b031690816001600160a01b0316815250506040516200c8129062010e5f565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f0801580156200c856573d6000803e3d6000fd5b5060328054610100600160a81b0319166101006001600160a01b0393841681029190911791829055604080516102c081018252601e5483900485168152602080548616818301819052601f548716838501526060808401899052608080850192909252602654881660a0850152600060c08501819052610e1060e0860152617080858801526201518061012086015262093a806101408601526312cc0300610160860152670214e8348c4f0000610180860152671bc16d674ec800006101a086015266038d7ea4c680006101c08601526706f05b59d3b200006101e086018190526611c37937e08000610200870152610220860152855180840187528181528085018290528087018290528083019190915261024085015284519182018552670de0b6b3a764000080835282840181905282860181905290820152610260830152929093049093166102808301819052835163d13053bb60e01b8152935192936102a0850193919263d13053bb926004808401938290030181865afa1580156200c9e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ca0a9190620116a9565b90526040516200ca1a9062010e89565b6200ca269190620123a6565b604051809103906000f0801580156200ca43573d6000803e3d6000fd5b50607380546001600160a01b0319166001600160a01b03928316908117909155604080516101e081018252603d5484168152603e5490931660208085019190915281516399623bb160e01b8152825192850193926399623bb1926004808401939192918290030181865afa1580156200cac0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cae6919062011b61565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200cb48573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cb6e9190620116a9565b81526040805460208084019190915260415482840152671bc16d674ec80000606084015260465460808401526201518060a0840152600060c0840152607354825163e333155560e01b8152925160e0909401936001600160a01b039091169263e33315559260048083019391928290030181865afa1580156200cbf5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cc1b919062011b61565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200cc7d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cca3919062011b61565b6001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200cd05573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200cd2b919062011b61565b6001600160a01b0390811682526000602080840191909152604080516080808201835260425482526043548285015260445482840152604554606080840191909152958301919091528551606180549186166001600160a01b031992831617905586840151606280549187169183169190911790558683015160638054918716918316919091179055868601516064559086015160655560a086015160665560c086015160675560e0860151606855610100860151606955610120860151606a55610140860151606b8054918616918316919091179055610160860151606c8054918616918316919091179055610180860151606d80549186169183169190911790556101a0860151606e8054919095169116179092556101c0909301518051606f5592830151607055820151607155015160725550565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000906000805160206204ec03833981519152906306447d5690602401600060405180830381600087803b1580156200cebf57600080fd5b505af11580156200ced4573d6000803e3d6000fd5b50506040516200ceec92506038915060200162011c88565b604051602081830303815290604052826040516200cf0a9062010e97565b604051809103906000f0801580156200cf27573d6000803e3d6000fd5b506040516200cf369062010ea5565b604051809103906000f0801580156200cf53573d6000803e3d6000fd5b506040516200cf629062010eb3565b604051809103906000f0801580156200cf7f573d6000803e3d6000fd5b506040516200cf8e9062010ec1565b604051809103906000f0801580156200cfab573d6000803e3d6000fd5b506040516200cfba9062010ecf565b604051809103906000f0801580156200cfd7573d6000803e3d6000fd5b506040516200cfe69062010edd565b604051809103906000f0801580156200d003573d6000803e3d6000fd5b506040516200d0129062010eeb565b6200d025989796959493929190620125b0565b604051809103906000f0801580156200d042573d6000803e3d6000fd5b5092915050565b6060600083516001600160401b038111156200d069576200d06962011341565b6040519080825280602002602001820160405280156200d0b857816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816200d0885790505b50915060005b84518110156200d16257838582815181106200d0de576200d0de62011d21565b6020026020010151600001516000815181106200d0ff576200d0ff62011d21565b6020026020010151036200d159578481815181106200d122576200d12262011d21565b60200260200101518383806200d1389062012610565b9450815181106200d14d576200d14d62011d21565b60200260200101819052505b6001016200d0be565b50815292915050565b604051637c84c69b60e01b815260048101839052602481018290526000805160206204ec0383398151915290637c84c69b906044016200a440565b6040516328a9b0fb60e11b81526001600160a01b038084166004830152821660248201526000805160206204ec038339815191529063515361f6906044016200a440565b60405163f7fe347760e01b8152821515600482015281151560248201526000805160206204ec038339815191529063f7fe3477906044016200a440565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200d26a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d2909190620118e4565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200d2d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d2fa9190620119f7565b90506200d4206040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200d3b6896001600160a01b03166200bb17565b6040518263ffffffff1660e01b81526004016200d3d591815260200190565b602060405180830381865afa1580156200d3f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d4199190620116a9565b866200f1f1565b5095945050505050565b6000806000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200d47b57600080fd5b505af11580156200d490573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200d4e557600080fd5b505af11580156200d4fa573d6000803e3d6000fd5b50505050603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200d553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d5799190620118e4565b5060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee926001600160a01b03169163b0d96580916004808301926102609291908290030181865afa1580156200d5d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d5ff9190620118e4565b516001600160a01b03161480156200d615575082515b156200d6d65760365460608085015160a086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a015186830152905163cba2e58d60e01b815295169463cba2e58d946200d687938b93909290919060040162011b00565b604080518083038185885af11580156200d6a5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200d6cc919062011b27565b915091506200ad31565b60335460405163140e25ad60e31b8152600481018690526001600160a01b039091169063a0712d6890602401600060405180830381600087803b1580156200d71d57600080fd5b505af11580156200d732573d6000803e3d6000fd5b505060335460365460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200d76f9290911690889060040162011b81565b6020604051808303816000875af11580156200d78f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d7b5919062011bab565b5060365460a08401516080850151604080516060810182526020808901516001600160a01b03908116835289511515918301919091528289015182840152915163cba2e58d60e01b8152919094169363cba2e58d936200d81e938a939192909160040162011b00565b60408051808303816000875af11580156200d83d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200d6cc919062011b27565b60006000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200d8b357600080fd5b505af11580156200d8c8573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200d91d57600080fd5b505af11580156200d932573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b03908116855289511515918501919091528189015184830152905163ded0623160e01b81529316945063ded0623193506200d99692899289929160040162011b00565b6020604051808303816000875af11580156200d9b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200afe49190620116a9565b60006000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200da2c57600080fd5b505af11580156200da41573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03871660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200da9657600080fd5b505af11580156200daab573d6000803e3d6000fd5b505060365460408051630161b2cb60e71b8152905173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee94506001600160a01b03909216925063b0d96580916004808301926102609291908290030181865afa1580156200db10573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200db369190620118e4565b516001600160a01b03161480156200db4c575081515b156200dc1357603654606080840151608085015160a086015160c08701516040805195860181526020808a01516001600160a01b0390811688528a51151591880191909152818a0151878301529051634c2ac1d960e01b8152961695634c2ac1d9956200dbc5948b94909390929091906004016201262c565b60206040518083038185885af11580156200dbe4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200dc0b9190620116a9565b905062000849565b603354606083015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200dc4b9160040190815260200190565b600060405180830381600087803b1580156200dc6657600080fd5b505af11580156200dc7b573d6000803e3d6000fd5b5050603354603654606086015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200dcbb939092169160040162011b81565b6020604051808303816000875af11580156200dcdb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200dd01919062011bab565b50603654608083015160a084015160c0850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151634c2ac1d960e01b81529190951694634c2ac1d9946200dd70948a9491939092906004016201262c565b6020604051808303816000875af11580156200dd90573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200dc0b9190620116a9565b6000806000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200de0757600080fd5b505af11580156200de1c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200de7157600080fd5b505af11580156200de86573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a01518483015290516332f04d0d60e21b81529316945063cbc1343493506200dee89289929060040162012659565b60408051808303816000875af11580156200df07573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200ad2c919062011b27565b600080836001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200df70573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200df969190620118e4565b90506000846001600160a01b03166360246c886040518163ffffffff1660e01b81526004016101e060405180830381865afa1580156200dfda573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e0009190620119f7565b90506200afe46040518061018001604052808360000151815260200183602001518152602001836080015181526020018360e001518152602001836101c00151815260200184610140015181526020018360c001518152602001846080015181526020018460a001518152602001846101e00151600001518152602001846101e00151602001518152602001846101e0015160400151815250866001600160a01b031663cf210e656200e0bc896001600160a01b03166200bb17565b6040518263ffffffff1660e01b81526004016200e0db91815260200190565b602060405180830381865afa1580156200e0f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e11f9190620116a9565b866200f41f565b6000806000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e17757600080fd5b505af11580156200e18c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200e1e157600080fd5b505af11580156200e1f6573d6000803e3d6000fd5b50506036546200e21292506001600160a01b031690506200f5e9565b915073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316603660009054906101000a90046001600160a01b03166001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200e287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e2ad9190620118e4565b516001600160a01b03161480156200e2c3575082515b156200e3855760365460608085015160c086015160808701516040805194850181526020808a01516001600160a01b0390811687528a51151591870191909152818a0151868301529051630dbbe80760e41b815295169463dbbe8070946200e335938b93909290919060040162011b00565b604080518083038185885af11580156200e353573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200e37a919062011b27565b90925090506200ad31565b603354606084015160405163140e25ad60e31b81526001600160a01b039092169163a0712d68916200e3bd9160040190815260200190565b600060405180830381600087803b1580156200e3d857600080fd5b505af11580156200e3ed573d6000803e3d6000fd5b505060335460365460c087015160405163095ea7b360e01b81526001600160a01b03938416955063095ea7b394506200e42d939092169160040162011b81565b6020604051808303816000875af11580156200e44d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e473919062011bab565b5060365460c08401516080850151604080516060810182526020808901516001600160a01b039081168352895115159183019190915282890151828401529151630dbbe80760e41b8152919094169363dbbe8070936200e4dc938a939192909160040162011b00565b60408051808303816000875af11580156200e4fb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200e521919062011b27565b60335460608601519294509092506001600160a01b0316906342966c68906200e54c9084906201182e565b6040518263ffffffff1660e01b81526004016200e56b91815260200190565b600060405180830381600087803b1580156200e58657600080fd5b505af11580156200e59b573d6000803e3d6000fd5b50505050935093915050565b60006000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e5f757600080fd5b505af11580156200e60c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200e66157600080fd5b505af11580156200e676573d6000803e3d6000fd5b50506036546060808601516040805192830181526020808901516001600160a01b0390811685528951151591850191909152818901518483015290516329b23fc160e01b8152931694506329b23fc193506200d99692899289929160040162011b00565b6000806000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200e72b57600080fd5b505af11580156200e740573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03881660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200e79557600080fd5b505af11580156200e7aa573d6000803e3d6000fd5b50506036546060808701516040805192830181526020808a01516001600160a01b0390811685528a51151591850191909152818a015184830152905163074a6de960e01b81529316945063074a6de993506200dee89289929060040162012659565b6200e83460405180604001604052806005815260200164616c69636560d81b8152506200330d565b601e60016101000a8154816001600160a01b0302191690836001600160a01b031602179055506200e880604051806040016040528060038152602001623137b160e91b8152506200330d565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b60208201526200e8c8906200330d565b602060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200e914604051806040016040528060038152602001623230b760e91b8152506200330d565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b60208201526200e959906200330d565b602280546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260088152673232b83637bcb2b960c11b60208201526200e9a3906200330d565b602480546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b60208201526200e9eb906200330d565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b60208201526200ea39906200330d565b602580546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600e81526d39bbb2b2b821b7b63632b1ba37b960911b60208201526200ea89906200330d565b602680546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b60208201526200ead5906200330d565b602780546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b60208201526200eb1d906200330d565b602880546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260098152683932b3b4b9ba3930b960b91b60208201526200eb68906200330d565b602980546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b726577617264536f7572636560a01b60208201526200ebb6906200330d565b602a80546001600160a01b0319166001600160a01b039290921691909117905542602b55565b6200ebe662010ef9565b60006200ebf484846200f66d565b80516001600160a01b0390811684526020808301518216908501526040808301518216908501526060808301519085015260808083015160a08087019190915283015160c08087019190915283015160e08087019190915283015161010080870191909152830151610120808701919091528301516101408087019190915283015182166101608087019190915283015182166101808087019190915283015182166101a0808701919091528301519091166101c080860191909152909101516101e0840152670de0b6b3a7640000908301525092915050565b6000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200ed1c57600080fd5b505af11580156200ed31573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200ed8657600080fd5b505af11580156200ed9b573d6000803e3d6000fd5b50506037546040518493506001600160a01b0390911691506200edbe9062010fe1565b6200edcb9291906201267a565b604051809103906000f0801580156200ede8573d6000803e3d6000fd5b50603680546001600160a01b0319166001600160a01b0392831617905560375461016083015160405163dd2b8fbb60e01b8152908316600482015291169063dd2b8fbb90602401600060405180830381600087803b1580156200ee4a57600080fd5b505af11580156200ee5f573d6000803e3d6000fd5b5050603754610180840151604051631a586b9d60e31b81526001600160a01b0391821660048201529116925063d2c35ce89150602401600060405180830381600087803b1580156200eeb057600080fd5b505af11580156200eec5573d6000803e3d6000fd5b50506037546101808401516040516308627a4f60e41b81526001600160a01b03918216600482015291169250638627a4f09150602401600060405180830381600087803b1580156200ef1657600080fd5b505af11580156200ef2b573d6000803e3d6000fd5b50506037546101c0840151604051630f8b480560e21b81526001600160a01b03918216600482015291169250633e2d20149150602401600060405180830381600087803b1580156200ef7c57600080fd5b505af11580156200ef91573d6000803e3d6000fd5b505050506000805160206204ec2383398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200efe357600080fd5b505af11580156200eff8573d6000803e3d6000fd5b50506029546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206204ec0383398151915292506306447d569150602401600060405180830381600087803b1580156200f05157600080fd5b505af11580156200f066573d6000803e3d6000fd5b5060009250600191506200f0779050565b6040519080825280602002602001820160405280156200f0a1578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060365485519293506001600160a01b0316918591506000906200f10e576200f10e62011d21565b60200260200101906001600160a01b031690816001600160a01b0316815250506001826000815181106200f146576200f14662011d21565b60200260200101906001600160801b031690816001600160801b0316815250506000816000815181106200f17e576200f17e62011d21565b6001600160a01b039283166020918202929092010152603454604051630ff9856960e11b8152911690631ff30ad2906200f1c190869086908690600401620127a9565b600060405180830381600087803b1580156200f1dc57600080fd5b505af115801562001511573d6000803e3d6000fd5b60008060006200f20a866000015187602001516200f7ba565b905060006200f2288288604001518960e001518a60a001516200f7de565b90506000806200f23a8985856200f7f9565b909250905060006200f2508a8a8585886200fa90565b91505080156200f269575090945092506200ad31915050565b506200f27889838a866200fbec565b95506200f288898786866200fca4565b94506000806200f29c8b8b8a8a896200fa90565b91509150806200f3095760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d61784c6f6044820152703733b01034b99034b739b7b63b32b73a1760791b60648201526084016200ac49565b60005b898110156200f410578489106200f3825760405162461bcd60e51b815260206004820152603360248201527f52656163686564206162736f6c757465206d617820626f6e6420616d6f756e746044820152721034b7103033b2ba2fb6b0bc2fb637b733b01760691b60648201526084016200ac49565b60006200f3928d8b8a8a6200fcff565b93509050826200f3a357506200f410565b60006200f3b185836200bd7d565b6200f3bd908c62011ab5565b905060006200f3cf8f838c8c6200fca4565b90506200f3e08f8f84848d6200fa90565b909650945084156200f3f857819b50809a506200f401565b5050506200f410565b5050508060010190506200f30c565b50505050505050935093915050565b6040805160608101825260008082526020820181905291810182905260006200f451866000015187602001516200f7ba565b905060006200f46f8288604001518960e001518a60a001516200f7de565b905060006200f47f88846200fda7565b90506200f490888285858b6200feec565b15801560408701529085526200f4ac5793506200084992505050565b60006200f4bb89848a6201006f565b90506200f4cc898286868c6200feec565b1515604087018190529086526200f5405760405162461bcd60e51b815260206004820152603160248201527f496e697469616c20677565737320696e206063616c63756c6174654d617853686044820152701bdc9d18081a5cc81a5b9cdbdb1d995b9d607a1b60648201526084016200ac49565b60005b878110156200f5dc576200f55a8a83868862010161565b158015604089015260208801919091526200f5dc57602086015186516000916200f58591906200bd7d565b6200f591908462011ab5565b9050838111156200f5a357506200f5dc565b6200f5b28b8288888e6200feec565b15801560408a01529088526200f5cb578092506200f5d2565b506200f5dc565b506001016200f543565b5098975050505050505050565b6000816001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200f62b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200f6519190620118e4565b61010001516200f661836200bb17565b62009cf7919062011ab5565b6200f67762010ff0565b6040805160808101825260008082526020808301829052828401829052606080840183905284516101e0810186526033546001600160a01b039081168252818401949094526032546101009004909316838601819052855163d13053bb60e01b815295519495939491850193909263d13053bb926004808401938290030181865afa1580156200f70b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200f7319190620116a9565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec8000081526020018481526020016201518081526020016200f77a8686620101f7565b81526027546001600160a01b039081166020830152602554811660408301526026548116606083015260355416608082015260a001919091529392505050565b6000806200f7c98484620102ac565b9092509050806200d042576200d042620102ee565b60006200afe4826200f7f28588886200bf2e565b9062010307565b6000806000806200f8338688604001518960a00151670de0b6b3a76400006200f82391906201182e565b8a60c001518b60e001516201037a565b90506200f88d876101400151670de0b6b3a76400006200f85491906201182e565b6200f886670de0b6b3a76400006200f86d818a620103b2565b6200f87991906201182e565b6101208b015190620103c9565b90620103c9565b91506200f8c9876101400151670de0b6b3a76400006200f8ae91906201182e565b6200f8c284670de0b6b3a764000062011ab5565b90620103b2565b60a08801519092506200f8f7906200f8ef906200bd7b81670de0b6b3a76400006201182e565b839062010307565b91506200f9168760e001518860c00151620103b290919063ffffffff16565b6200f922908362011ab5565b91506200f93081836200bd7d565b91506200f9646200f8ef8860a00151670de0b6b3a76400006200f95491906201182e565b670de0b6b3a7640000906200bd7d565b91505060006200f9828760e00151836200bd7d90919063ffffffff16565b90506000806200f9d8896101400151670de0b6b3a76400006200f9a691906201182e565b6200bfe1670de0b6b3a76400006200f9bf818c6200bd7d565b6200f9cb91906201182e565b6101208d0151906200afed565b90506200fa37846200bfe16200fa048c60a00151670de0b6b3a7640000620103b290919063ffffffff16565b6200f7f28d6101400151670de0b6b3a76400006200fa2391906201182e565b6200bd7b87670de0b6b3a764000062011ab5565b9150506200fa518860c0015188846200bfe191906201182e565b94506200fa6585878a6101200151620103e0565b8189604001516200fa7791906201182e565b6200fa8391906201182e565b9350505050935093915050565b60008060006200faad86858a61012001518b610160015162010414565b905060006200faca8960c00151836200bd7d90919063ffffffff16565b60c08a01516200fadc9089906200bd7d565b8a516200faea919062011ab5565b6200faf691906201182e565b90506000868a608001516200fb0c919062011ab5565b905060006200fb1c8a826201042d565b6200fb279062012349565b90508a61010001516200fb488c60c00151846200bd7d90919063ffffffff16565b6200fb54919062011ab5565b60c08c01516200fb669083906200bd7d565b6200fb72908562011ab5565b106200fbd6576101008b015160c08c01516200fb909084906200bd7d565b60c08d01516200fba29084906200bd7d565b6200fbae908662011ab5565b6200fbba91906201182e565b6200fbc691906201182e565b600195509550505050506200fbe2565b60008095509550505050505b9550959350505050565b6000806200fbfd868585866201043e565b905060006200fc4c670b1a2bc2ec5000006200bfe16200fc408a60a00151670de0b6b3a76400006200fc3091906201182e565b670de0b6b3a764000090620103b2565b6200f7f2868b6200bd7d565b905060006200fc64670de0b6b3a7640000836200afed565b6200fc7c6200bfe884670de0b6b3a76400006201182e565b6200fc88919062011ab5565b90506200fc98888787846201043e565b98975050505050505050565b6000806200fcdf8487604001516200fcca8960c00151896200bd7d90919063ffffffff16565b8960a001518a60c001518b60e001516201056f565b90506200fcf38584886101200151620103e0565b6200ac8b90826201182e565b6000806200fd108686868662010594565b9092509050806200fd2557600091506200fd9e565b6200fd546200fd3d84670de0b6b3a76400006201182e565b6101208801516101608901516200bfe1916200afed565b6200fd60908362011ab5565b91506200fd76670de0b6b3a7640000836201182e565b91506200fd9b670de0b6b3a76400008760c00151846200bf2e9092919063ffffffff16565b91505b94509492505050565b6000806200fdc4600085602001516201070790919063ffffffff16565b8461010001516200fdd6919062011ab5565b905060006200fe0e8486604001518760a00151670de0b6b3a76400006200fdfe91906201182e565b8860c001518960e001516201037a565b905060006200fe666200fe548760a00151670de0b6b3a76400006200fe3491906201182e565b6200f7f26200fe48878b602001516200f7ba565b60e08b015190620103c9565b60e088015160c089015191906201071f565b6200fe7290836201182e565b9050670de0b6b3a764000081106200feb6576200feae6200fea68760a00151670de0b6b3a76400006200f95491906201182e565b829062010307565b90506200fedb565b6200fed86200fea68760a00151670de0b6b3a76400006200fc3091906201182e565b90505b60408601516200ac8b90826201182e565b6000806000806200ff27878a604001518a8c60a00151670de0b6b3a76400006200ff1791906201182e565b8d60c001518e60e0015162010746565b91509150806200ff40576000809350935050506200fbe2565b60006200ff818a60c001516200ff638b8a8e61012001518f61016001516201081e565b6200ff758c8b8f61012001516201082d565b6200f8c291906201182e565b9050808310156200ff9c57600080945094505050506200fbe2565b60006200ffaa82856201182e565b9050808b6000015110156200ffca5760008095509550505050506200fbe2565b8a516000906200ffdc9083906201182e565b90506000620100108d60c001516200ffff60008c6201070790919063ffffffff16565b8f608001516200bd7b91906201182e565b90508c61010001518162010025919062011ab5565b82106201005c576101008d01516201003e82846201182e565b6201004a91906201182e565b6001975097505050505050506200fbe2565b600080975097505050505050506200fbe2565b6000808390506000620100e78661010001516201009e8860c0015189608001516200bd7d90919063ffffffff16565b60c0890151620100b5906200bd7b89600062010707565b8951620100c3919062011ab5565b620100cf91906201182e565b620100db91906201182e565b60c0880151906200afed565b90506200ac8b6201011c6201010587670de0b6b3a76400006201182e565b6101208901516101608a01516200bfe1916200afed565b620101416201013488670de0b6b3a76400006201182e565b6101208a0151906200afed565b6201014d90856201182e565b62010159919062011ab5565b82906200bd7d565b6000806000620101738787866201084c565b90506000620101c48860c001516200bd7b8a6101600151670de0b6b3a76400006201019f91906201182e565b6200bfe1620101b78b670de0b6b3a76400006201182e565b6101208e0151906200afed565b9050808210620101e857620101da81836201182e565b60019350935050506200fd9e565b6000809350935050506200fd9e565b6000806201022e6201021e6201020f866064620117e7565b66a5bbed86c5a000906200afed565b6748cd4072281e0000906200bd7d565b905062010244670de0b6b3a7640000826200bd7d565b9050620102a4816200bfe162010277620102716201026b89670de0b6b3a764000062011ab5565b6201093b565b62010966565b6200bd7b62010271620102908a8a6301e133806200bf2e565b6201026b90670de0b6b3a764000062011ab5565b949350505050565b600080600083620102bd866201093b565b620102c99190620122bb565b90506000811215620102e35760008092509250506200b4b6565b946001945092505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003620103225750670de0b6b3a764000062009cf7565b82600003620103345750600062009cf7565b600062010341836201093b565b905060006201035462010271866201093b565b90508181026201036d670de0b6b3a76400008262012816565b90506200ac8b8162010b8e565b600062010388858562010307565b620103a66201039d866200f7f2868b6200afed565b8590856200bf2e565b6200ac8b919062011ab5565b600062009cf483670de0b6b3a7640000846201071f565b600062009cf48383670de0b6b3a76400006201071f565b600062000846846200f886670de0b6b3a7640000620104008188620103b2565b6201040c91906201182e565b8590620103c9565b60006200afe4846200bfe1846200bfe1898989620103e0565b600081831362009cf2578262009cf4565b6000806201044d85826201042d565b620104589062012349565b90506000620104d18760c00151671bc16d674ec80000896101000151620104918b60c001518c608001516200bd7d90919063ffffffff16565b60c08c0151620104a39088906200bd7d565b8c51620104b1919062011ab5565b620104bd91906201182e565b620104c991906201182e565b91906200bf2e565b905062010564620104fc670de0b6b3a7640000620104f081896200bd7d565b6201013491906201182e565b670de0b6b3a76400006201052c6201051589836201182e565b6101208c01516101608d01516200bfe1916200afed565b62010540670de0b6b3a7640000896200bd7d565b6201054c919062011ab5565b6201055891906201182e565b6201015991906201182e565b979650505050505050565b6000620105648787876201058c88670de0b6b3a76400006201182e565b878762010d27565b6000806000620105b28760c00151876200bd7d90919063ffffffff16565b90506000620105d2620105c6838862011ab5565b60e08a0151906200afed565b905060006201060a878a604001518b60a00151670de0b6b3a7640000620105fa91906201182e565b8c60c001518d60e001516201037a565b9050620106296200f9548a60a00151846201030790919063ffffffff16565b945060006201065c6201064a8b60a00151856201030790919063ffffffff16565b60e08c015160c08d015191906200bf2e565b905080821015620106785760008095509550505050506200fd9e565b620106b66200bfe8620106aa8c60a00151670de0b6b3a76400006201069e91906201182e565b60a08e015190620103b2565b6200f7f284866201182e565b9550620106ea670de0b6b3a7640000620106d1818a6200bd7d565b620106dd91906201182e565b6101208c0151906200afed565b620106f690876201182e565b9a60019a5098505050505050505050565b600081831362010718578162009cf4565b5090919050565b60008260001904841183021582026201073757600080fd5b50910281810615159190040190565b60008060006201075a898988888862010d5a565b90506201076d866200f7f2898b62011ab5565b9750878110156201078657600080925092505062010813565b878103620107968186886201071f565b9050670de0b6b3a76400008110620107c857620107c06200fea6670de0b6b3a764000089620103b2565b9050620107e3565b620107e06200fea6670de0b6b3a7640000896200bd7d565b90505b620107ef8186620103b2565b9050808a1015620108095760008093509350505062010813565b8903925060019150505b965096945050505050565b60006200afe4826200bfe18787875b600062000846846200f8866201040c86670de0b6b3a76400006201182e565b600080620108738386604001518760a00151670de0b6b3a76400006200fdfe91906201182e565b90506000620108a66200f9546201089a8860a00151888a604001516200f7f2919062011ab5565b60c089015190620103c9565b905060006201092d620108d88860a00151670de0b6b3a7640000620108cc91906201182e565b60a08a015190620103b2565b6200f7f26201090c8a60a00151670de0b6b3a7640000620108fa91906201182e565b8a8c604001516200f7f2919062011ab5565b6201091890876201182e565b60c08b015160e08c01516200bfe1916200bd7d565b90506201056482826200afed565b60006001600160ff1b038211156200c04e5760405163396ea70160e11b815260040160405180910390fd5b6000808213620109895760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c6001600160401b031060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019062010a0d9084901c6201093b565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821362010baa57506000919050565b680755bf798b4a1bf1e5821262010bd4576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906200ac8b74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6201093b565b60008062010d3a88888888888862010d86565b90925090508062010d4f5762010d4f620102ee565b509695505050505050565b600062010d68858562010307565b620103a662010d7d866200f7f2868b620103c9565b8590856201071f565b600080600062010d9a898988888862010d5a565b905062010db1866200f7f26200bfe88a8d62011ab5565b985062010dc0858a866200bf2e565b98508881101562010dd957600080925092505062010813565b888103670de0b6b3a7640000811062010e0c5762010e046200fea6670de0b6b3a764000089620103b2565b905062010e27565b62010e246200fea6670de0b6b3a7640000896200bd7d565b90505b8089101562010e3f5760008093509350505062010813565b90970398600198509650505050505050565b612035806201284b83390190565b6118f4806201488083390190565b612963806201617483390190565b6105498062018ad783390190565b61412c806201902083390190565b61231a806201d14c83390190565b6142e9806201f46683390190565b614512806202374f83390190565b6148578062027c6183390190565b6147ef806202c4b883390190565b6139178062030ca783390190565b612b8880620345be83390190565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200162010fdc6040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b62017abd806203714683390190565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200162010fdc6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b03811681146200177957600080fd5b600080600060608486031215620110f857600080fd5b83356201110581620110cc565b925060208401356201111781620110cc565b915060408401356201112981620110cc565b809150509250925092565b60008151808452602080850194506020840160005b83811015620111705781516001600160a01b03168752958201959082019060010162011149565b509495945050505050565b60208152600062009cf4602083018462011134565b60008060408385031215620111a457600080fd5b50508035926020909101359150565b60005b83811015620111d0578181015183820152602001620111b6565b50506000910152565b60008151808452620111f3816020860160208601620111b3565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015620112bd57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015620112a657605f1989850301835262011293848651620111d9565b948e01949350918d019160010162011274565b505050978a0197945050918801916001016201122e565b50919a9950505050505050505050565b600060208284031215620112e057600080fd5b5035919050565b60008060008060808587031215620112fe57600080fd5b84356201130b81620110cc565b935060208501356201131d81620110cc565b92506040850135915060608501356201133681620110cc565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156201137d576201137d62011341565b60405290565b6040516101e081016001600160401b03811182821017156201137d576201137d62011341565b604051606081016001600160401b03811182821017156201137d576201137d62011341565b604051601f8201601f191681016001600160401b0381118282101715620113f957620113f962011341565b604052919050565b60006001600160401b038211156201141d576201141d62011341565b50601f01601f191660200190565b6000602082840312156201143e57600080fd5b81356001600160401b038111156201145557600080fd5b8201601f810184136201146757600080fd5b80356201147e620114788262011401565b620113ce565b8181528560208385010111156201149457600080fd5b81602084016020830137600091810160200191909152949350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b848110156201155c57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015620115465783516001600160e01b0319168252928b019260019290920191908b01906201151a565b50978a01979550505091870191600101620114dc565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015620115c657603f19888603018452620115b3858351620111d9565b9450928501929085019060010162011594565b5092979650505050505050565b600181811c90821680620115e857607f821691505b6020821081036201160957634e487b7160e01b600052602260045260246000fd5b50919050565b600081546201161e81620115d3565b8085526020600183811680156201163e5760018114620116595762011689565b60ff1985168884015283151560051b88018301955062011689565b866000528260002060005b85811015620116815781548a820186015290830190840162011664565b890184019650505b505050505092915050565b60208152600062009cf460208301846201160f565b600060208284031215620116bc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156201171a578160001904821115620116fe57620116fe620116c3565b808516156201170c57918102915b93841c9390800290620116de565b509250929050565b600082620117335750600162009cf7565b81620117425750600062009cf7565b81600181146201175b5760028114620117665762011786565b600191505062009cf7565b60ff8411156201177a576201177a620116c3565b50506001821b62009cf7565b5060208310610133831016604e8410600b8410161715620117ab575081810a62009cf7565b620117b78383620116d9565b8060001904821115620117ce57620117ce620116c3565b029392505050565b600062009cf460ff84168362011722565b808202811582820484141762009cf75762009cf7620116c3565b634e487b7160e01b600052601260045260246000fd5b60008262011829576201182962011801565b500490565b8181038181111562009cf75762009cf7620116c3565b6000602082840312156201185757600080fd5b815160ff811681146200084957600080fd5b80516201187681620110cc565b919050565b6000608082840312156201188e57600080fd5b604051608081018181106001600160401b0382111715620118b357620118b362011341565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620118f857600080fd5b6201190262011357565b6201190d8362011869565b81526201191d6020840162011869565b6020820152620119306040840162011869565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101606201199b81850162011869565b90820152610180620119af84820162011869565b908201526101a0620119c384820162011869565b908201526101c0620119d784820162011869565b908201526101e0620119ec858583016201187b565b908201529392505050565b60006101e0828403121562011a0b57600080fd5b62011a1562011383565b825181526020808401519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c0928301519281019290925250919050565b8082018082111562009cf75762009cf7620116c3565b60018060a01b0381511682526020810151151560208301526000604082015160606040850152620102a46060850182620111d9565b8481528360208201528260408201526080606082015260006200ac8b608083018462011acb565b6000806040838503121562011b3b57600080fd5b505080516020909101519092909150565b6001600160e01b031991909116815260200190565b60006020828403121562011b7457600080fd5b81516200084981620110cc565b6001600160a01b03929092168252602082015260400190565b805180151581146201187657600080fd5b60006020828403121562011bbe57600080fd5b62009cf48262011b9a565b60208152600062009cf46020830184620111d9565b6001600160a01b03831681526040602082018190526000906200084690830184620111d9565b600082601f83011262011c1657600080fd5b815162011c27620114788262011401565b81815284602083860101111562011c3d57600080fd5b620102a4826020830160208701620111b3565b60006020828403121562011c6357600080fd5b81516001600160401b0381111562011c7a57600080fd5b620102a48482850162011c04565b600080835462011c9881620115d3565b6001828116801562011cb3576001811462011cc95762011cfa565b60ff198416875282151583028701945062011cfa565b8760005260208060002060005b8581101562011cf15781548a82015290840190820162011cd6565b50505082870194505b5050722232b83637bcb2b921b7b7b93234b730ba37b960691b835250506013019392505050565b634e487b7160e01b600052603260045260246000fd5b62011d5b8262011d4e83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548116610140840152600b8201548116610160840152600c8201548116610180840152600d820154166101a0830152600e8101546101c0830152600f8101546101e083015260108101546102008301526011015461022090910152565b8881526001600160a01b0388166020820152600061032062011e4b604084018a62011d37565b8061028084015262011e6081840189620111d9565b915050856102a0830152846102c0830152836102e0830152826103008301529998505050505050505050565b8a81526001600160a01b038a1660208201526103606040820181905260009062011eb98382018c6201160f565b905062011eca606084018b62011d37565b8281036102a084015262011edf818a620111d9565b9050876102c0840152866102e08401528561030084015282810361032084015262011f0b818662011acb565b915050826103408301529b9a5050505050505050505050565b60006001600160401b0382111562011f405762011f4062011341565b5060051b60200190565b6000602080838503121562011f5e57600080fd5b82516001600160401b038082111562011f7657600080fd5b818501915085601f83011262011f8b57600080fd5b815162011f9c620114788262011f24565b81815260059190911b8301840190848101908883111562011fbc57600080fd5b8585015b838110156200f5dc5780518581111562011fd957600080fd5b86016060818c03601f1901121562011ff057600080fd5b62011ffa620113a9565b88820151878111156201200c57600080fd5b8201603f81018d136201201e57600080fd5b8981015162012031620114788262011f24565b81815260059190911b8201604001908b8101908f8311156201205257600080fd5b6040840193505b82841015620120745783518252928c0192908c019062012059565b84525050506040820151878111156201208c57600080fd5b6201209c8d8b8386010162011c04565b8a83015250620120af6060830162011869565b604082015284525091860191860162011fc0565b6000806000808486036102a0811215620120dc57600080fd5b8551620120e981620110cc565b60208701519095506001600160401b03808211156201210757600080fd5b6201211589838a0162011c04565b9550610240603f19840112156201212b57600080fd5b6201213562011383565b9250620121456040890162011869565b8352620121556060890162011869565b6020840152620121686080890162011869565b604084015260a0880151606084015260c0880151608084015260e088015160a084015261010091508188015160c08401526101208089015160e0850152610140808a0151848601526101609350838a0151828601526101809150620121cf828b0162011869565b908501526101a0620121e38a820162011869565b848601526101c09350620121f9848b0162011869565b828601526201220c6101e08b0162011869565b908501525062012221896102008a016201187b565b83830152610280880151929450808311156201223c57600080fd5b50506201224c8782880162011c04565b91505092959194509250565b600080600080600060a086880312156201227157600080fd5b855194506020860151935060408601519250620122916060870162011b9a565b9150608086015190509295509295909350565b600082620122b657620122b662011801565b500690565b81810360008312801583831316838312821617156200d042576200d042620116c3565b8082018281126000831280158216821582161715620123015762012301620116c3565b505092915050565b6000826201231b576201231b62011801565b500790565b604081526000620123356040830185620111d9565b82810360208401526200afe48185620111d9565b6000600160ff1b8201620123615762012361620116c3565b5060000390565b6001600160a01b038681168252858116602083015284811660408301528316606082015260a060808201819052600090620105649083018462011134565b60408152620123c16040820183516001600160a01b03169052565b60006020830151620123de60608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a08401819052620124116103c085018362011134565b915060808501516201242e60c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062012461818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e0808801919091529087015161020080880191909152908701516102208088019190915290870151610240808801919091529087015161026080880191909152908701519150610280906201253482880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b90840152508101620102a4565b6000610100808352620125c68184018c620111d9565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b600060018201620126255762012625620116c3565b5060010190565b85815284602082015283604082015282606082015260a0608082015260006201056460a083018462011acb565b8381528260208201526060604082015260006200afe4606083018462011acb565b82516001600160a01b0316815261028081016020840151620126a760208401826001600160a01b03169052565b506040840151620126c360408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015162012736828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0808601518051918501919091526020810151610200850152604081015161022085015260600151610240840152831661026083015262000849565b606081526000620127be606083018662011134565b82810360208481019190915285518083528682019282019060005b81811015620128005784516001600160801b031683529383019391830191600101620127d9565b505084810360408601526200fc98818762011134565b60008262012828576201282862011801565b600160ff1b821460001984141615620128455762012845620116c3565b50059056fe6101006040523480156200001257600080fd5b506040516200203538038062002035833981016040819052620000359162000298565b8230818189898960006200004a8482620003e8565b506001620000598382620003e8565b5060ff81166080524660a0526200006f6200011e565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55506200053292505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001529190620004b4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001e257600080fd5b81516001600160401b0380821115620001ff57620001ff620001ba565b604051601f8301601f19908116603f011681019082821181831017156200022a576200022a620001ba565b81604052838152602092508660208588010111156200024857600080fd5b600091505b838210156200026c57858201830151818301840152908201906200024d565b6000602085830101528094505050505092915050565b805180151581146200029357600080fd5b919050565b60008060008060008060c08789031215620002b257600080fd5b86516001600160401b0380821115620002ca57600080fd5b620002d88a838b01620001d0565b97506020890151915080821115620002ef57600080fd5b50620002fe89828a01620001d0565b955050604087015160ff811681146200031657600080fd5b60608801519094506001600160a01b03811681146200033457600080fd5b9250620003446080880162000282565b915060a087015190509295509295509295565b600181811c908216806200036c57607f821691505b6020821081036200038d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e3576000816000526020600020601f850160051c81016020861015620003be5750805b601f850160051c820191505b81811015620003df57828155600101620003ca565b5050505b505050565b81516001600160401b03811115620004045762000404620001ba565b6200041c8162000415845462000357565b8462000393565b602080601f8311600181146200045457600084156200043b5750858301515b600019600386901b1c1916600185901b178555620003df565b600085815260208120601f198616915b82811015620004855788860151825594840194600190910190840162000464565b5085821015620004a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004c48162000357565b60018281168015620004df5760018114620004f55762000526565b60ff198416875282151583028701945062000526565b8760005260208060002060005b858110156200051d5781548a82015290840190820162000502565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a9f62000596600039600081816103d4015281816105e701528181610701015281816109e001528181610a7f01528181610dbe0152610e20015260006109bc01526000610987015260006103140152611a9f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80637a8c63b511610125578063b7009613116100ad578063dd62ed3e1161007c578063dd62ed3e1461051a578063e688747b14610545578063ea7ca2761461057b578063ed0d0efb146105b2578063f2fde38b146105d257600080fd5b8063b7009613146104b8578063bf7e214f146104cb578063c53a3985146104de578063d505accf1461050757600080fd5b806395d89b41116100f457806395d89b41146104545780639dc29fac1461045c578063a0712d681461046f578063a9059cbb14610482578063aed307771461049557600080fd5b80637a8c63b5146103cf5780637a9e5e4b146103f65780637ecebe00146104095780638da5cb5b1461042957600080fd5b806323b872dd116101a857806342966c681161017757806342966c68146103635780634b5159da1461037657806367aff4841461038957806370a082311461039c578063728b952b146103bc57600080fd5b806323b872dd146102fc578063313ce5671461030f5780633644e5151461034857806340c10f191461035057600080fd5b8063095ea7b3116101ef578063095ea7b3146102915780630bade8a4146102b45780630ea9b75b146102d757806318160ddd146102ea578063239c70ae146102f357600080fd5b806305f05a941461022157806306a36aee1461023657806306fdde0314610269578063088a4ed01461027e575b600080fd5b61023461022f366004611502565b6105e5565b005b61025661024436600461153b565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610271610671565b6040516102609190611558565b61023461028c3660046115a7565b6106ff565b6102a461029f3660046115c0565b61075c565b6040519015158152602001610260565b6102a46102c2366004611609565b600a6020526000908152604090205460ff1681565b6102346102e5366004611635565b6107c9565b61025660025481565b610256600c5481565b6102a461030a36600461167c565b6108a1565b6103367f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610260565b610256610983565b61023461035e3660046115c0565b6109de565b6102346103713660046115a7565b610a7d565b6102346103843660046116bd565b610ae2565b6102346103973660046116d9565b610b74565b6102566103aa36600461153b565b60036020526000908152604090205481565b6102346103ca366004611707565b610c3c565b6102a47f000000000000000000000000000000000000000000000000000000000000000081565b61023461040436600461153b565b610cc5565b61025661041736600461153b565b60056020526000908152604090205481565b60065461043c906001600160a01b031681565b6040516001600160a01b039091168152602001610260565b610271610daf565b61023461046a3660046115c0565b610dbc565b61023461047d3660046115a7565b610e1e565b6102a46104903660046115c0565b610eb9565b6102a46104a336600461153b565b600d6020526000908152604090205460ff1681565b6102a46104c6366004611735565b610f1f565b60075461043c906001600160a01b031681565b61043c6104ec36600461153b565b6008602052600090815260409020546001600160a01b031681565b61023461051536600461177c565b61101d565b610256610528366004611707565b600460209081526000928352604080842090915290825290205481565b6102a46105533660046117ea565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6102a461058936600461181d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b6102566105c0366004611609565b600b6020526000908152604090205481565b6102346105e036600461153b565b611261565b7f00000000000000000000000000000000000000000000000000000000000000001561064657610621336000356001600160e01b0319166112df565b6106465760405162461bcd60e51b815260040161063d90611849565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6000805461067e90611880565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa90611880565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000156107575761073b336000356001600160e01b0319166112df565b6107575760405162461bcd60e51b815260040161063d90611849565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107b79086815260200190565b60405180910390a35060015b92915050565b6107df336000356001600160e01b0319166112df565b6107fb5760405162461bcd60e51b815260040161063d906118ba565b801561082b576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610852565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610894911515815260200190565b60405180910390a3505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146108fd576108d883826118f6565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906109259084906118f6565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611a4a8339815191529061096e9087815260200190565b60405180910390a360019150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146109b9576109b4611389565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3657610a1a336000356001600160e01b0319166112df565b610a365760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610a6f57600c54811115610a6f5760405162461bcd60e51b815260040161063d90611909565b610a798282611423565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad557610ab9336000356001600160e01b0319166112df565b610ad55760405162461bcd60e51b815260040161063d90611849565b610adf338261147d565b50565b610af8336000356001600160e01b0319166112df565b610b145760405162461bcd60e51b815260040161063d906118ba565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b8a336000356001600160e01b0319166112df565b610ba65760405162461bcd60e51b815260040161063d906118ba565b8015610bd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610bfb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610894911515815260200190565b610c52336000356001600160e01b0319166112df565b610c6e5760405162461bcd60e51b815260040161063d906118ba565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d5a575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610d1990339030906001600160e01b0319600035169060040161194b565b602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611978565b610d6357600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6001805461067e90611880565b7f000000000000000000000000000000000000000000000000000000000000000015610e1457610df8336000356001600160e01b0319166112df565b610e145760405162461bcd60e51b815260040161063d90611849565b610a79828261147d565b7f000000000000000000000000000000000000000000000000000000000000000015610e7657610e5a336000356001600160e01b0319166112df565b610e765760405162461bcd60e51b815260040161063d90611849565b336000908152600d602052604090205460ff16610eaf57600c54811115610eaf5760405162461bcd60e51b815260040161063d90611909565b610adf3382611423565b33600090815260036020526040812080548391908390610eda9084906118f6565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611a4a833981519152906107b79086815260200190565b6001600160a01b038083166000908152600860205260408120549091168015610fbb5760405163b700961360e01b81526001600160a01b0382169063b700961390610f729088908890889060040161194b565b602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611978565b91505061097c565b6001600160e01b031983166000908152600a602052604090205460ff168061101457506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561106d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161063d565b60006001611079610983565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611185573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111bb5750876001600160a01b0316816001600160a01b0316145b6111f85760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161063d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611277336000356001600160e01b0319166112df565b6112935760405162461bcd60e51b815260040161063d906118ba565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6007546000906001600160a01b03168015801590611369575060405163b700961360e01b81526001600160a01b0382169063b7009613906113289087903090889060040161194b565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190611978565b8061138157506006546001600160a01b038581169116145b949350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516113bb9190611995565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80600260008282546114359190611a36565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611a4a83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906114a59084906118f6565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611a4a83398151915290602001611471565b6001600160a01b0381168114610adf57600080fd5b8015158114610adf57600080fd5b6000806040838503121561151557600080fd5b8235611520816114df565b91506020830135611530816114f4565b809150509250929050565b60006020828403121561154d57600080fd5b813561097c816114df565b60006020808352835180602085015260005b818110156115865785810183015185820160400152820161156a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156115b957600080fd5b5035919050565b600080604083850312156115d357600080fd5b82356115de816114df565b946020939093013593505050565b80356001600160e01b03198116811461160457600080fd5b919050565b60006020828403121561161b57600080fd5b61097c826115ec565b803560ff8116811461160457600080fd5b60008060006060848603121561164a57600080fd5b61165384611624565b9250611661602085016115ec565b91506040840135611671816114f4565b809150509250925092565b60008060006060848603121561169157600080fd5b833561169c816114df565b925060208401356116ac816114df565b929592945050506040919091013590565b600080604083850312156116d057600080fd5b611520836115ec565b6000806000606084860312156116ee57600080fd5b83356116f9816114df565b925061166160208501611624565b6000806040838503121561171a57600080fd5b8235611725816114df565b91506020830135611530816114df565b60008060006060848603121561174a57600080fd5b8335611755816114df565b92506020840135611765816114df565b9150611773604085016115ec565b90509250925092565b600080600080600080600060e0888a03121561179757600080fd5b87356117a2816114df565b965060208801356117b2816114df565b955060408801359450606088013593506117ce60808901611624565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156117fd57600080fd5b61180683611624565b9150611814602084016115ec565b90509250929050565b6000806040838503121561183057600080fd5b823561183b816114df565b915061181460208401611624565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061189457607f821691505b6020821081036118b457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107c3576107c36118e0565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561198a57600080fd5b815161097c816114f4565b60008083548160018260011c915060018316806119b357607f831692505b602080841082036119d257634e487b7160e01b86526022600452602486fd5b8180156119e657600181146119fb57611a28565b60ff1986168952841515850289019650611a28565b60008a81526020902060005b86811015611a205781548b820152908501908301611a07565b505084890196505b509498975050505050505050565b808201808211156107c3576107c36118e056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f4c08bf22b7daab7b7adb60ce9f0d4bce8754be91f80ef7ea2918906e21a81bc64736f6c634300081600336080604052600180546001600160a01b0319168117815560025534801561002557600080fd5b506040516118f43803806118f48339810160408190526100449161006d565b600061005082826101c1565b5050610280565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561008057600080fd5b82516001600160401b038082111561009757600080fd5b818501915085601f8301126100ab57600080fd5b8151818111156100bd576100bd610057565b604051601f8201601f19908116603f011681019083821181831017156100e5576100e5610057565b8160405282815288868487010111156100fd57600080fd5b600093505b8284101561011f5784840186015181850187015292850192610102565b600086848301015280965050505050505092915050565b600181811c9082168061014a57607f821691505b60208210810361016a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101bc576000816000526020600020601f850160051c810160208610156101995750805b601f850160051c820191505b818110156101b8578281556001016101a5565b5050505b505050565b81516001600160401b038111156101da576101da610057565b6101ee816101e88454610136565b84610170565b602080601f831160018114610223576000841561020b5750858301515b600019600386901b1c1916600185901b1785556101b8565b600085815260208120601f198616915b8281101561025257888601518255948401946001909101908401610233565b50858210156102705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6116658061028f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80630ecaea731161005b5780630ecaea73146100ff57806354fd4d5014610112578063600eb4ba14610138578063d13053bb1461016e57600080fd5b806304baa00b1461008257806306fdde03146100cc5780630710fd58146100d4575b600080fd5b6100b6604051806040016040528060158152602001744552433230466f72776172646572466163746f727960581b81525081565b6040516100c391906103fe565b60405180910390f35b6100b6610184565b6100e76100e236600461044d565b610212565b6040516001600160a01b0390911681526020016100c3565b6100e761010d36600461044d565b6102e7565b6100b660405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014f6001546002546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100c3565b6101766103c4565b6040519081526020016100c3565b6000805461019190610485565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610485565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b505050505081565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610264906103f1565b6020820181038252601f19601f82011660405250805190602001206040516020016102c694939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6002819055600180546001600160a01b0319166001600160a01b0384169081179091556040805160208101929092528101829052600090819060600160405160208183030381529060405280519060200120905060008160405161034a906103f1565b8190604051809103906000f590508015801561036a573d6000803e3d6000fd5b5090506103778585610212565b6001600160a01b0316816001600160a01b0316146103a75760405162e0775560e61b815260040160405180910390fd5b600180546001600160a01b03191681178155600255949350505050565b6040516103d3602082016103f1565b6020820181038252601f19601f820116604052508051906020012081565b611170806104c083390190565b60006020808352835180602085015260005b8181101561042c57858101830151858201604001528201610410565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561046057600080fd5b82356001600160a01b038116811461047757600080fd5b946020939093013593505050565b600181811c9082168061049957607f821691505b6020821081036104b957634e487b7160e01b600052602260045260246000fd5b5091905056fe60c060405234801561001057600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa15801561004b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061006f9190610084565b60a0526001600160a01b0316608052506100be565b6000806040838503121561009757600080fd5b82516001600160a01b03811681146100ae57600080fd5b6020939093015192949293505050565b60805160a05161100861016860003960008181610183015281816102f5015281816103a9015281816104a70152818161055201528181610664015281816107190152818161078801528181610a4d0152610bf50152600081816102ad0152818161031e015281816103ef015281816104d0015281816105a00152818161069d01528181610742015281816107d801528181610a8a01528181610b6b0152610c3301526110086000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806354fd4d50116100a2578063a9059cbb11610071578063a9059cbb14610265578063d505accf14610278578063dd62ed3e1461028d578063f698da25146102a0578063fc0c546a146102a857600080fd5b806354fd4d501461020457806370a082311461022a5780637ecebe001461023d57806395d89b411461025d57600080fd5b806318160ddd116100de57806318160ddd146101b357806323b872dd146101bb57806330adf81f146101ce578063313ce567146101f557600080fd5b806304baa00b1461011057806306fdde0314610153578063095ea7b31461015b57806317d70f7c1461017e575b600080fd5b61013d6040518060400160405280600e81526020016d22a92199182337b93bb0b93232b960911b81525081565b60405161014a9190610d57565b60405180910390f35b61013d6102e7565b61016e610169366004610da6565b61039a565b604051901515815260200161014a565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b6101a5610498565b61016e6101c9366004610dd0565b610543565b6101a57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161014a565b61013d60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6101a5610238366004610e0c565b610655565b6101a561024b366004610e0c565b60006020819052908152604090205481565b61013d61070a565b61016e610273366004610da6565b610779565b61028b610286366004610e2e565b610873565b005b6101a561029b366004610ea1565b610b41565b6101a5610ca5565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014a565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103959190810190610eea565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610f97565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161064391815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f97565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610350565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610486565b834211156108945760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108bb5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038716600090815260208190526040812054906108dd610ca5565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810184905260c0810188905260e0016040516020818303038152906040528051906020012060405160200161097692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156109e1573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614610a1f57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610b2d91815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190610fb0565b15610be65750600019610492565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190610f97565b9050610492565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60005b83811015610d4e578181015183820152602001610d36565b50506000910152565b6020815260008251806020840152610d76816040850160208701610d33565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610da157600080fd5b919050565b60008060408385031215610db957600080fd5b610dc283610d8a565b946020939093013593505050565b600080600060608486031215610de557600080fd5b610dee84610d8a565b9250610dfc60208501610d8a565b9150604084013590509250925092565b600060208284031215610e1e57600080fd5b610e2782610d8a565b9392505050565b600080600080600080600060e0888a031215610e4957600080fd5b610e5288610d8a565b9650610e6060208901610d8a565b95506040880135945060608801359350608088013560ff81168114610e8457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610eb457600080fd5b610ebd83610d8a565b9150610ecb60208401610d8a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610efc57600080fd5b815167ffffffffffffffff80821115610f1457600080fd5b818401915084601f830112610f2857600080fd5b815181811115610f3a57610f3a610ed4565b604051601f8201601f19908116603f01168101908382118183101715610f6257610f62610ed4565b81604052828152876020848701011115610f7b57600080fd5b610f8c836020830160208801610d33565b979650505050505050565b600060208284031215610fa957600080fd5b5051919050565b600060208284031215610fc257600080fd5b81518015158114610e2757600080fdfea264697066735822122072a960899472dac0f2fddb5c3e56ae5a33dcff02ecd676b675f837d812d3bbc764736f6c63430008160033a2646970667358221220f2d0dad96e859d242e1fd4ebd3c068a4fccde9f747b0157d8c35249a02a1a06464736f6c63430008160033608060405234801561001057600080fd5b50612943806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639b724ad4116100c3578063e2f273bd1161007c578063e2f273bd146103f8578063e967e3881461040b578063ea3503211461041e578063f32c9e341461043e578063f59d00b91461045e578063f851a4401461046657600080fd5b80639b724ad414610310578063a587bbe114610367578063b73e3fab14610392578063bc30e7a1146103b2578063d2f72d52146103c5578063daac24da146103e557600080fd5b80634db6c0e0116101155780634db6c0e01461027257806354fd4d50146102925780636e95d67c146102b8578063716ba5f6146102ca5780637ab4339d146102ea57806384da92a7146102fd57600080fd5b806304baa00b1461015d57806306fdde03146101a457806318bb3b54146101ac5780631ff30ad2146102205780632ad19de814610235578063392e53cd14610255575b600080fd5b61018e6040518060400160405280601281526020017148797065726472697665526567697374727960701b81525081565b60405161019b9190611fa5565b60405180910390f35b61018e610479565b6102136101ba366004611fdb565b6040805180820190915260008082526020820152506040805180820182526001600160a01b0392831660008181526006602081815294822080546001600160801b03168552929091528352600101549092169082015290565b60405161019b9190611ff6565b61023361022e366004612061565b610507565b005b610248610243366004611fdb565b6108d2565b60405161019b9190612167565b6000546102629060ff1681565b604051901515815260200161019b565b61028561028036600461217a565b610a61565b60405161019b91906121bb565b61018e60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6005545b60405190815260200161019b565b6102dd6102d836600461221b565b610baa565b60405161019b919061223d565b6102336102f836600461228a565b610ca9565b61023361030b366004612377565b610d4c565b61035861031e366004611fdb565b6040805160208082018352600091829052825180820184526001600160a01b039490941682526004905220546001600160801b0316815290565b6040519051815260200161019b565b61037a6103753660046123f6565b610dc4565b6040516001600160a01b03909116815260200161019b565b6103a56103a036600461217a565b610df4565b60405161019b9190612461565b6102dd6103c036600461221b565b611083565b6103d86103d336600461217a565b611182565b60405161019b91906124c5565b61037a6103f33660046123f6565b611443565b610233610406366004611fdb565b611458565b61023361041936600461251c565b6114cc565b61043161042c36600461217a565b611878565b60405161019b9190612587565b61045161044c366004611fdb565b611962565b60405161019b91906125c0565b6003546102bc565b60025461037a906001600160a01b031681565b60018054610486906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546104b2906125d3565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b505050505081565b6002546001600160a01b03163314610531576040516282b42960e81b815260040160405180910390fd5b84831415806105405750848114155b1561055e5760405163aaad13f760e01b815260040160405180910390fd5b60005b858110156108c9576000600660008989858181106105815761058161260d565b90506020020160208101906105969190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508585838181106105cd576105cd61260d565b90506020020160208101906105e29190612623565b6001600160801b03161580156105f757508015155b156106805760008484848181106106105761061061260d565b90506020020160208101906106259190611fdb565b6001600160a01b03161461064c57604051637a44db9560e01b815260040160405180910390fd5b61067b8888848181106106615761066161260d565b90506020020160208101906106769190611fdb565b6119f7565b610803565b8585838181106106925761069261260d565b90506020020160208101906106a79190612623565b6001600160801b0316158015906106bd57508015155b1561073f5761067b8888848181106106d7576106d761260d565b90506020020160208101906106ec9190611fdb565b8787858181106106fe576106fe61260d565b90506020020160208101906107139190612623565b8686868181106107255761072561260d565b905060200201602081019061073a9190611fdb565b611b4d565b8585838181106107515761075161260d565b90506020020160208101906107669190612623565b6001600160801b03161580159061077b575080155b156107fd5761067b8888848181106107955761079561260d565b90506020020160208101906107aa9190611fdb565b8787858181106107bc576107bc61260d565b90506020020160208101906107d19190612623565b8686868181106107e3576107e361260d565b90506020020160208101906107f89190611fdb565b611c94565b506108c1565b8383838181106108155761081561260d565b905060200201602081019061082a9190611fdb565b6001600160a01b03168686848181106108455761084561260d565b905060200201602081019061085a9190612623565b6001600160801b03168989858181106108755761087561260d565b905060200201602081019061088a9190611fdb565b6001600160a01b03167fdcdda2b8267b8fe0ebfeb2cc8f266807b412bec096d16cbbe576d46d122553e060405160405180910390a4505b600101610561565b50505050505050565b6108da611f1d565b6040805160a0810182526001600160a01b0380851660008181526006602081815286832080546001600160801b031687528484529181526001909101549093169284019290925283516306fdde0360e01b8152845187958501936306fdde0392600480820193918290030181865afa15801561095a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610982919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ed919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a58919081019061264c565b90529392505050565b6060816001600160401b03811115610a7b57610a7b61230a565b604051908082528060200260200182016040528015610ac057816020015b6040805180820190915260008082526020820152815260200190600190039081610a995790505b50905060005b82811015610ba257604051806040016040528060066000878786818110610aef57610aef61260d565b9050602002016020810190610b049190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b03168352910190600690878786818110610b4457610b4461260d565b9050602002016020810190610b599190611fdb565b6001600160a01b0390811682526020820192909252604001600020600101541690528251839083908110610b8f57610b8f61260d565b6020908102919091010152600101610ac6565b505b92915050565b6060818310610bcc57604051633b2735ab60e11b815260040160405180910390fd5b600354821115610bef5760405163e0f7becb60e01b815260040160405180910390fd5b610bf983836126b9565b6001600160401b03811115610c1057610c1061230a565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b509050825b82811015610ba25760038181548110610c5957610c5961260d565b6000918252602090912001546001600160a01b031682610c7986846126b9565b81518110610c8957610c8961260d565b6001600160a01b0390921660209283029190910190910152600101610c3e565b60005460ff1615610ccd5760405163722c395b60e11b815260040160405180910390fd5b6000805460ff19166001908117909155610ce883858361272b565b50600280546001600160a01b0319166001600160a01b038316908117909155604051610d1790859085906127ea565b604051908190038120907fe57439d837715589a751e391f73a95929ecc96ae6aa09a16be8ae312d614715790600090a3505050565b6002546001600160a01b03163314610d76576040516282b42960e81b815260040160405180910390fd5b6001610d8282826127fa565b5080604051610d9191906128b9565b604051908190038120907f9f7688a97f1ac51fe03bac18af18d6810f9f11f0db08c59b1938a9ac825ef74490600090a250565b600060038281548110610dd957610dd961260d565b6000918252602090912001546001600160a01b031692915050565b6060816001600160401b03811115610e0e57610e0e61230a565b604051908082528060200260200182016040528015610e6a57816020015b610e576040518060800160405280600081526020016060815260200160608152602001606081525090565b815260200190600190039081610e2c5790505b50905060005b82811015610ba2576000848483818110610e8c57610e8c61260d565b9050602002016020810190610ea19190611fdb565b9050604051806080016040528060046000888887818110610ec457610ec461260d565b9050602002016020810190610ed99190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160801b03166001600160801b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f84919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fef919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105a919081019061264c565b81525083838151811061106f5761106f61260d565b602090810291909101015250600101610e70565b60608183106110a557604051633b2735ab60e11b815260040160405180910390fd5b6005548211156110c85760405163e0f7becb60e01b815260040160405180910390fd5b6110d283836126b9565b6001600160401b038111156110e9576110e961230a565b604051908082528060200260200182016040528015611112578160200160208202803683370190505b509050825b82811015610ba257600581815481106111325761113261260d565b6000918252602090912001546001600160a01b03168261115286846126b9565b815181106111625761116261260d565b6001600160a01b0390921660209283029190910190910152600101611117565b6060816001600160401b0381111561119c5761119c61230a565b6040519080825280602002602001820160405280156111d557816020015b6111c2611f1d565b8152602001906001900390816111ba5790505b50905060005b82811015610ba25760008484838181106111f7576111f761260d565b905060200201602081019061120c9190611fdb565b90506040518060a001604052806006600088888781811061122f5761122f61260d565b90506020020160208101906112449190611fdb565b6001600160a01b031681526020808201929092526040016000908120546001600160801b031683529101906006908888878181106112845761128461260d565b90506020020160208101906112999190611fdb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561131c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611344919081019061264c565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113af919081019061264c565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261141a919081019061264c565b81525083838151811061142f5761142f61260d565b6020908102919091010152506001016111db565b600060058281548110610dd957610dd961260d565b6002546001600160a01b03163314611482576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b6002546001600160a01b031633146114f6576040516282b42960e81b815260040160405180910390fd5b8281146115165760405163aaad13f760e01b815260040160405180910390fd5b60005b83811015611871576000600460008787858181106115395761153961260d565b905060200201602081019061154e9190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b031690508383838181106115855761158561260d565b905060200201602081019061159a9190612623565b6001600160801b03161580156115af57508015155b156115e8576115e38686848181106115c9576115c961260d565b90506020020160208101906115de9190611fdb565b611dd9565b6117db565b8383838181106115fa576115fa61260d565b905060200201602081019061160f9190612623565b6001600160801b03161580159061162557508015155b156116b4576115e386868481811061163f5761163f61260d565b90506020020160208101906116549190611fdb565b8585858181106116665761166661260d565b905060200201602081019061167b9190612623565b6001600160a01b0391909116600090815260046020526040902080546001600160801b0319166001600160801b03909216919091179055565b8383838181106116c6576116c661260d565b90506020020160208101906116db9190612623565b6001600160801b0316158015906116f0575080155b156117d5576115e386868481811061170a5761170a61260d565b905060200201602081019061171f9190611fdb565b8585858181106117315761173161260d565b90506020020160208101906117469190612623565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039094166001600160a01b0319909416841790556040805180820182526001600160801b03938416815291831660208381019182526000958652600490529320905192518216600160801b0292909116919091179055565b50611869565b8383838181106117ed576117ed61260d565b90506020020160208101906118029190612623565b6001600160801b031686868481811061181d5761181d61260d565b90506020020160208101906118329190611fdb565b6001600160a01b03167fd840ea8cb042bc840d3e55a04618ab268434d3d0a218638360a30fdb80de63f660405160405180910390a3505b600101611519565b5050505050565b6060816001600160401b038111156118925761189261230a565b6040519080825280602002602001820160405280156118d257816020015b6040805160208101909152600081528152602001906001900390816118b05790505b50905060005b82811015610ba2576040518060200160405280600460008787868181106119015761190161260d565b90506020020160208101906119169190611fdb565b6001600160a01b031681526020810191909152604001600020546001600160801b03169052825183908390811061194f5761194f61260d565b60209081029190910101526001016118d8565b61198d6040518060800160405280600081526020016060815260200160608152602001606081525090565b604080516080810182526001600160a01b038416600081815260046020818152858320546001600160801b0316855285516306fdde0360e01b81529551889691860194936306fdde0393838101939192918290030181865afa15801561095a573d6000803e3d6000fd5b6001600160a01b038116600090815260066020526040902054600554600160801b9091046001600160801b031690611a306001826126b9565b826001600160801b031614611ae85760006005611a4e6001846126b9565b81548110611a5e57611a5e61260d565b60009182526020808320909101546001600160a01b03168083526006909152604090912080546001600160801b03808716600160801b810291909216179091556005805492935083929091908110611ab857611ab861260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6005805480611af957611af96128d5565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0395909516855260069091526040842093845560019390930180549093169092555050565b6001600160a01b03808416600090815260066020526040902060010154168015801590611b8c5750816001600160a01b0316816001600160a01b031614155b80611c2457506001600160a01b038116158015611bb157506001600160a01b03821615155b8015611c2457506040516335a2735f60e11b81526001600160a01b038581166004830152831690636b44e6be90602401602060405180830381865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2291906128eb565b155b15611c4257604051637a44db9560e01b815260040160405180910390fd5b506001600160a01b03928316600090815260066020526040902080546001600160801b0319166001600160801b0393909316929092178255600190910180546001600160a01b03191691909216179055565b6001600160a01b03811615801590611d1357506040516335a2735f60e11b81526001600160a01b038481166004830152821690636b44e6be90602401602060405180830381865afa158015611ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1191906128eb565b155b15611d3157604051637a44db9560e01b815260040160405180910390fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810180546001600160a01b039687166001600160a01b03199182168117909255604080516060810182526001600160801b0397881681529387166020858101918252968916858301908152600094855260069097529220925191518616600160801b0291909516178155915191018054919093169116179055565b6001600160a01b038116600090815260046020526040902054600354600160801b9091046001600160801b031690611e126001826126b9565b826001600160801b031614611eca5760006003611e306001846126b9565b81548110611e4057611e4061260d565b60009182526020808320909101546001600160a01b03168083526004909152604090912080546001600160801b03808716600160801b810291909216179091556003805492935083929091908110611e9a57611e9a61260d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6003805480611edb57611edb6128d5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600490935250506040812055565b6040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b60005b83811015611f70578181015183820152602001611f58565b50506000910152565b60008151808452611f91816020860160208601611f55565b601f01601f19169290920160200192915050565b602081526000611fb86020830184611f79565b9392505050565b80356001600160a01b0381168114611fd657600080fd5b919050565b600060208284031215611fed57600080fd5b611fb882611fbf565b815181526020808301516001600160a01b03169082015260408101610ba4565b60008083601f84011261202857600080fd5b5081356001600160401b0381111561203f57600080fd5b6020830191508360208260051b850101111561205a57600080fd5b9250929050565b6000806000806000806060878903121561207a57600080fd5b86356001600160401b038082111561209157600080fd5b61209d8a838b01612016565b909850965060208901359150808211156120b657600080fd5b6120c28a838b01612016565b909650945060408901359150808211156120db57600080fd5b506120e889828a01612016565b979a9699509497509295939492505050565b8051825260018060a01b0360208201511660208301526000604082015160a0604085015261212b60a0850182611f79565b9050606083015184820360608601526121448282611f79565b9150506080830151848203608086015261215e8282611f79565b95945050505050565b602081526000611fb860208301846120fa565b6000806020838503121561218d57600080fd5b82356001600160401b038111156121a357600080fd5b6121af85828601612016565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561220e576121fe848351805182526020908101516001600160a01b0316910152565b92840192908501906001016121d8565b5091979650505050505050565b6000806040838503121561222e57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561227e5783516001600160a01b031683529284019291840191600101612259565b50909695505050505050565b60008060006040848603121561229f57600080fd5b83356001600160401b03808211156122b657600080fd5b818601915086601f8301126122ca57600080fd5b8135818111156122d957600080fd5b8760208285010111156122eb57600080fd5b6020928301955093506123019186019050611fbf565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156123485761234861230a565b604052919050565b60006001600160401b038211156123695761236961230a565b50601f01601f191660200190565b60006020828403121561238957600080fd5b81356001600160401b0381111561239f57600080fd5b8201601f810184136123b057600080fd5b80356123c36123be82612350565b612320565b8181528560208385010111156123d857600080fd5b81602084016020830137600091810160200191909152949350505050565b60006020828403121561240857600080fd5b5035919050565b80518252600060208201516080602085015261242e6080850182611f79565b9050604083015184820360408601526124478282611f79565b9150506060830151848203606086015261215e8282611f79565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f198886030184526124a685835161240f565b9450928501929085019060010161248a565b5092979650505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156124b857603f1988860301845261250a8583516120fa565b945092850192908501906001016124ee565b6000806000806040858703121561253257600080fd5b84356001600160401b038082111561254957600080fd5b61255588838901612016565b9096509450602087013591508082111561256e57600080fd5b5061257b87828801612016565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b8181101561227e57835151835292840192918401916001016125a3565b602081526000611fb8602083018461240f565b600181811c908216806125e757607f821691505b60208210810361260757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561263557600080fd5b81356001600160801b0381168114611fb857600080fd5b60006020828403121561265e57600080fd5b81516001600160401b0381111561267457600080fd5b8201601f8101841361268557600080fd5b80516126936123be82612350565b8181528560208385010111156126a857600080fd5b61215e826020830160208601611f55565b81810381811115610ba457634e487b7160e01b600052601160045260246000fd5b601f821115612726576000816000526020600020601f850160051c810160208610156127035750805b601f850160051c820191505b818110156127225782815560010161270f565b5050505b505050565b6001600160401b038311156127425761274261230a565b6127568361275083546125d3565b836126da565b6000601f84116001811461278a57600085156127725750838201355b600019600387901b1c1916600186901b178355611871565b600083815260209020601f19861690835b828110156127bb578685013582556020948501946001909201910161279b565b50868210156127d85760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b81516001600160401b038111156128135761281361230a565b6128278161282184546125d3565b846126da565b602080601f83116001811461285c57600084156128445750858301515b600019600386901b1c1916600185901b178555612722565b600085815260208120601f198616915b8281101561288b5788860151825594840194600190910190840161286c565b50858210156128a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516128cb818460208701611f55565b9190910192915050565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156128fd57600080fd5b81518015158114611fb857600080fdfea2646970667358221220777f767b1fe637144ad5a8915017412418596c25176152151f2a03ad0178e8b064736f6c63430008160033608060405234801561001057600080fd5b5060405161054938038061054983398101604081905261002f91610143565b600080546001600160a01b038088166001600160a01b03199283161790925560018054878416908316179055600280548684169083161790556003805492851692909116919091179055805161008c906004906020840190610097565b50505050505061024d565b8280548282559060005260206000209081019282156100ec579160200282015b828111156100ec57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100b7565b506100f89291506100fc565b5090565b5b808211156100f857600081556001016100fd565b80516001600160a01b038116811461012857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561015b57600080fd5b61016486610111565b94506020610173818801610111565b945061018160408801610111565b935061018f60608801610111565b60808801519093506001600160401b03808211156101ac57600080fd5b818901915089601f8301126101c057600080fd5b8151818111156101d2576101d261012d565b8060051b604051601f19603f830116810181811085821117156101f7576101f761012d565b60405291825284820192508381018501918c83111561021557600080fd5b938501935b8285101561023a5761022b85610111565b8452938501939285019261021a565b8096505050505050509295509295909350565b6102ed8061025c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c415b95c11610066578063c415b95c1461013f578063d2c35ce814610152578063dd2b8fbb14610182578063e3331555146101b2578063f2596458146101c557600080fd5b806310780f73146100985780633e2d2014146100c85780638627a4f0146100fa578063a64c90bf1461012a575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f86100d636600461023a565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100f861010836600461023a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101326101d8565b6040516100bf919061026a565b6001546100ab906001600160a01b031681565b6100f861016036600461023a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6100f861019036600461023a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546100ab906001600160a01b031681565b6003546100ab906001600160a01b031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610212575b5050505050905090565b60006020828403121561024c57600080fd5b81356001600160a01b038116811461026357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102ab5783516001600160a01b031683529284019291840191600101610286565b5090969550505050505056fea264697066735822122052152688da0aeb07c841dd0583d576d116f5c5a83ba1de2226659694d1effbd464736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea26469706673582212202217d822866c8a8fcdecac35618f52937311a873e0b7e02e8b13da1f161ff80364736f6c63430008160033608060405234801561001057600080fd5b506122fa806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638cc23ce01462000033575b600080fd5b6200004a620000443660046200036d565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208b8b8b8a8a8a8a8a604051620000a890620000ec565b620000bb9897969594939291906200058d565b8190604051809103906000f5905080158015620000dc573d6000803e3d6000fd5b509b9a5050505050505050505050565b611c8c806200063983390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715620001375762000137620000fa565b60405290565b600082601f8301126200014f57600080fd5b813567ffffffffffffffff808211156200016d576200016d620000fa565b604051601f8301601f19908116603f01168101908282118183101715620001985762000198620000fa565b81604052838152866020858801011115620001b257600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620001ea57600080fd5b919050565b6000608082840312156200020257600080fd5b6040516080810181811067ffffffffffffffff82111715620002285762000228620000fa565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061026082840312156200026d57600080fd5b6200027762000110565b90506200028482620001d2565b81526200029460208301620001d2565b6020820152620002a760408301620001d2565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016062000312818401620001d2565b9082015261018062000326838201620001d2565b908201526101a06200033a838201620001d2565b908201526101c06200034e838201620001d2565b908201526101e06200036384848301620001ef565b9082015292915050565b6000806000806000806000806000806103808b8d0312156200038e57600080fd5b8a3567ffffffffffffffff80821115620003a757600080fd5b620003b58e838f016200013d565b9b50620003c68e60208f0162000259565b9a50620003d76102808e01620001d2565b99506102a08d0135915080821115620003ef57600080fd5b50620003fe8d828e016200013d565b975050620004106102c08c01620001d2565b9550620004216102e08c01620001d2565b9450620004326103008c01620001d2565b9350620004436103208c01620001d2565b9250620004546103408c01620001d2565b91506103608b013590509295989b9194979a5092959850565b80516001600160a01b0316825260208101516200049560208401826001600160a01b03169052565b506040810151620004b160408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015162000524828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006103408083528a518082850152600091505b80821015620005c5576020828d0101516103608386010152602082019150620005a1565b6103609150600082828601015281601f19601f83011685010192505050620005f1602083018a6200046d565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e08401528416610300830152909216610320909201919091529291505056fe6103206040523480156200001257600080fd5b5060405162001c8c38038062001c8c8339810160408190526200003591620006c0565b6001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fc898262000879565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e05281166103005260208b01518b5162000142955090911692509050600162000150565b505050505050505062000987565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001aa90859083906200021c16565b6200021657604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200020a918691620002cd16565b620002168482620002cd565b50505050565b6000806000846001600160a01b0316846040516200023b919062000945565b6000604051808303816000865af19150503d80600081146200027a576040519150601f19603f3d011682016040523d82523d6000602084013e6200027f565b606091505b5091509150818015620002ad575080511580620002ad575080806020019051810190620002ad919062000963565b8015620002c457506000856001600160a01b03163b115b95945050505050565b6000620002e46001600160a01b0384168362000340565b905080516000141580156200030c5750808060200190518101906200030a919062000963565b155b156200033b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620003508383600062000357565b9392505050565b6060814710156200037e5760405163cd78605960e01b815230600482015260240162000332565b600080856001600160a01b031684866040516200039c919062000945565b60006040518083038185875af1925050503d8060008114620003db576040519150601f19603f3d011682016040523d82523d6000602084013e620003e0565b606091505b509092509050620003f3868383620003fd565b9695505050505050565b6060826200041657620004108262000461565b62000350565b81511580156200042e57506001600160a01b0384163b155b156200045957604051639996b31560e01b81526001600160a01b038516600482015260240162000332565b508062000350565b805115620004725780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715620004c757620004c76200048b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004f857620004f86200048b565b604052919050565b60005b838110156200051d57818101518382015260200162000503565b50506000910152565b80516001600160a01b03811681146200053e57600080fd5b919050565b6000608082840312156200055657600080fd5b604051608081016001600160401b03811182821017156200057b576200057b6200048b565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620005c057600080fd5b620005ca620004a1565b9050620005d78262000526565b8152620005e76020830162000526565b6020820152620005fa6040830162000526565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200066581840162000526565b908201526101806200067983820162000526565b908201526101a06200068d83820162000526565b908201526101c0620006a183820162000526565b908201526101e0620006b68484830162000543565b9082015292915050565b600080600080600080600080610340898b031215620006de57600080fd5b88516001600160401b0380821115620006f657600080fd5b818b0191508b601f8301126200070b57600080fd5b8151818111156200072057620007206200048b565b62000735601f8201601f1916602001620004cd565b91508082528c60208285010111156200074d57600080fd5b6200076081602084016020860162000500565b5098506200077490508a60208b01620005ac565b9650620007856102808a0162000526565b9550620007966102a08a0162000526565b9450620007a76102c08a0162000526565b9350620007b86102e08a0162000526565b9250620007c96103008a0162000526565b9150620007da6103208a0162000526565b90509295985092959890939650565b600181811c90821680620007fe57607f821691505b6020821081036200081f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b576000816000526020600020601f850160051c81016020861015620008505750805b601f850160051c820191505b8181101562000871578281556001016200085c565b505050505050565b81516001600160401b038111156200089557620008956200048b565b620008ad81620008a68454620007e9565b8462000825565b602080601f831160018114620008e55760008415620008cc5750858301515b600019600386901b1c1916600185901b17855562000871565b600085815260208120601f198616915b828110156200091657888601518255948401946001909101908401620008f5565b5085821015620009355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200095981846020870162000500565b9190910192915050565b6000602082840312156200097657600080fd5b815180151581146200035057600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516111d462000ab86000396000818161060e0152818161067a01526108610152600081816105860152818161089101526108ef01526000818161053f0152610a8a0152600081816105da01526107100152600081816101d90152818161039b0152818161064a015281816106ac015281816106de01528181610832015281816108c40152818161092001528181610a580152610abd0152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060006107540152600050506111d46000f3fe6080604052600436106101c25760003560e01c806377d05ff4116100f7578063cbc1343411610095578063e44808bc11610064578063e44808bc146105a8578063eac3e799146105c8578063f3f70707146105fc578063f698da2514610630576101c2565b8063cbc134341461030f578063d899e11214610574578063dbbe807014610561578063ded06231146103d5576101c2565b8063a22cb465116100d1578063a22cb465146104ba578063a6e8a8591461052d578063ab033ea9146102d2578063cba2e58d14610561576101c2565b806377d05ff4146104da5780639032c726146104ed5780639cd241af1461050d576101c2565b806330adf81f11610164578063414f826d1161013e578063414f826d1461046c5780634c2ac1d91461048c5780634ed2d6ac1461049f5780637180c8ca146104ba576101c2565b806330adf81f14610403578063372500ab146104375780633e691db91461044c576101c2565b806317fad7fc116101a057806317fad7fc146103495780631c0f12b61461036957806321b57d531461038957806329b23fc1146103d5576101c2565b806301681a62146102d257806302329a29146102f4578063074a6de91461030f575b3480156101ce57600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610211929190610b93565b600060405180830381855af49150503d806000811461024c576040519150601f19603f3d011682016040523d82523d6000602084013e610251565b606091505b5091509150811561027557604051638bb0a34b60e01b815260040160405180910390fd5b600061028082610ba3565b90506001600160e01b03198116636e64089360e11b146102a257815160208301fd5b8151600319810160048401908152926102c391810160200190602401610c14565b80519650602001945050505050f35b3480156102de57600080fd5b506102f26102ed366004610cd9565b610645565b005b34801561030057600080fd5b506102f26102ed366004610d12565b34801561031b57600080fd5b5061032f61032a366004610d3f565b610672565b604080519283526020830191909152015b60405180910390f35b34801561035557600080fd5b506102f2610364366004610ddb565b6106a7565b34801561037557600080fd5b506102f2610384366004610e70565b6106d9565b34801561039557600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610340565b3480156103e157600080fd5b506103f56103f0366004610eb8565b610709565b604051908152602001610340565b34801561040f57600080fd5b506103f57f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561044357600080fd5b506102f261073d565b34801561045857600080fd5b506103f5610467366004610f12565b61082b565b34801561047857600080fd5b506102f2610487366004610f4f565b61085c565b6103f561049a366004610f71565b61088a565b3480156104ab57600080fd5b506102f2610384366004610fd5565b3480156104c657600080fd5b506102f26104d536600461101f565b6108bf565b6103f56104e8366004610d3f565b6108e8565b3480156104f957600080fd5b506102f2610508366004611054565b61091b565b34801561051957600080fd5b506102f26105283660046110d2565b610a53565b34801561053957600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b61032f61056f366004610eb8565b610a82565b34801561058057600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b457600080fd5b506102f26105c336600461110a565b610ab8565b3480156105d457600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561060857600080fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063c57600080fd5b506103f5610ae9565b61066e7f0000000000000000000000000000000000000000000000000000000000000000610b77565b5050565b60008061069e7f0000000000000000000000000000000000000000000000000000000000000000610b77565b50935093915050565b6106d07f0000000000000000000000000000000000000000000000000000000000000000610b77565b50505050505050565b6107027f0000000000000000000000000000000000000000000000000000000000000000610b77565b5050505050565b60006107347f0000000000000000000000000000000000000000000000000000000000000000610b77565b50949350505050565b604051637e90d7ef60e01b815230600482018190527f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b03831691639a99b4f0918390637e90d7ef90602401602060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190611169565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561081757600080fd5b505af1158015610702573d6000803e3d6000fd5b60006108567f0000000000000000000000000000000000000000000000000000000000000000610b77565b50919050565b6108857f0000000000000000000000000000000000000000000000000000000000000000610b77565b505050565b60006108b57f0000000000000000000000000000000000000000000000000000000000000000610b77565b5095945050505050565b6108857f0000000000000000000000000000000000000000000000000000000000000000610b77565b60006109137f0000000000000000000000000000000000000000000000000000000000000000610b77565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610950610ae9565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516109f99190611182565b600060405180830381855af49150503d8060008114610a34576040519150601f19603f3d011682016040523d82523d6000602084013e610a39565b606091505b509150915081610a4b57805160208201fd5b805160208201f35b610a7c7f0000000000000000000000000000000000000000000000000000000000000000610b77565b50505050565b600080610aae7f0000000000000000000000000000000000000000000000000000000000000000610b77565b5094509492505050565b610ae17f0000000000000000000000000000000000000000000000000000000000000000610b77565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516109f99291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610bd25780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610c0b578181015183820152602001610bf3565b50506000910152565b600060208284031215610c2657600080fd5b815167ffffffffffffffff80821115610c3e57600080fd5b818401915084601f830112610c5257600080fd5b815181811115610c6457610c64610bda565b604051601f8201601f19908116603f01168101908382118183101715610c8c57610c8c610bda565b81604052828152876020848701011115610ca557600080fd5b610cb6836020830160208801610bf0565b979650505050505050565b6001600160a01b0381168114610cd657600080fd5b50565b600060208284031215610ceb57600080fd5b8135610cf681610cc1565b9392505050565b80358015158114610d0d57600080fd5b919050565b600060208284031215610d2457600080fd5b610cf682610cfd565b60006060828403121561085657600080fd5b600080600060608486031215610d5457600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610d7957600080fd5b610d8586828701610d2d565b9150509250925092565b60008083601f840112610da157600080fd5b50813567ffffffffffffffff811115610db957600080fd5b6020830191508360208260051b8501011115610dd457600080fd5b9250929050565b60008060008060008060808789031215610df457600080fd5b8635610dff81610cc1565b95506020870135610e0f81610cc1565b9450604087013567ffffffffffffffff80821115610e2c57600080fd5b610e388a838b01610d8f565b90965094506060890135915080821115610e5157600080fd5b50610e5e89828a01610d8f565b979a9699509497509295939492505050565b60008060008060808587031215610e8657600080fd5b843593506020850135610e9881610cc1565b92506040850135610ea881610cc1565b9396929550929360600135925050565b60008060008060808587031215610ece57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610efa57600080fd5b610f0687828801610d2d565b91505092959194509250565b600060208284031215610f2457600080fd5b813567ffffffffffffffff811115610f3b57600080fd5b610f4784828501610d2d565b949350505050565b60008060408385031215610f6257600080fd5b50508035926020909101359150565b600080600080600060a08688031215610f8957600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610fbc57600080fd5b610fc888828901610d2d565b9150509295509295909350565b60008060008060808587031215610feb57600080fd5b843593506020850135610ffd81610cc1565b925060408501359150606085013561101481610cc1565b939692955090935050565b6000806040838503121561103257600080fd5b823561103d81610cc1565b915061104b60208401610cfd565b90509250929050565b600080600080600080600060e0888a03121561106f57600080fd5b873561107a81610cc1565b9650602088013561108a81610cc1565b955061109860408901610cfd565b945060608801359350608088013560ff811681146110b557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806000606084860312156110e757600080fd5b8335925060208401356110f981610cc1565b929592945050506040919091013590565b600080600080600060a0868803121561112257600080fd5b85359450602086013561113481610cc1565b9350604086013561114481610cc1565b925060608601359150608086013561115b81610cc1565b809150509295509295909350565b60006020828403121561117b57600080fd5b5051919050565b60008251611194818460208701610bf0565b919091019291505056fea2646970667358221220ef3213f4640bd82279d2d9163546bbbf46fb1930655b6924cf9c964eeba1c56264736f6c63430008160033a2646970667358221220da80ae4efa17ad2a8929021c4ca0fed08b7db670143b0a342f956f93607dab9764736f6c63430008160033608060405234801561001057600080fd5b506142c9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b613ddc806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162003ddc38038062003ddc8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161398b6200045160003960008181610d890152612396015260008181610d5a0152612359015260008181610c3401528181610eb901528181610f4901528181610fd901528181611069015281816116840152818161171c015281816118e501528181611f1001528181611fe6015261213d01526000610e21015260008181610dfb0152612549015260008181610dd50152612523015260008181610daf01526124fd01526000611176015260006111500152600061112a01526000611104015260008181610e93015261256f015260008181610e470152818161130b015261295a015260008181610e6d0152612ac001526000818161061301528181610d2b01528181611e810152612a9101526000818161074301528181610cfc01526112a4015261398b6000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104e6578063d8165743146104f9578063e44808bc1461050e578063e985e9c514610521578063fba560081461053457600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f592146104d357600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612d11565b610563565b6040516102569190612d7a565b60405180910390f35b61027261026d366004612da2565b61059a565b005b610272610282366004612dcd565b6105a3565b6102496105ac565b6102496105ee565b61029f610605565b6040516001600160a01b039091168152602001610256565b6102726102c5366004612df9565b610645565b6102726102d8366004612ed4565b610661565b6102726102eb366004612f69565b610677565b6103036102fe366004612d11565b61068a565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b610348610343366004612fb1565b6106f6565b604051908152602001610256565b61035e61073c565b60405160ff9091168152602001610256565b61034861037e366004612ff3565b6107d7565b610348610810565b610348610399366004613023565b61082f565b6103b16103ac366004612da2565b61083a565b6040519015158152602001610256565b6102496103cf366004612d11565b61085a565b6102726103e236600461305e565b610868565b6102496108b6565b6103f76108eb565b60405161025691906130a8565b610272610412366004613149565b5050565b610348610424366004612da2565b610bfa565b61029f610c26565b61027261043f366004613177565b610c66565b610272610452366004613149565b610c77565b610272610465366004612da2565b50565b610470610ce3565b60405161025691906131af565b61034861048b366004612d11565b6111ab565b61034861049e366004612d11565b6111b9565b6104b66104b13660046132d5565b6111db565b6040516102569190613317565b61029f611296565b6103486112d6565b6103486104e1366004612d11565b6112f0565b6103486104f4366004612d11565b6112fe565b610501611335565b604051610256919061335b565b61027261051c36600461346c565b611441565b6103b161052f3660046134cb565b611489565b61053c6114cd565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b60606105956105718361152c565b6040516020016105819190612d7a565b604051602081830303815290604052611654565b919050565b61046581611678565b610465816118e3565b60606105eb6040518060400160405280601181526020017053746b57656c6c4879706572647269766560781b8152506040516020016105819190612d7a565b90565b60606105eb600160405160200161058191906134f9565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b6106568989898989898989896119fd565b505050505050505050565b61066f868686868686611bf4565b505050505050565b6106848484848433611ca8565b50505050565b604080516060810182526000808252602082018190529181019190915261059560086000848152602001908152602001600020604051602001610581919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107359101610581565b9392505050565b60006105eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c391906135aa565b6040805160ff909216602083015201610581565b6000828152600a602090815260408083206001600160a01b038516845282528083205481519283015261080a9101610581565b92915050565b60006105eb61081d611e69565b60405160200161058191815260200190565b600061080a82611ef9565b600061059561084883612138565b60408051911515602083015201610581565b60606105956105718361221d565b836108728161231b565b6001600160a01b0316336001600160a01b0316146108a357604051632aab8bd360e01b815260040160405180910390fd5b6108af858585856123d8565b5050505050565b60606105eb60405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105819190612d7a565b610964604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061096e612445565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109d991906135f3565b6109e39190613606565b905060008215610af55773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1085612458565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190613619565b509050610af281846125ee565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bc657610bc18486612603565b610bc9565b60005b81526003546001600160801b0316602091820152604051919250610bf391610581918491016130a8565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105959101610581565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b610c72838383336123d8565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ceb612c2a565b6105eb6040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190613649565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613649565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190613649565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190613649565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058191906131af565b600061059561081d83612618565b6000818152600b60209081526040808320548151928301526105959101610581565b606060008267ffffffffffffffff8111156111f8576111f8613666565b604051908082528060200260200182016040528015611221578160200160208202803683370190505b50905060005b8381101561127a5760008585838181106112435761124361367c565b905060200201359050600081549050808484815181106112655761126561367c565b60209081029190910101525050600101611227565b5061128f816040516020016105819190613317565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b60006105eb60095460405160200161058191815260200190565b600061059561081d83612690565b600061059561081d6113307f0000000000000000000000000000000000000000000000000000000000000000856135f3565b6126cb565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105eb6002604051602001610581919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461144b8161231b565b6001600160a01b0316336001600160a01b03161461147c57604051632aab8bd360e01b815260040160405180910390fd5b61066f8686868686611ca8565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff909116151591810191909152909161080a9101610581565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105eb90606001610581565b606060f882901c6001600160f81b03831660006115488261270f565b9050600083600381111561155e5761155e6135c7565b03611590576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061164c565b60018360038111156115a4576115a46135c7565b036115d057806040516020016115ba9190613692565b604051602081830303815290604052935061164c565b60028360038111156115e4576115e46135c7565b036115fa57806040516020016115ba91906136cb565b600383600381111561160e5761160e6135c7565b0361164c576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b815260040161166f9190612d7a565b60405180910390fd5b6116806127c4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190613649565b9050336001600160a01b038216148015906117b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190613649565b6001600160a01b0316336001600160a01b031614155b80156117c457506117c233612138565b155b156117e1576040516282b42960e81b815260040160405180910390fd5b60006117eb611e69565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118599190613705565b905061186f6001600160a01b03851684836127ee565b81611878611e69565b14611896576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104656001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119659190613649565b6001600160a01b0316336001600160a01b03161415801561198c575061198a33612138565b155b156119a9576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119f290831515815260200190565b60405180910390a150565b83421115611a1e5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a455760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b33573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7157604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1157506001600160a01b038516155b15611c2f5760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c4f5760405163174861a760e31b815260040160405180910390fd5b60005b83811015611c9f57611c97858583818110611c6f57611c6f61367c565b905060200201358888868686818110611c8a57611c8a61367c565b9050602002013533611ca8565b600101611c52565b50505050505050565b6001600160a01b0384161580611cc557506001600160a01b038316155b15611ce35760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611da7576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611da7576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611da5576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d9f908490613606565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611dd9908490613606565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e109084906135f3565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190613705565b905090565b6000611f036127c4565b611f0c82612840565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190613649565b90506001600160a01b038116611fa96020850185612da2565b6001600160a01b031614611fd057604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061207c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120669190613649565b6001600160a01b0316336001600160a01b031614155b801561208e575061208c33612138565b155b156120ab576040516282b42960e81b815260040160405180910390fd5b60006120b5612445565b6009805460009091559091506120cc818387612876565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461210b60408a0160208b01612dcd565b60408051938452602084019290925215159082015260600160405180910390a25050506105956001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612199573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121c1919081019061371e565b905060005b815181101561221357836001600160a01b03168282815181106121eb576121eb61367c565b60200260200101516001600160a01b03160361220b575060019392505050565b6001016121c6565b5060009392505050565b606060f882901c6001600160f81b03831660006122398261270f565b9050600083600381111561224f5761224f6135c7565b03612281576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061164c565b6001836003811115612295576122956135c7565b036122ab57806040516020016115ba91906137e3565b60028360038111156122bf576122bf6135c7565b036122d557806040516020016115ba919061381b565b60038360038111156122e9576122e96135c7565b0361164c57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611ef4670de0b6b3a7640000612618565b6124bc6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125b4911661290f565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125e69290041661290f565b905292915050565b60006107358383670de0b6b3a7640000612985565b600061073583670de0b6b3a764000084612985565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f906024015b602060405180830381865af415801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190613705565b6040516363737ac960e11b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f906024015b602060405180830381865af4158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906138c9565b6000611a5a82846138f8565b6115de90846137f5565b6002546004546000916105c5916001600160801b0390911690600f0b6126dd565b600061008182611a968588886125db565b90612703565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611ad557826115de565b50919050565b6006546000908190611afe908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611c7a576000611b2883836137f5565b9050611b376111478286612778565b60068054601090611b59908490600160801b90046001600160801b031661387c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611b92858361278d90919063ffffffff16565b90506000611bc0827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611bd49190613644565b90915550611be4905081836137f5565b9150611bef82611a9c565b60028054600090611c0a9084906001600160801b0316613828565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c37826127a2565b60048054600090611c4c908490600f0b61389c565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611c8c878561278d565b91506000611cba837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611ce6817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d0957611cf882826137f5565b611d0290846137f5565b9250611d20565b611d1382826137f5565b611d1d9084613644565b92505b86861015611d4357611d338387896125db565b9250611d408287896125db565b91505b509550959350505050565b600080611d6684611d608a888a6125db565b9061278d565b9050611d738884866125db565b611d7d9082613644565b905086811115611d8d5786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e0d916001600160801b0316906137f5565b905080600003611e21576001915050611371565b6000611e2c856127cc565b905080600003611e4157600192505050611371565b600080611e4f838589612868565b9150915080611e65576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611ea192919061398a565b6040805180830381865af4158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee19190613a00565b91509150611eff611ef182611377565b611efa90613a24565b6129e3565b925082611f155760009650505050505050611371565b611f1e82611a9c565b60078054600090611f399084906001600160801b0316613828565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f6681611a9c565b60078054601090611f88908490600160801b90046001600160801b0316613828565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fe587612b7b565b6040518263ffffffff1660e01b81526004016120019190613a40565b6040805180830381865af415801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613a4f565b9150915080612057575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120bd91613644565b6120c791906137f5565b9050806000036120df57506000958695509350505050565b60008087116120ef5760006120fa565b6120fa8488846125db565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff81111561212e5761212e613a7f565b6040519080825280601f01601f191660200182016040528015612158576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612179578692505b828152826000602083013e90999098509650505050505050565b60008061219e6105ca565b90508083116121ae5760006121b8565b6121b881846137f5565b91506115de827f000000000000000000000000000000000000000000000000000000000000000061278d565b600080806122056121fd88670de0b6b3a76400006137f5565b899087612cb5565b905086156122475761221788886125c6565b91506122388a8a846122318a670de0b6b3a76400006137f5565b8989612cdb565b92506122448382613644565b90505b9750975097945050505050565b600061227261226b84670de0b6b3a76400006137f5565b83906125c6565b6115de90670de0b6b3a76400006137f5565b6000806122bb85612293611a64565b61229d9190613644565b600254610ff2908790600160801b90046001600160801b03166137f5565b909210949350505050565b600080808061231d87866123168b6123106122e98c670de0b6b3a76400006137f5565b7f0000000000000000000000000000000000000000000000000000000000000000906125c6565b906125c6565b9190612cb5565b9350612349847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061236a61236289670de0b6b3a76400006137f5565b8a9088612cb5565b9050612396817f00000000000000000000000000000000000000000000000000000000000000006125c6565b93506123c2847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123cc9084613644565b915050945094509450949050565b600080600080600080888810156124495786156123ff576123fc8d898b6125db565b9c505b61240a8c898b6125db565b9b506124158b611377565b61241e8d611377565b6124289190613657565b90506124358b898b6125db565b9a506124428a898b6125db565b9950612468565b6124528b611377565b61245b8d611377565b6124659190613657565b90505b9b9c9a9b999a975050505050505050565b60008260000361248a57508461251a565b81156124dd576124bb61249d8487613644565b6124a785876115e5565b6124b1888a6115e5565b611d609190613644565b905060006124c98588611ac6565b9050808210156124d7578091505b5061251a565b8285036124ec5750600061251a565b6125176124f984876137f5565b61250385876125c6565b61250d888a6115e5565b611d6091906137f5565b90505b95945050505050565b600060016001607f1b0319821280612541575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b60008061256d846000612cfe565b612578846000612cfe565b6125829190613657565b9050600081131561259e576125978186613644565b94506125bd565b60008112156125bd576125b081613a24565b6125ba90866137f5565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612cb5565b60008260001904841183021582026125f257600080fd5b5091020490565b6040516363737ac960e11b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063c6e6f59290602401611a0d565b600060405163350b944160e11b815260040160405180910390fd5b6126836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612d14565b50505050565b600080806126aa6126a288670de0b6b3a76400006137f5565b8990876125db565b90508615612247576126bc88886115e5565b91506122388a8a846126d68a670de0b6b3a76400006137f5565b8989612d6b565b6000806126ea8484612d7c565b9092509050806126fc576126fc611444565b5092915050565b60008160000361271c5750670de0b6b3a7640000611371565b8260000361272c57506000611371565b600061273783611377565b9050600061274c61274786611377565b612dbb565b9050818102612763670de0b6b3a764000082613a95565b905061276e81612fe1565b9695505050505050565b60006115de83670de0b6b3a764000084612cb5565b60006115de83670de0b6b3a7640000846125db565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b60035460009081906127e7906001600160801b031684612778565b90506128137f000000000000000000000000000000000000000000000000000000000000000082613644565b6002546001600160801b03161115611ad5576002547f00000000000000000000000000000000000000000000000000000000000000009061285e9083906001600160801b03166137f5565b6115de91906137f5565b61287061351c565b60008061287c84612b7b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016128b79190613a40565b6040805180830381865af41580156128d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f79190613a4f565b935090508261290c5750600091506129db9050565b600061293361292e8461016001518561014001516115e590919063ffffffff16565b611377565b61295361292e8561012001518661010001516125c690919063ffffffff16565b61295d9190613657565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac09190613ac3565b935093509350935080612adc5750600098975050505050505050565b868414612b0d57612aec84611a9c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612b3e57612b1d83612523565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612b6c57612b4e82611a9c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612b8361356e565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612c7b9116613176565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612cad92900416613176565b905292915050565b6000826000190484118302158202612ccc57600080fd5b50910281810615159190040190565b600080612cec8888888888886131ec565b909250905080611d8d57611d8d611444565b6000818313612d0d57816115de565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612d669084906132cd565b505050565b600080612cec888888888888613335565b600080600083612d8b86611377565b612d959190613657565b90506000811215612dad576000809250925050612db4565b9150600190505b9250929050565b6000808213612ddd5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612e609084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e198213612ffc57506000919050565b680755bf798b4a1bf1e58212613025576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061276e74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061318a6105ca565b6131949190613865565b90508083116131a45760006131ae565b6131ae81846137f5565b91506115de6131e5670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613865565b839061278d565b60008060006131fe89898888886133f5565b9050868810156132155760008092509250506132c2565b96869003966132248887612703565b97508781101561323b5760008092509250506132c2565b878103613249818688612cb5565b9050670de0b6b3a7640000811061327d5761327661326f670de0b6b3a764000089612778565b8290612703565b9050613295565b61329261326f670de0b6b3a76400008961278d565b90505b61329f8186612778565b9050898110156132b7576000809350935050506132c2565b899003925060019150505b965096945050505050565b60006132e26001600160a01b03841683613424565b905080516000141580156133075750808060200190518101906133059190613af9565b155b15612d6657604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b600080600061334789898888886133f5565b905061335786611a96898b613644565b97508781101561336e5760008092509250506132c2565b87810361337c818688612cb5565b9050670de0b6b3a764000081106133a9576133a261326f670de0b6b3a764000089612778565b90506133c1565b6133be61326f670de0b6b3a76400008961278d565b90505b6133cb8186612778565b9050808a10156133e3576000809350935050506132c2565b90980398600198509650505050505050565b60006134018585612703565b61341a61341286611a96868b6125c6565b859085612cb5565b6125179190613644565b60606115de8383600084600080856001600160a01b0316848660405161344a9190613b16565b60006040518083038185875af1925050503d8060008114613487576040519150601f19603f3d011682016040523d82523d6000602084013e61348c565b606091505b509150915061276e8683836060826134ac576134a7826134f3565b6115de565b81511580156134c357506001600160a01b0384163b155b156134ec57604051639996b31560e01b81526001600160a01b038516600482015260240161332c565b50806115de565b8051156135035780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610120016040528061353061356e565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600080608085870312156135e557600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561361157600080fd5b85016060818803121561362357600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b808201808211156113715761137161362e565b81810360008312801583831316838312821617156126fc576126fc61362e565b6001600160a01b03811681146105af57600080fd5b60006020828403121561369e57600080fd5b81356115de81613677565b80151581146105af57600080fd5b6000602082840312156136c957600080fd5b81356115de816136a9565b6000808335601e198436030181126136eb57600080fd5b83018035915067ffffffffffffffff82111561370657600080fd5b602001915036819003821315612db457600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c0820152600061377e60e08301848661371b565b9a9950505050505050505050565b80820182811260008312801582168215821617156137ac576137ac61362e565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a082015260006137e860c08301848661371b565b9998505050505050505050565b818103818111156113715761137161362e565b6001600160701b038181168382160190808211156126fc576126fc61362e565b6001600160801b038181168382160190808211156126fc576126fc61362e565b60006020828403121561385a57600080fd5b81516115de81613677565b80820281158282048414176113715761137161362e565b6001600160801b038281168282160390808211156126fc576126fc61362e565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156113715761137161362e565b6000602082840312156138db57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613907576139076138e2565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a08201905061399e82855161390c565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613a1357600080fd5b505080516020909101519092909150565b6000600160ff1b8201613a3957613a3961362e565b5060000390565b6101808101611371828461390c565b60008060408385031215613a6257600080fd5b825191506020830151613a74816136a9565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613aa457613aa46138e2565b600160ff1b821460001984141615613abe57613abe61362e565b500590565b60008060008060808587031215613ad957600080fd5b8451935060208501519250604085015191506060850151613623816136a9565b600060208284031215613b0b57600080fd5b81516115de816136a9565b6000825160005b81811015613b375760208186018101518583015201613b1d565b50600092019182525091905056fea264697066735822122066e303a8dabcda71e03d910056a6e779a833b50cde288de0766c0af17fc2561364736f6c63430008160033a2646970667358221220dabeb770629fcc5661d72c08cc725797472416a2f7f822494347f507c846dff964736f6c63430008160033608060405234801561001057600080fd5b50614837806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b61434a806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b506040516200434a3803806200434a8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e92620004b860003960005050600050506000610c4101526000505060008181610100015281816103100152612e550152600081816114d801528181611d2201528181611d850152818161253701528181612a3a01528181612a7601528181612c6e0152612e2f0152600081816107ef01528181610da101528181610de301528181610ed50152818161134b015281816113aa0152612e0901526000611941015260008181611a67015281816126a30152818161271c0152612f6f0152600081816109b301528181610e560152818161144501528181611a3b01526126f0015260008181610e350152818161266f0152612f2b01526000818161081001528181610d7f01528181610e0401528181610ef601528181611329015281816113cb0152612e7b0152600081816101de015281816103a8015281816108eb01526135300152600081816106a9015281816107290152818161079f0152818161086b01526108a30152600081816116a30152818161171a015261179b01526000818161167601526116d70152613e926000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c3660046138e6565b61006d565b6040805192835260208301919091520160405180910390f35b6100416100683660046138e6565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a461052a565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610554565b6100de83610575565b6000806100eb88866105ae565b909250905060006100fc8383610683565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106a1565b905061017a8184600460016106d2565b50600080600061018a8787610d50565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c8919061395b565b909155506101d99050844283610f32565b6102037f00000000000000000000000000000000000000000000000000000000000000008561395b565b98506102118389888c611070565b600061021e60018b61120a565b90506102378161023160208e018e613983565b8b61123f565b8d8a8a898e8561024a6020830183613983565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661028760408801602089016139ae565b8961029560408a018a6139cb565b6040516102a89796959493929190613a3b565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d461052a565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610554565b61030e83610575565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b60006103596112e7565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106a1565b9050600061039f6103956106a1565b84600460016106d2565b905060006103cd7f00000000000000000000000000000000000000000000000000000000000000008461395b565b90506000806000806103e08e89886112fa565b60098054949850929650909450925083916000906103ff90849061395b565b909155506104109050874283610f32565b50600061041e84898d611480565b9050808d10156104415760405163c972651760e01b815260040160405180910390fd5b61044b818c6105ae565b508e905061045b81858b896114b2565b600061046860028861120a565b90508c6104828261047c6020840184613983565b8561123f565b858b86846104936020860186613983565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d060408b0160208c016139ae565b6104e4896104de8a8d613a7c565b90610683565b8d6104f260408e018e6139cb565b604051610506989796959493929190613a8f565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361054d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b341561057357604051631574f9f360e01b815260040160405180910390fd5b565b60006105846020830183613983565b6001600160a01b0316036105ab5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b816000806105c260408501602086016139ae565b156105e7576105dd856105d860408701876139cb565b611666565b90935090506105ff565b50346105ff856105fa60408701876139cb565b61178e565b6106076112e7565b9150801561067a57604051600090339083908381818185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106988383670de0b6b3a76400006117c8565b90505b92915050565b60006106cd427f00000000000000000000000000000000000000000000000000000000000000006117e6565b905090565b600084815260086020526040812060018101546001600160801b03161515806106fa57504286115b1561071357600101546001600160801b03169050610d48565b60008060006107206106a1565b9050600061074e7f00000000000000000000000000000000000000000000000000000000000000008b61395b565b90505b818110156107c4576000818152600860205260409020600101546001600160801b0316801561079c576000828152600860205260409020549094506001600160801b031692506107c4565b507f000000000000000000000000000000000000000000000000000000000000000001610751565b83600003610837578893506108346107da6117fc565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061181d565b92505b506108418361183d565b6001850180546001600160801b0319166001600160801b03929092169190911790556108976108907f00000000000000000000000000000000000000000000000000000000000000008b613a7c565b8a84610f32565b6108d5896108cf6108c87f00000000000000000000000000000000000000000000000000000000000000008361395b565b429061186b565b84610f32565b6108de88611880565b50600090506008816109107f00000000000000000000000000000000000000000000000000000000000000008d613a7c565b815260208101919091526040016000908120600101546001600160801b0316915061093c60028c61120a565b6000818152600b60205260408120549192508c8c8315610a82576001925060008061096b86898d866000611a24565b915091508060096000828254610981919061395b565b9091555061099d90508660008461099781611af3565b88611b1d565b6109a7818361395b565b91506109d786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611c97565b91506109eb6109e68385610683565b611ce1565b60068054600290610a0c9084906201000090046001600160701b0316613ad7565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a398261183d565b60068054601090610a5b908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610a8f60018461120a565b6000818152600b60205260409020549091508015610b9e5760019450600080610abc838b8f886001611a24565b915091508060096000828254610ad2919061395b565b90915550610aee905083600084610ae881611af3565b8a611d0b565b610af88183613a7c565b9150610b076109e68387610683565b60068054600290610b289084906201000090046001600160701b0316613ad7565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b558261183d565b60068054601090610b77908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bd857610bca610bb087611af3565b610bb983611af3565b610bc39190613b17565b6000611efc565b8e610bd58482611f3b565b50505b6000610be384612135565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613b37565b90506001600160a01b03811615610d3657610d335a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612281565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610d606117fc565b600254909150610dc5908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f000000000000000000000000000000000000000000000000000000000000000061230c565b600254909450610e28908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061181d565b9150610e7f8785610e7a857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612338565b61239d565b15610e8c57610e8c6123df565b610e98878588856123f8565b91965094509250670de0b6b3a7640000610f1a610eb5878461395b565b600254610ed3908890600160801b90046001600160801b0316613a7c565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061181d565b1115610f2857610f286123df565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610f5e5750505050565b6000848152600860205260408120546001600160801b031690819003610fb857610f878361183d565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611036565b611009611004670de0b6b3a7640000610fd18886613a7c565b610fdb9190613b54565b85670de0b6b3a7640000610fef878a613a7c565b610ff99190613b54565b859291906001612444565b61183d565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61103f8461183d565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110b26110048261109c670de0b6b3a764000086613b54565b6005546001600160801b03169190886001612444565b600580546001600160801b0319166001600160801b03929092169190911790556110db8561183d565b600280546000906110f69084906001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111238461183d565b60028054601090611145908490600160801b90046001600160801b0316613b6b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111728461183d565b61117c9082613af7565b600380546001600160801b03808416600160801b029116179055905060006111a3836124ec565b90506111c1816111b287611af3565b6111bc9084613b8b565b611efc565b6111ca84612530565b6111d6576111d66123df565b60006111e185612590565b90508061120157604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b038211156112345760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b03861684529091528120805483929061127190849061395b565b90915550506000838152600b60205260408120805483929061129490849061395b565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60006106cd670de0b6b3a764000061259d565b600080600080600061130a6117fc565b60025490915061136f908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612614565b93508761137c8589612635565b111561138a5761138a6123df565b60025460009081906113ef908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061181d565b93506114058a670de0b6b3a7640000868c61264a565b5091935090915061141890508183613a7c565b6114229087613a7c565b95508861146f816114698d611437868c613a7c565b8d6114428782612758565b877f000000000000000000000000000000000000000000000000000000000000000061276e565b90612635565b975090945050505093509350935093565b600061149260408301602084016139ae565b1561149e5750826114ab565b6114a88484612793565b90505b9392505050565b6002546001600160801b0316838110156114ce576114ce6123df565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611506908390600f0b6127a8565b1015611514576115146123df565b60045461155e9061100490600160801b90046001600160801b0316611541670de0b6b3a764000086613b54565b600554600160801b90046001600160801b03169190896001612444565b600580546001600160801b03928316600160801b0292169190911790556115848161183d565b600280546001600160801b0319166001600160801b03929092169190911790556115ad8561183d565b600280546010906115cf908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506115fc8561183d565b6004805460109061161e908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061164d836124ec565b90506111c18161165c88611af3565b6111bc9084613b17565b60008061169e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330886127ce565b6116fe7f00000000000000000000000000000000000000000000000000000000000000006116cd87600161395b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061283b565b6040516356e4bb9760e11b8152306004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e90604401600060405180830381600087803b15801561176657600080fd5b505af115801561177a573d6000803e3d6000fd5b50879450600093505050505b935093915050565b6117c36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866127ce565b505050565b60008260001904841183021582026117df57600080fd5b5091020490565b60006117f28284613bc9565b6106989084613a7c565b6002546004546000916106cd916001600160801b0390911690600f0b6127a8565b60006118348261182e8588886117c8565b906128cb565b95945050505050565b60006001600160801b0382111561186757604051630f0af95160e11b815260040160405180910390fd5b5090565b600081831161187a5782610698565b50919050565b60065460009081906118a3908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611a1f5760006118cd8383613a7c565b90506118dc6110048286612936565b600680546010906118fe908490600160801b90046001600160801b0316613b6b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611937858361279390919063ffffffff16565b90506000611965827f0000000000000000000000000000000000000000000000000000000000000000610683565b90508060096000828254611979919061395b565b9091555061198990508183613a7c565b91506119948261183d565b600280546000906119af9084906001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506119dc8261294b565b600480546000906119f1908490600f0b613bdd565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611a318785612793565b91506000611a5f837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611a8b817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611aae57611a9d8282613a7c565b611aa79084613a7c565b9250611ac5565b611ab88282613a7c565b611ac2908461395b565b92505b86861015611ae857611ad88387896117c8565b9250611ae58287896117c8565b91505b509550959350505050565b60006001600160ff1b038211156118675760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611b6661100482611b49670de0b6b3a764000086613b54565b600554600160801b90046001600160801b031691908a6000612444565b600580546001600160801b03928316600160801b029216919091179055611b8c8661183d565b611b969082613b6b565b600480546001600160801b03928316600160801b029216919091179055611bbc8461183d565b60028054600090611bd79084906001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c0483612975565b60048054600090611c19908490600f0b613bdd565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611c498561183d565b60028054601090611c6b908490600160801b90046001600160801b0316613b6b565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611caf84611ca98a888a6117c8565b90612793565b9050611cbc8884866117c8565b611cc6908261395b565b905086811115611cd65786810391505b509695505050505050565b60006001600160701b038211156118675760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611d4d57507f0000000000000000000000000000000000000000000000000000000000000000611d4b8583613a7c565b105b15611d5a57611d5a6123df565b6004549084900390600f0b611d6f8482613b17565b905083611d7b86611af3565b138015611db057507f0000000000000000000000000000000000000000000000000000000000000000611dae83836127a8565b105b15611dbd57611dbd6123df565b600354600160801b90046001600160801b0316611dff61100482611de9670de0b6b3a764000088613b54565b6005546001600160801b031691908c6000612444565b600580546001600160801b0319166001600160801b0392909216919091179055611e298882613a7c565b9050611e348161183d565b600380546001600160801b03928316600160801b029216919091179055611e5a8361183d565b600280546001600160801b0319166001600160801b0392909216919091179055611e8382612975565b600480546001600160801b0319166001600160801b0392909216919091179055611eac8761183d565b60028054601090611ece908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f1790611004906001600160801b031684846129b1565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611f86916001600160801b031690613a7c565b905080600003611f9a57600191505061069b565b6000611fa585612a18565b905080600003611fba5760019250505061069b565b600080611fc8838589612ab4565b9150915080611fde57600094505050505061069b565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161201a929190613c88565b6040805180830381865af4158015612036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205a9190613cfe565b9150915061207861206a82611af3565b61207390613d22565b612c28565b92508261208e576000965050505050505061069b565b6120978261183d565b600780546000906120b29084906001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120df8161183d565b60078054601090612101908490600160801b90046001600160801b0316613af7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61215e87612dc0565b6040518263ffffffff1660e01b815260040161217a9190613d3e565b6040805180830381865af4158015612196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ba9190613d4d565b91509150806121d0575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122369161395b565b6122409190613a7c565b90508060000361225857506000958695509350505050565b6000808711612268576000612273565b6122738488846117c8565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156122a7576122a7613d7d565b6040519080825280601f01601f1916602001820160405280156122d1576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156122f2578692505b828152826000602083013e90999098509650505050505050565b600061232d87878761232688670de0b6b3a7640000613a7c565b8787612efa565b979650505050505050565b60006114a861237961235284670de0b6b3a7640000613a7c565b611469670de0b6b3a7640000612368818a612936565b6123729190613a7c565b8790612635565b61238b90670de0b6b3a764000061395b565b611ca984670de0b6b3a7640000613a7c565b6000806123d4856123ac6117fc565b6123b6919061395b565b600254610ed3908790600160801b90046001600160801b0316613a7c565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061240b898789612f1d565b909250905061241a8289613a7c565b9750600061242982888a6117c8565b9050612435818b613a7c565b9a989950979650505050505050565b600082600003612455575084611834565b81156124a857612486612468848761395b565b6124728587610683565b61247c888a610683565b611ca9919061395b565b90506000612494858861186b565b9050808210156124a2578091505b50611834565b8285036124b757506000611834565b6124e26124c48487613a7c565b6124ce8587612635565b6124d8888a610683565b611ca99190613a7c565b9695505050505050565b6000612514600b600061250060028661120a565b815260200190815260200160002054611af3565b612526600b600061250060018761120a565b61069b9190613b17565b600061255c7f000000000000000000000000000000000000000000000000000000000000000083612635565b60035461257291906001600160801b031661395b565b600254612588906001600160801b031684610683565b101592915050565b600061069b826004611f3b565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f90602401602060405180830381865af41580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190613d93565b600061232d87878761262e88670de0b6b3a7640000613a7c565b8787612f9d565b60006106988383670de0b6b3a7640000612fae565b600080808061269b87866126948b61146961266d8c670de0b6b3a7640000613a7c565b7f000000000000000000000000000000000000000000000000000000000000000090612635565b9190612fae565b93506126c7847f0000000000000000000000000000000000000000000000000000000000000000610683565b915060006126e86126e089670de0b6b3a7640000613a7c565b8a9088612fae565b9050612714817f0000000000000000000000000000000000000000000000000000000000000000612635565b9350612740847f0000000000000000000000000000000000000000000000000000000000000000610683565b61274a908461395b565b915050945094509450949050565b60008183116127675781610698565b5090919050565b600080612786846127808a888a612fae565b90612936565b9050611cbc888486612fae565b600061069883670de0b6b3a7640000846117c8565b6000806127b58484612fd4565b9092509050806127c7576127c76123df565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526128359186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613010565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261288c8482613078565b612835576040516001600160a01b038481166024830152600060448301526128c191869182169063095ea7b390606401612803565b6128358482613010565b6000816000036128e45750670de0b6b3a764000061069b565b826000036128f45750600061069b565b60006128ff83611af3565b9050600061291461290f86611af3565b61311b565b905081810261292b670de0b6b3a764000082613dac565b90506124e281613341565b600061069883670de0b6b3a764000084612fae565b600060016001607f1b038211156118675760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612993575060016001607f1b0382135b156118675760405163a5353be560e01b815260040160405180910390fd5b6000806129bf8460006134d6565b6129ca8460006134d6565b6129d49190613b17565b905060008113156129f0576129e9818661395b565b9450612a0f565b6000811215612a0f57612a0281613d22565b612a0c9086613a7c565b94505b50929392505050565b6003546000908190612a33906001600160801b031684612936565b9050612a5f7f00000000000000000000000000000000000000000000000000000000000000008261395b565b6002546001600160801b0316111561187a576002547f000000000000000000000000000000000000000000000000000000000000000090612aaa9083906001600160801b0316613a7c565b6114ab9190613a7c565b612abc613833565b600080612ac884612dc0565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612b039190613d3e565b6040805180830381865af4158015612b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b439190613d4d565b9350905082612b585750600091506117869050565b6000612b7f612b7a84610160015185610140015161068390919063ffffffff16565b611af3565b612b9f612b7a85610120015186610100015161263590919063ffffffff16565b612ba99190613b17565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d059190613dda565b935093509350935080612d215750600098975050505050505050565b868414612d5257612d318461183d565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612d8357612d6283612975565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612db157612d938261183d565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612dc8613885565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612ec091166134e5565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612ef2929004166134e5565b905292915050565b600080612f0b88888888888861355b565b909250905080611cd657611cd66123df565b600080612f678561146985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f5d818c612936565b6114699190613a7c565b9150612f93827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b600080612f0b888888888888613623565b6000826000190484118302158202612fc557600080fd5b50910281810615159190040190565b600080600083612fe386611af3565b612fed9190613b17565b9050600081121561300557600080925092505061067c565b946001945092505050565b60006130256001600160a01b038416836136e3565b9050805160001415801561304a5750808060200190518101906130489190613e10565b155b156117c357604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516130959190613e2d565b6000604051808303816000865af19150503d80600081146130d2576040519150601f19603f3d011682016040523d82523d6000602084013e6130d7565b606091505b50915091508180156131015750805115806131015750808060200190518101906131019190613e10565b80156118345750505050506001600160a01b03163b151590565b600080821361313d5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131c09084901c611af3565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361335c57506000919050565b680755bf798b4a1bf1e58212613385576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906124e274029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611af3565b60008183136127675781610698565b600080670de0b6b3a76400006134f96106a1565b6135039190613b54565b905080831161351357600061351d565b61351d8184613a7c565b91506114ab613554670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b54565b8390612793565b600080600061356d89898888886136f1565b90506135878661182e6135808a8d61395b565b8790610683565b9850613594858a866117c8565b9850888110156135ab576000809250925050613618565b888103670de0b6b3a764000081106135e0576135d96135d2670de0b6b3a764000089612936565b82906128cb565b90506135f8565b6135f56135d2670de0b6b3a764000089612793565b90505b8089101561360e57600080935093505050613618565b8803925060019150505b965096945050505050565b600080600061363589898888886136f1565b90506136458661182e898b61395b565b97508781101561365c576000809250925050613618565b87810361366a818688612fae565b9050670de0b6b3a76400008110613697576136906135d2670de0b6b3a764000089612936565b90506136af565b6136ac6135d2670de0b6b3a764000089612793565b90505b6136b98186612936565b9050808a10156136d157600080935093505050613618565b90980398600198509650505050505050565b606061069883836000613720565b60006136fd85856128cb565b61371661370e8661182e868b612635565b859085612fae565b6124e2919061395b565b6060814710156137455760405163cd78605960e01b815230600482015260240161306f565b600080856001600160a01b031684866040516137619190613e2d565b60006040518083038185875af1925050503d806000811461379e576040519150601f19603f3d011682016040523d82523d6000602084013e6137a3565b606091505b50915091506124e28683836060826137c3576137be8261380a565b6114ab565b81511580156137da57506001600160a01b0384163b155b1561380357604051639996b31560e01b81526001600160a01b038516600482015260240161306f565b50806114ab565b80511561381a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101200160405280613847613885565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600080608085870312156138fc57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561392857600080fd5b85016060818803121561393a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069b5761069b613945565b6001600160a01b03811681146105ab57600080fd5b60006020828403121561399557600080fd5b81356114ab8161396e565b80151581146105ab57600080fd5b6000602082840312156139c057600080fd5b81356114ab816139a0565b6000808335601e198436030181126139e257600080fd5b83018035915067ffffffffffffffff8211156139fd57600080fd5b60200191503681900382131561067c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a6f60c083018486613a12565b9998505050505050505050565b8181038181111561069b5761069b613945565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613ac960e083018486613a12565b9a9950505050505050505050565b6001600160701b038181168382160190808211156127c7576127c7613945565b6001600160801b038181168382160190808211156127c7576127c7613945565b81810360008312801583831316838312821617156127c7576127c7613945565b600060208284031215613b4957600080fd5b81516114ab8161396e565b808202811582820484141761069b5761069b613945565b6001600160801b038281168282160390808211156127c7576127c7613945565b8082018281126000831280158216821582161715613bab57613bab613945565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613bd857613bd8613bb3565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069b5761069b613945565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613c9c828551613c0a565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613d1157600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d3757613d37613945565b5060000390565b610180810161069b8284613c0a565b60008060408385031215613d6057600080fd5b825191506020830151613d72816139a0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613da557600080fd5b5051919050565b600082613dbb57613dbb613bb3565b600160ff1b821460001984141615613dd557613dd5613945565b500590565b60008060008060808587031215613df057600080fd5b845193506020850151925060408501519150606085015161393a816139a0565b600060208284031215613e2257600080fd5b81516114ab816139a0565b6000825160005b81811015613e4e5760208186018101518583015201613e34565b50600092019182525091905056fea2646970667358221220e40b6a79927f1440e954aa203d3fdee243a6aa1704e9907500700fd39baca41164736f6c63430008160033a26469706673582212207d16dc8f07a73cab53122c21d391260c8d646c26d94df05c794b632a57b4d25464736f6c63430008160033608060405234801561001057600080fd5b506147cf806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b6142e2806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b50604051620042e2380380620042e28339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e1a620004c8600039600050506000505060006112f901526000818161030301528181610332015261035f01526000818160de015281816105a9015261172001526000818161085601528181610941015281816109d401528181610add015281816115f1015281816116fa0152818161214d015281816121b001528181612a8f01528181612ee20152612f1e01526000818161013f015281816108c601528181610ea7015281816114b5015281816115190152818161156001526116d401526000611d52015260008181611ead015261317701526000818161106b0152611e810152600061312d0152600081816101810152818161091901528181610ec801528181611485015281816114e901528181611581015261174601526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fa30152612a2501526000818161029701528181610d6601528181610de101528181610e5701528181610f230152610f5b0152600081816119f601528181611a6d0152611aee0152600081816119c90152611a2a0152613e1a6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c36600461383e565b610066565b60405190815260200160405180910390f35b6100416100613660046138a2565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c04565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c3d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c63565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610c89565b9150915060006101ed610d5e565b90506101fd818360046001610d8a565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b613908565b611408565b611452565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f00000000000000000000000000000000000000000000000000000000000000008961391b565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061165f565b90506103287f000000000000000000000000000000000000000000000000000000000000000082613908565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f00000000000000000000000000000000000000000000000000000000000000008261391b565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b039091169061391b565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c908390613908565b9050600080600061043c8a61168b565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104769084906004016139ac565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b791906139bb565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b918591016139ac565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906139bb565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e818761391b565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b91906139e9565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613908565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f60208501856139e9565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613a14565b866107ca60408c018c613a31565b6040516107dd9796959493929190613a78565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613acc565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612445929190613c2d565b6040805180830381865af4158015612461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124859190613ca3565b915091506124a3612495826117c5565b61249e90613cc7565b612a49565b9250826124b9576000965050505050505061144c565b6124c28261193c565b600780546000906124dd9084906001600160801b0316613b31565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061250a8161193c565b6007805460109061252c908490600160801b90046001600160801b0316613b31565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125898761168b565b6040518263ffffffff1660e01b81526004016125a591906139ac565b6040805180830381865af41580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e59190613ce3565b91509150806125fb575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161266191613908565b61266b919061391b565b90508060000361268357506000958695509350505050565b600080871161269357600061269e565b61269e848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126d2576126d2613d13565b6040519080825280601f01601f1916602001820160405280156126fc576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561271d578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612748866117c5565b6127529190613b51565b9050600081121561276a576000809250925050610d57565b946001945092505050565b600080600061278788888888886130cb565b905060006127b2670de0b6b3a76400006127a18888612e81565b6127ab9190613908565b8390611837565b9050670de0b6b3a764000081106127e6576127df6127d8670de0b6b3a764000089611837565b8290612bfa565b90506127fe565b6127fb6127d8670de0b6b3a764000089612e81565b90505b6128088186611837565b9050888110156128205760008093509350505061272f565b97909703976001975095505050505050565b600080600061284489898888886130fa565b905061285e866119b36128578a8d613908565b87906120f7565b985061286b858a86611819565b985088811015612882576000809250925050611654565b888103670de0b6b3a764000081106128b0576128a96127d8670de0b6b3a764000089612e81565b90506128c8565b6128c56127d8670de0b6b3a764000089611837565b90505b808910156128de57600080935093505050611654565b90970398600198509650505050505050565b600080600080600061290389878961311f565b9092509050612912828961391b565b9750600061292182888a611819565b905061292d818b61391b565b9a989950979650505050505050565b60008061294a8460006131a5565b6129558460006131a5565b61295f9190613b51565b9050600081131561297b576129748186613908565b945061299a565b600081121561299a5761298d81613cc7565b612997908661391b565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129cb57600080fd5b50910281810615159190040190565b600080670de0b6b3a76400006129ee610d5e565b6129f89190613acc565b9050808311612a08576000612a12565b612a12818461391b565b91506100916127ab670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613acc565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b269190613d29565b935093509350935080612b425750600098975050505050505050565b868414612b7357612b528461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612ba457612b8383611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612bd257612bb48261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c135750670de0b6b3a764000061144c565b82600003612c235750600061144c565b6000612c2e836117c5565b90506000612c43612c3e866117c5565b6131bb565b9050818102612c5a670de0b6b3a764000082613d6a565b9050612c65816133e1565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612cd69186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613576565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d2d84826135de565b612cd6576040516001600160a01b03848116602483015260006044830152612d6291869182169063095ea7b390606401612ca4565b612cd68482613576565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f90602401602060405180830381865af4158015612dbf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c91906139bb565b600082600003612df4575084610078565b8115612e4757612e25612e078487613908565b612e1185876120f7565b612e1b888a6120f7565b6116859190613908565b90506000612e338588611c82565b905080821015612e41578091505b50610078565b828503612e5657506000610078565b610075612e63848761391b565b612e6d85876129a3565b612e77888a6120f7565b611685919061391b565b600061009183670de0b6b3a7640000846129b4565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612edb906001600160801b031684612e81565b9050612f077f000000000000000000000000000000000000000000000000000000000000000082613908565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f529083906001600160801b031661391b565b610091919061391b565b612f646137da565b600080612f708461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612fab91906139ac565b6040805180830381865af4158015612fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612feb9190613ce3565b9350905082613000575060009150611ad99050565b60006130226116168461016001518561014001516120f790919063ffffffff16565b6130426116168561012001518661010001516129a390919063ffffffff16565b61304c9190613b51565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130d78585612bfa565b6130f06130e8866119b3868b6120f7565b859085611819565b6100759190613908565b60006131068585612bfa565b6130f0613117866119b3868b6129a3565b8590856129b4565b60008061316f8561316985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061315f818c612e81565b613169919061391b565b906129a3565b915061319b827f00000000000000000000000000000000000000000000000000000000000000006120f7565b9050935093915050565b60008183136131b45781610091565b5090919050565b60008082136131dd5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132609084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133fc57506000919050565b680755bf798b4a1bf1e58212613425576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c6574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b600061358b6001600160a01b03841683613681565b905080516000141580156135b05750808060200190518101906135ae9190613d98565b155b15611b1657604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516135fb9190613db5565b6000604051808303816000865af19150503d8060008114613638576040519150601f19603f3d011682016040523d82523d6000602084013e61363d565b606091505b50915091508180156136675750805115806136675750808060200190518101906136679190613d98565b80156100785750505050506001600160a01b03163b151590565b60606100918383600084600080856001600160a01b031684866040516136a79190613db5565b60006040518083038185875af1925050503d80600081146136e4576040519150601f19603f3d011682016040523d82523d6000602084013e6136e9565b606091505b5091509150612c658683836060826137095761370482613750565b610091565b815115801561372057506001600160a01b0384163b155b1561374957604051639996b31560e01b81526001600160a01b03851660048201526024016135d5565b5080610091565b8051156137605780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806137ee613779565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561385657600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561388957600080fd5b6138958882890161382c565b9150509295509295909350565b6000806000606084860312156138b757600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156138dc57600080fd5b6138e88682870161382c565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c6138f2565b8181038181111561144c5761144c6138f2565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c828461392e565b6000602082840312156139cd57600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b6000602082840312156139fb57600080fd5b8135610091816139d4565b8015158114610c3a57600080fd5b600060208284031215613a2657600080fd5b813561009181613a06565b6000808335601e19843603018112613a4857600080fd5b83018035915067ffffffffffffffff821115613a6357600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c6138f2565b600080600060608486031215613af857600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b03818116838216019080821115611935576119356138f2565b6001600160801b03818116838216019080821115611935576119356138f2565b8181036000831280158383131683831282161715611935576119356138f2565b600060208284031215613b8357600080fd5b8151610091816139d4565b8082018281126000831280158216821582161715613bae57613bae6138f2565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613bdb57613bdb613bb6565b500690565b6001600160801b03828116828216039080821115611935576119356138f2565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c6138f2565b60006102a082019050613c4182855161392e565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613cb657600080fd5b505080516020909101519092909150565b6000600160ff1b8201613cdc57613cdc6138f2565b5060000390565b60008060408385031215613cf657600080fd5b825191506020830151613d0881613a06565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d3f57600080fd5b8451935060208501519250604085015191506060850151613d5f81613a06565b939692955090935050565b600082613d7957613d79613bb6565b600160ff1b821460001984141615613d9357613d936138f2565b500590565b600060208284031215613daa57600080fd5b815161009181613a06565b6000825160005b81811015613dd65760208186018101518583015201613dbc565b50600092019182525091905056fea2646970667358221220a3682b7cce59b0ab4125f3ab6f8bca8cd3cbdeca1284bffa669233e0e99625f564736f6c63430008160033a26469706673582212201eba0790505b0a53eb05fd936bca758559d8084a1eeb0d834978055633212b7064736f6c63430008160033608060405234801561001057600080fd5b506138f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b61340a806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b506040516200340a3803806200340a8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161300762000403600039600050506000505060006109c10152600050506000818161026d0152611fd10152600081816118170152818161187a01528181611bb601528181611bf201528181611dea0152611fab01526000818161056f0152611f85015260006113ec01526000611547015260008181610733015261151b015260005050600081816105900152611ff701526000818161066b01526123c00152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb0152610623015260006123220152600050506130076000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612a65565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612abc565b6100b5565b005b610059610095366004612a65565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612af3565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612b1e565b61017160408c018c612b3b565b60405161018396959493929190612bab565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612bfb565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612af3565b88610ee8565b60006103066102fd6020870187612af3565b88848989610ad0565b90945090506103158188612c25565b9250600061032283610f88565b5090506103326020870187612af3565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612b1e565b8a888e80604001906103829190612b3b565b604051610396989796959493929190612c38565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612af3565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f000000000000000000000000000000000000000000000000000000000000000061114c565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612c80565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a611169565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061118a565b92505b506105c1836111aa565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612c25565b8a846111d8565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612c80565b4290611316565b846111d8565b61065e8861132b565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612c25565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c6114cf565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611504565b9150915080600960008282546107019190612c80565b9091555061071d905086600084610717816115d3565b886115fd565b6107278183612c80565b915061075786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611777565b915061076b61076683856117c1565b6117d6565b6006805460029061078c9084906201000090046001600160701b0316612c93565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b9826111aa565b600680546010906107db908490600160801b90046001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f6001846114cf565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611504565b9150915080600960008282546108529190612c80565b9091555061086e905083600084610868816115d3565b8a611800565b6108788183612c25565b915061088761076683876117c1565b600680546002906108a89084906201000090046001600160701b0316612c93565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d5826111aa565b600680546010906108f7908490600160801b90046001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a610930876115d3565b610939836115d3565b6109439190612cd3565b60006119f1565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612cf3565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a30565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611abb565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611ac8565b9050610b56836111aa565b610b609083612d10565b600780546001600160801b0319166001600160801b0392909216919091179055610b89816111aa565b60078054601090610bab908490600160801b90046001600160801b0316612d10565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611ae6565b9350610be68684611b7f565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612c25565b905080600003610c72576001915050610e08565b6000610c7d85611b94565b905080600003610c9257600192505050610e08565b600080610ca0838589611c30565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612dae565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612e24565b91509150610d50610d42826115d3565b610d4b90612e48565b611da4565b925082610d665760009650505050505050610e08565b610d6f826111aa565b60078054600090610d8a9084906001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db7816111aa565b60078054601090610dd9908490600160801b90046001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612c25565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612c80565b90915550506000838152600b602052604081208054839290610f3d908490612c80565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611f3c565b6040518263ffffffff1660e01b8152600401610fcd9190612e64565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612e73565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612c80565b6110939190612c25565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611ac8565b976001975095505050505050565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f906024015b602060405180830381865af4158015611128573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190612ea3565b60006111588284612bfb565b6111629084612c25565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612076565b60006111a18261119b858888611ac8565b9061209c565b95945050505050565b60006001600160801b038211156111d457604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112045750505050565b6000848152600860205260408120546001600160801b03169081900361125e5761122d836111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790556112dc565b6112af6112aa670de0b6b3a76400006112778886612c25565b6112819190612ebc565b85670de0b6b3a7640000611295878a612c25565b61129f9190612ebc565b859291906001612111565b6111aa565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112e5846111aa565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113255782611162565b50919050565b600654600090819061134e908490600160801b90046001600160801b03166117c1565b6006546201000090046001600160701b031692509050818111156114ca5760006113788383612c25565b90506113876112aa82866121af565b600680546010906113a9908490600160801b90046001600160801b0316612d10565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060006113e285836121c490919063ffffffff16565b90506000611410827f00000000000000000000000000000000000000000000000000000000000000006117c1565b905080600960008282546114249190612c80565b9091555061143490508183612c25565b915061143f826111aa565b6002805460009061145a9084906001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611487826121d9565b6004805460009061149c908490600f0b612ed3565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114f95760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061151187856121c4565b9150600061153f837f00000000000000000000000000000000000000000000000000000000000000006117c1565b905061156b817f00000000000000000000000000000000000000000000000000000000000000006117c1565b9150831561158e5761157d8282612c25565b6115879084612c25565b92506115a5565b6115988282612c25565b6115a29084612c80565b92505b868610156115c8576115b8838789611ac8565b92506115c5828789611ac8565b91505b509550959350505050565b60006001600160ff1b038211156111d45760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116466112aa82611629670de0b6b3a764000086612ebc565b600554600160801b90046001600160801b031691908a6000612111565b600580546001600160801b03928316600160801b02921691909117905561166c866111aa565b6116769082612d10565b600480546001600160801b03928316600160801b02921691909117905561169c846111aa565b600280546000906116b79084906001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116e483612203565b600480546000906116f9908490600f0b612ed3565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611729856111aa565b6002805460109061174b908490600160801b90046001600160801b0316612d10565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b60008061178f846117898a888a611ac8565b906121c4565b905061179c888486611ac8565b6117a69082612c80565b9050868111156117b65786810391505b509695505050505050565b60006111628383670de0b6b3a7640000611ac8565b60006001600160701b038211156111d45760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061184257507f00000000000000000000000000000000000000000000000000000000000000006118408583612c25565b105b1561184f5761184f61223f565b6004549084900390600f0b6118648482612cd3565b905083611870866115d3565b1380156118a557507f00000000000000000000000000000000000000000000000000000000000000006118a38383612076565b105b156118b2576118b261223f565b600354600160801b90046001600160801b03166118f46112aa826118de670de0b6b3a764000088612ebc565b6005546001600160801b031691908c6000612111565b600580546001600160801b0319166001600160801b039290921691909117905561191e8882612c25565b9050611929816111aa565b600380546001600160801b03928316600160801b02921691909117905561194f836111aa565b600280546001600160801b0319166001600160801b039290921691909117905561197882612203565b600480546001600160801b0319166001600160801b03929092169190911790556119a1876111aa565b600280546010906119c3908490600160801b90046001600160801b0316612cb3565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a0c906112aa906001600160801b03168484612258565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a5657611a56612f00565b6040519080825280601f01601f191660200182016040528015611a80576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611aa1578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611adf57600080fd5b5091020490565b600080611af385856117c1565b9050611afe816122bf565b945084600003611b12576000915050611162565b849150611b256040840160208501612b1e565b15611b5457611b4d85611b3b6020860186612af3565b611b486040870187612b3b565b6122fa565b9150611b77565b611b7785611b656020860186612af3565b611b726040870187612b3b565b612315565b509392505050565b60006111628383670de0b6b3a764000061234f565b6003546000908190611baf906001600160801b0316846121af565b9050611bdb7f000000000000000000000000000000000000000000000000000000000000000082612c80565b6002546001600160801b03161115611325576002547f000000000000000000000000000000000000000000000000000000000000000090611c269083906001600160801b0316612c25565b6111629190612c25565b611c386129b2565b600080611c4484611f3c565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c7f9190612e64565b6040805180830381865af4158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf9190612e73565b9350905082611cd45750600091506100ad9050565b6000611cfb611cf68461016001518561014001516117c190919063ffffffff16565b6115d3565b611d1b611cf6856101200151866101000151611b7f90919063ffffffff16565b611d259190612cd3565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190612f16565b935093509350935080611e9d5750600098975050505050505050565b868414611ece57611ead846111aa565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611eff57611ede83612203565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611f2d57611f0f826111aa565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611f44612a04565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161203c9116612375565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261206e92900416612375565b905292915050565b60008061208384846123eb565b9092509050806120955761209561223f565b5092915050565b6000816000036120b55750670de0b6b3a7640000610e08565b826000036120c557506000610e08565b60006120d0836115d3565b905060006120e56120e0866115d3565b61242a565b90508181026120fc670de0b6b3a764000082612f57565b905061210781612650565b9695505050505050565b6000826000036121225750846111a1565b8115612175576121536121358487612c80565b61213f85876117c1565b612149888a6117c1565b6117899190612c80565b905060006121618588611316565b90508082101561216f578091505b506111a1565b828503612184575060006111a1565b6121076121918487612c25565b61219b8587611b7f565b6121a5888a6117c1565b6117899190612c25565b600061116283670de0b6b3a76400008461234f565b600061116283670de0b6b3a764000084611ac8565b600060016001607f1b038211156111d45760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612221575060016001607f1b0382135b156111d45760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b6000806122668460006127e5565b6122718460006127e5565b61227b9190612cd3565b90506000811315612297576122908186612c80565b94506122b6565b60008112156122b6576122a981612e48565b6122b39086612c25565b94505b50929392505050565b6040516363737ac960e11b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063c6e6f5929060240161110b565b600060405163350b944160e11b815260040160405180910390fd5b6123496001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866127fb565b50505050565b600082600019048411830215820261236657600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612389610426565b6123939190612ebc565b90508083116123a35760006123ad565b6123ad8184612c25565b91506111626123e4670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612ebc565b83906121c4565b6000806000836123fa866115d3565b6124049190612cd3565b9050600081121561241c576000809250925050612423565b9150600190505b9250929050565b600080821361244c5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906124cf9084901c6115d3565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361266b57506000919050565b680755bf798b4a1bf1e58212612694576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061210774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6115d3565b60008183136127f45781611162565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261284d908490612852565b505050565b60006128676001600160a01b038416836128ba565b9050805160001415801561288c57508080602001905181019061288a9190612f85565b155b1561284d57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60606111628383600084600080856001600160a01b031684866040516128e09190612fa2565b60006040518083038185875af1925050503d806000811461291d576040519150601f19603f3d011682016040523d82523d6000602084013e612922565b606091505b50915091506121078683836060826129425761293d82612989565b611162565b815115801561295957506001600160a01b0384163b155b1561298257604051639996b31560e01b81526001600160a01b03851660048201526024016128b1565b5080611162565b8051156129995780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806129c6612a04565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600060608486031215612a7a57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612a9f57600080fd5b840160608187031215612ab157600080fd5b809150509250925092565b60008060408385031215612acf57600080fd5b50508035926020909101359150565b6001600160a01b038116811461040b57600080fd5b600060208284031215612b0557600080fd5b813561116281612ade565b801515811461040b57600080fd5b600060208284031215612b3057600080fd5b813561116281612b10565b6000808335601e19843603018112612b5257600080fd5b83018035915067ffffffffffffffff821115612b6d57600080fd5b60200191503681900382131561242357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201526000612bd960a083018486612b82565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b600082612c0a57612c0a612be5565b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e0857610e08612c0f565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000612c7260e083018486612b82565b9a9950505050505050505050565b80820180821115610e0857610e08612c0f565b6001600160701b0381811683821601908082111561209557612095612c0f565b6001600160801b0381811683821601908082111561209557612095612c0f565b818103600083128015838313168383128216171561209557612095612c0f565b600060208284031215612d0557600080fd5b815161116281612ade565b6001600160801b0382811682821603908082111561209557612095612c0f565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050612dc2828551612d30565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215612e3757600080fd5b505080516020909101519092909150565b6000600160ff1b8201612e5d57612e5d612c0f565b5060000390565b6101808101610e088284612d30565b60008060408385031215612e8657600080fd5b825191506020830151612e9881612b10565b809150509250929050565b600060208284031215612eb557600080fd5b5051919050565b8082028115828204841417610e0857610e08612c0f565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610e0857610e08612c0f565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612f2c57600080fd5b8451935060208501519250604085015191506060850151612f4c81612b10565b939692955090935050565b600082612f6657612f66612be5565b600160ff1b821460001984141615612f8057612f80612c0f565b500590565b600060208284031215612f9757600080fd5b815161116281612b10565b6000825160005b81811015612fc35760208186018101518583015201612fa9565b50600092019182525091905056fea2646970667358221220e3f97cc06d7cc893e6d3f550c22080442b01f7d8b3015a12300dc99202d1a76d64736f6c63430008160033a2646970667358221220c839fb66fa1ed77559d0c3e2f4624dc422e98272989f211b9800549f7da7499364736f6c634300081600336101606040523480156200001257600080fd5b5060405162002b8838038062002b888339810160408190526200003591620000c0565b878787878787878760006200004b8982620002a9565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205216610140525062000375975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b88516001600160401b0380821115620000f657600080fd5b818b0191508b601f8301126200010b57600080fd5b8151818111156200012057620001206200008d565b604051601f8201601f19908116603f011681019083821181831017156200014b576200014b6200008d565b81604052828152602093508e848487010111156200016857600080fd5b600091505b828210156200018c57848201840151818301850152908301906200016d565b6000848483010152809c50505050620001a7818c01620000a3565b98505050620001b960408a01620000a3565b9550620001c960608a01620000a3565b9450620001d960808a01620000a3565b9350620001e960a08a01620000a3565b9250620001f960c08a01620000a3565b91506200020960e08a01620000a3565b90509295985092959890939650565b600181811c908216806200022d57607f821691505b6020821081036200024e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a4576000816000526020600020601f850160051c810160208610156200027f5750805b601f850160051c820191505b81811015620002a0578281556001016200028b565b5050505b505050565b81516001600160401b03811115620002c557620002c56200008d565b620002dd81620002d6845462000218565b8462000254565b602080601f831160018114620003155760008415620002fc5750858301515b600019600386901b1c1916600185901b178555620002a0565b600085815260208120601f198616915b82811015620003465788860151825594840194600190910190840162000325565b5085821015620003655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161274f62000439600039600081816102a50152610e0a0152600081816103250152610cd401526000818161038d0152610b9e0152600081816102f10152610a68015260008181610359015261085a015260008181610455015261119d015260008181610401015281816105620152818161077e0152818161088a01528181610a9801528181610bce01528181610d0401528181610e3a01528181610f6c01526111ce015261274f6000f3fe6080604052600436106100fe5760003560e01c8063ab71905f11610095578063c45a015511610064578063c45a0155146103ef578063c6e6f59214610423578063c83e1f5114610443578063e990eba814610477578063e99be3961461049757600080fd5b8063ab71905f14610347578063b6cb11181461037b578063b88fed9f146103af578063c1510618146103cf57600080fd5b806354fd4d50116100d157806354fd4d5014610263578063966ecd1c14610293578063a085fa30146102df578063aa8cd6c41461031357600080fd5b806304baa00b1461010357806306fdde031461012e57806316abfc70146101435780633740401714610164575b600080fd5b34801561010f57600080fd5b506101186104ab565b6040516101259190611c6b565b60405180910390f35b34801561013a57600080fd5b506101186104c7565b610156610151366004611daa565b610555565b604051908152602001610125565b34801561017057600080fd5b5061025661017f366004611e6f565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101259190611e88565b34801561026f57600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610118565b34801561029f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610125565b3480156102eb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561031f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561035357600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506101566103ca366004611e6f565b6106f3565b3480156103db57600080fd5b506102c76103ea366004612060565b610771565b3480156103fb57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b5061015661043e366004611e6f565b610f24565b34801561044f57600080fd5b506102c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561048357600080fd5b506102c76104923660046120ce565b610f5f565b3480156104a357600080fd5b506005610156565b6040518060600160405280602481526020016126f66024913981565b600080546104d49061216f565b80601f01602080910402602001604051908101604052809291908181526020018280546105009061216f565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105a057604051634084351160e01b815260040160405180910390fd5b6105a86112dc565b6000868152600160205260409020600301546001600160a01b0316806105e15760405163952b05cb60e01b815260040160405180910390fd5b60006105ef828888876112fd565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b8152600401610622939291906121a9565b60206040518083038185885af1158015610640573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061066591906121ef565b92506000610673823461221e565b905080156106e657604051600090339083908381818185875af1925050503d80600081146106bd576040519150601f19603f3d011682016040523d82523d6000602084013e6106c2565b606091505b50509050806106e4576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b60405163b88fed9f60e01b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$__9063b88fed9f906024015b602060405180830381865af4158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b91906121ef565b92915050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107bc57604051634084351160e01b815260040160405180910390fd5b600086815260016020526040812090849003610974578054156107f257604051633be1b34d60e11b815260040160405180910390fd5b6107fc868661140a565b60006108088787611620565b905060008760405160200161081d9190612231565b604051602081830303815290604052805190602001209050600087805190602001209050600061084c8a61163a565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c6040516020016108c6929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108fb9493929190612464565b6020604051808303816000875af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e91906124aa565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b03831617905590506106ea565b600087815260016020526040902054806109a15760405163398b1c0960e21b815260040160405180910390fd5b80876040516020016109b39190612231565b60405160208183030381529060405280519060200120146109e75760405163332ee11f60e01b815260040160405180910390fd5b60018201548651602088012014610a1157604051631a3272d160e31b815260040160405180910390fd5b610a1b878761140a565b6000610a268861163a565b6002840154608082015290506001869003610b695760058301546001600160a01b031615610a665760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610acd939291906124c7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610b029493929190612464565b6020604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4591906124aa565b6005840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600203610c9f5760068301546001600160a01b031615610b9c5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610c03939291906124c7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610c389493929190612464565b6020604051808303816000875af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906124aa565b6006840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600303610dd55760078301546001600160a01b031615610cd25760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610d39939291906124c7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d6e9493929190612464565b6020604051808303816000875af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906124aa565b6007840180546001600160a01b0319166001600160a01b03831617905593506106e6565b85600403610f0b5760088301546001600160a01b031615610e085760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e6f939291906124c7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610ea49493929190612464565b6020604051808303816000875af1158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee791906124aa565b6008840180546001600160a01b0319166001600160a01b03831617905593506106e6565b604051631d9f815960e11b815260040160405180910390fd5b6040516363737ac960e11b81526004810182905260009073__$d9e3dcde200ce050ae5bde3efb6129cc33$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ced565b935093509350935080611d1a5750600098975050505050505050565b868414611d4b57611d2a84611fa2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d7c57611d5b83611fcc565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611daa57611d8c82611fa2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6000611dc58284612d23565b6114c59084612c7a565b600254600454600091610f75916001600160801b0390911690600f0b61201a565b6000611e11878787611e0a88670de0b6b3a7640000612c7a565b8787612040565b979650505050505050565b6000611e3382611e2d858888611f56565b9061206e565b95945050505050565b6000611ea7611e7d611e5684670de0b6b3a7640000612c7a565b611149670de0b6b3a7640000611e6c818a611c0c565b611e769190612c7a565b8790611a0c565b611e8f90670de0b6b3a7640000612c8d565b611ea184670de0b6b3a7640000612c7a565b90611a58565b949350505050565b600080611ee685611ebe611dcf565b611ec89190612c8d565b6002546117ca908790600160801b90046001600160801b0316612c7a565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000806000806000611f1d8987896114cc565b9092509050611f2c8289612c7a565b97506000611f3b82888a611f56565b9050611f47818b612c7a565b9a989950979650505050505050565b6000826000190484118302158202611f6d57600080fd5b5091020490565b60006001600160ff1b03821115611f9e5760405163396ea70160e11b815260040160405180910390fd5b5090565b60006001600160801b03821115611f9e57604051630f0af95160e11b815260040160405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821280611ffc57506f7fffffffffffffffffffffffffffffff82135b15611f9e5760405163a5353be560e01b815260040160405180910390fd5b60008061202784846120d9565b90925090508061203957612039611ef1565b5092915050565b600080612051888888888888612118565b90925090508061206357612063611ef1565b509695505050505050565b6000816000036120875750670de0b6b3a7640000610d9e565b8260000361209757506000610d9e565b60006120a283611f74565b905060006120b76120b286611f74565b6121e0565b90508181026120ce670de0b6b3a764000082612d37565b9050611c0281611a6d565b6000806000836120e886611f74565b6120f29190612ca0565b9050600081121561210a576000809250925050612111565b9150600190505b9250929050565b600080600061212a8989888888612406565b905061214486611e2d61213d8a8d612c8d565b8790611a43565b9850612151858a86611f56565b9850888110156121685760008092509250506121d5565b888103670de0b6b3a7640000811061219d5761219661218f670de0b6b3a764000089611c0c565b829061206e565b90506121b5565b6121b261218f670de0b6b3a764000089611a58565b90505b808910156121cb576000809350935050506121d5565b8803925060019150505b965096945050505050565b60008082136122025760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906122859084901c611f74565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000612412858561206e565b61242b61242386611e2d868b611a0c565b859085611a1d565b611c029190612c8d565b8183823760009101908152919050565b805160208201516001600160e01b031980821692919060048310156124745780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156124b6576124b661247c565b60405290565b60005b838110156124d75781810151838201526020016124bf565b50506000910152565b6000602082840312156124f257600080fd5b815167ffffffffffffffff8082111561250a57600080fd5b818401915084601f83011261251e57600080fd5b8151818111156125305761253061247c565b604051601f8201601f19908116603f011681019083821181831017156125585761255861247c565b8160405282815287602084870101111561257157600080fd5b611e118360208301602088016124bc565b6001600160a01b0381168114610e2557600080fd5b6000602082840312156125a957600080fd5b81356114c581612582565b8015158114610e2557600080fd5b80356125cd816125b4565b919050565b6000602082840312156125e457600080fd5b81356114c5816125b4565b600060608284031215610b8b57600080fd5b60008060006060848603121561261657600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561263b57600080fd5b612647868287016125ef565b9150509250925092565b60008083601f84011261266357600080fd5b50813567ffffffffffffffff81111561267b57600080fd5b6020830191508360208260051b850101111561211157600080fd5b600080600080600080608087890312156126af57600080fd5b86356126ba81612582565b955060208701356126ca81612582565b9450604087013567ffffffffffffffff808211156126e757600080fd5b6126f38a838b01612651565b9096509450606089013591508082111561270c57600080fd5b5061271989828a01612651565b979a9699509497509295939492505050565b6000806000806080858703121561274157600080fd5b84359350602085013561275381612582565b9250604085013561276381612582565b9396929550929360600135925050565b6000806000806080858703121561278957600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156127bb57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156127e757600080fd5b6127f3878288016125ef565b91505092959194509250565b60006020828403121561281157600080fd5b813567ffffffffffffffff81111561282857600080fd5b611ea7848285016125ef565b6000806040838503121561284757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561286e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156128a157600080fd5b6128ad888289016125ef565b9150509295509295909350565b600080600080608085870312156128d057600080fd5b8435935060208501356128e281612582565b92506040850135915060608501356128f981612582565b939692955090935050565b600080600080600060a0868803121561291c57600080fd5b85359450602086013561292e81612582565b9350604086013561293e81612582565b925060608601359150608086013561295581612582565b809150509295509295909350565b60006020828403121561297557600080fd5b5035919050565b80356001600160801b03811681146125cd57600080fd5b600080604083850312156129a657600080fd5b6129af8361297c565b91506129bd6020840161297c565b90509250929050565b600080604083850312156129d957600080fd5b82356129e481612582565b915060208301356129f4816125b4565b809150509250929050565b600080600060608486031215612a1457600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a4057600080fd5b833592506020840135612a5281612582565b929592945050506040919091013590565b600080600080600080600060e0888a031215612a7e57600080fd5b8735612a8981612582565b96506020880135612a9981612582565b95506040880135612aa9816125b4565b945060608801359350608088013560ff81168114612ac657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612af557600080fd5b6114c58261297c565b8035600f81900b81146125cd57600080fd5b80356001600160701b03811681146125cd57600080fd5b60006101808284031215612b3a57600080fd5b612b42612492565b612b4b8361297c565b8152612b596020840161297c565b6020820152612b6a6040840161297c565b6040820152612b7b6060840161297c565b6060820152612b8c60808401612afe565b6080820152612b9d60a0840161297c565b60a0820152612bae60c0840161297c565b60c0820152612bbf60e0840161297c565b60e0820152610100612bd28185016125c2565b90820152610120612be48482016125c2565b90820152610140612bf6848201612b10565b90820152610160612c0884820161297c565b908201529392505050565b600060208284031215612c2557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b8201612c5757612c57612c2c565b5060000390565b60008251612c708184602087016124bc565b9190910192915050565b81810381811115610d9e57610d9e612c2c565b80820180821115610d9e57610d9e612c2c565b818103600083128015838313168383128216171561203957612039612c2c565b8082028115828204841417610d9e57610d9e612c2c565b634e487b7160e01b600052601260045260246000fd5b60008060008060808587031215612d0357600080fd5b84519350602085015192506040850151915060608501516128f9816125b4565b600082612d3257612d32612cd7565b500690565b600082612d4657612d46612cd7565b600160ff1b821460001984141615612d6057612d60612c2c565b50059056fea2646970667358221220fe6c8e377c6f97eb826251e6b1eb1c3df009ac500d1d75218d3040129f2311d864736f6c634300081600336102806040523480156200001257600080fd5b5060405162004228380380620042288339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da66200048260003960008181610dab01526123a7015260008181610d7c015261236a015260008181610c5601528181610edb01528181610f6b01528181610ffb0152818161108b0152818161168c01528181611724015281816118ed01528181611f2101528181611ff7015261214e01526000610e43015260008181610e1d015261255a015260008181610df70152612534015260008181610dd1015261250e01526000611198015260006111720152600061114c01526000611126015260008181610eb50152612580015260008181610e69015281816113130152612a9c015260008181610e8f0152612edb01526000818161061b0152610d4d01526000818161074b01528181610d1e015281816112c601528181611e95015281816126440152818161268d0152818161273f0152818161278801528181612c0101528181612cad01528181612d990152612e450152613da66000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c806360246c881161013b578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104f1578063d816574314610504578063e44808bc14610519578063e985e9c51461052c578063fba560081461053f57600080fd5b8063bd85b039146104a3578063becee9c3146104b6578063c55dae63146104d6578063c69e16ad14610434578063c6e6f592146104de57600080fd5b80639cd241af116100ff5780639cd241af14610444578063a22cb46514610457578063ab033ea91461046a578063b0d965801461047b578063b88fed9f1461049057600080fd5b806360246c88146103fa5780637180c8ca1461040f5780637ecebe00146104215780638e67f87e14610434578063950c5d031461043c57600080fd5b806320fc4881116101c95780633e691db91161018d5780633e691db91461039657806346fbf68e146103a95780634e41a1fb146103cc5780634ed2d6ac146103df57806354fd4d50146103f257600080fd5b806320fc4881146102fb57806321ff32a914610340578063313ce567146103615780633656eec21461037b5780633a98ef391461038e57600080fd5b806306fdde031161021057806306fdde031461029a5780630a4e1493146102a257806314e5f07b146102c257806317fad7fc146102d55780631c0f12b6146102e857600080fd5b8062ad800c1461024157806301681a621461026a57806302329a291461027f57806304baa00b14610292575b600080fd5b61025461024f36600461312c565b61056e565b6040516102619190613195565b60405180910390f35b61027d6102783660046131bd565b6105a5565b005b61027d61028d3660046131e8565b6105ae565b6102546105b7565b6102546105f6565b6102aa61060d565b6040516001600160a01b039091168152602001610261565b61027d6102d0366004613214565b61064d565b61027d6102e33660046132ef565b610669565b61027d6102f6366004613384565b61067f565b61030e61030936600461312c565b610692565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610261565b61035361034e3660046133cc565b6106fe565b604051908152602001610261565b610369610744565b60405160ff9091168152602001610261565b61035361038936600461340e565b6107df565b610353610818565b6103536103a436600461343e565b610837565b6103bc6103b73660046131bd565b610842565b6040519015158152602001610261565b6102546103da36600461312c565b610862565b61027d6103ed366004613479565b610870565b6102546108be565b6104026108f3565b60405161026191906134c3565b61027d61041d366004613564565b5050565b61035361042f3660046131bd565b610c02565b610353610c2e565b6102aa610c48565b61027d610452366004613592565b610c88565b61027d610465366004613564565b610c99565b61027d6104783660046131bd565b50565b610483610d05565b60405161026191906135ca565b61035361049e36600461312c565b6111cd565b6103536104b136600461312c565b6111db565b6104c96104c43660046136f0565b6111fd565b6040516102619190613732565b6102aa6112b8565b6103536104ec36600461312c565b6112f8565b6103536104ff36600461312c565b611306565b61050c61133d565b6040516102619190613776565b61027d610527366004613887565b611449565b6103bc61053a3660046138e6565b611491565b6105476114d5565b6040805182516001600160801b039081168252602093840151169281019290925201610261565b60606105a061057c83611534565b60405160200161058c9190613195565b60405160208183030381529060405261165c565b919050565b61047881611680565b610478816118eb565b60606105f36040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058c9190613195565b90565b60606105f3600160405160200161058c9190613914565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b61065e898989898989898989611a05565b505050505050505050565b610677868686868686611bfc565b505050505050565b61068c8484848433611cb0565b50505050565b60408051606081018252600080825260208201819052918101919091526105a06008600084815260200190815260200160002060405160200161058c919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261073d910161058c565b9392505050565b60006105f37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906139c5565b6040805160ff90921660208301520161058c565b6000828152600a602090815260408083206001600160a01b0385168452825280832054815192830152610812910161058c565b92915050565b60006105f3610825611e71565b60405160200161058c91815260200190565b600061081282611f0a565b60006105a061085083612149565b6040805191151560208301520161058c565b60606105a061057c8361222e565b8361087a8161232c565b6001600160a01b0316336001600160a01b0316146108ab57604051632aab8bd360e01b815260040160405180910390fd5b6108b7858585856123e9565b5050505050565b60606105f360405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058c9190613195565b61096c604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000610976612456565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109e19190613a0e565b6109eb9190613a21565b905060008215610afd5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a1885612469565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190613a34565b509050610afa81846125ff565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201526000906101a081018415610bce57610bc98486612614565b610bd1565b60005b81526003546001600160801b0316602091820152604051919250610bfb9161058c918491016134c3565b5050505090565b6001600160a01b0381166000908152600e60209081526040808320548151928301526105a0910161058c565b60006105f360095460405160200161058c91815260200190565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b610c94838383336123e9565b505050565b336000818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d0d613045565b6105f36040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190613a64565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613a64565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058c91906135ca565b60006105a061082583612629565b6000818152600b60209081526040808320548151928301526105a0910161058c565b606060008267ffffffffffffffff81111561121a5761121a613a81565b604051908082528060200260200182016040528015611243578160200160208202803683370190505b50905060005b8381101561129c57600085858381811061126557611265613a97565b9050602002013590506000815490508084848151811061128757611287613a97565b60209081029190910101525050600101611249565b506112b18160405160200161058c9190613732565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105f3910161058c565b60006105a061082583612724565b60006105a06108256113387f000000000000000000000000000000000000000000000000000000000000000085613a0e565b61280d565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105f3600260405160200161058c919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b846114538161232c565b6001600160a01b0316336001600160a01b03161461148457604051632aab8bd360e01b815260040160405180910390fd5b6106778686868686611cb0565b6001600160a01b038281166000908152600c60209081526040808320938516835292815282822054835160ff9091161515918101919091529091610812910161058c565b60408051808201909152600080825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105f39060600161058c565b606060f882901c6001600160f81b038316600061155082612851565b90506000836003811115611566576115666139e2565b03611598576040518060400160405280600d81526020016c048797065726472697665204c5609c1b8152509350611654565b60018360038111156115ac576115ac6139e2565b036115d857806040516020016115c29190613aad565b6040516020818303038152906040529350611654565b60028360038111156115ec576115ec6139e2565b0361160257806040516020016115c29190613ae6565b6003836003811115611616576116166139e2565b03611654576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116779190613195565b60405180910390fd5b611688612906565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613a64565b9050336001600160a01b038216148015906117ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613a64565b6001600160a01b0316336001600160a01b031614155b80156117cc57506117ca33612149565b155b156117e9576040516282b42960e81b815260040160405180910390fd5b60006117f3611e71565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118619190613b20565b90506118776001600160a01b0385168483612930565b81611880611e71565b1461189e576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a35050506104786001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613a64565b6001600160a01b0316336001600160a01b031614158015611994575061199233612149565b155b156119b1576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119fa90831515815260200190565b60405180910390a150565b83421115611a265760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a4d5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b3b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7957604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981166000818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1957506001600160a01b038516155b15611c375760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c575760405163174861a760e31b815260040160405180910390fd5b60005b83811015611ca757611c9f858583818110611c7757611c77613a97565b905060200201358888868686818110611c9257611c92613a97565b9050602002013533611cb0565b600101611c5a565b50505050505050565b6001600160a01b0384161580611ccd57506001600160a01b038316155b15611ceb5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611daf576001600160a01b038085166000908152600c602090815260408083209385168352929052205460ff16611daf576000858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020546000198114611dad576000868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611da7908490613a21565b90915550505b505b6000858152600a602090815260408083206001600160a01b038816845290915281208054849290611de1908490613a21565b90915550506000858152600a602090815260408083206001600160a01b038716845290915281208054849290611e18908490613a0e565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b8152306004820152600090611f05906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190613b20565b612724565b905090565b6000611f14612906565b611f1d82612982565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa19190613a64565b90506001600160a01b038116611fba60208501856131bd565b6001600160a01b031614611fe157604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061208d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190613a64565b6001600160a01b0316336001600160a01b031614155b801561209f575061209d33612149565b155b156120bc576040516282b42960e81b815260040160405180910390fd5b60006120c6612456565b6009805460009091559091506120dd8183876129b8565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461211c60408a0160208b016131e8565b60408051938452602084019290925215159082015260600160405180910390a25050506105a06001600055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d29190810190613b39565b905060005b815181101561222457836001600160a01b03168282815181106121fc576121fc613a97565b60200260200101516001600160a01b03160361221c575060019392505050565b6001016121d7565b5060009392505050565b606060f882901c6001600160f81b038316600061224a82612851565b90506000836003811115612260576122606139e2565b03612292576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b8152509350611654565b60018360038111156122a6576122a66139e2565b036122bc57806040516020016115c29190613bfe565b60028360038111156122d0576122d06139e2565b036122e657806040516020016115c29190613c36565b60038360038111156122fa576122fa6139e2565b0361165457505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b6000848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b6000611f05670de0b6b3a7640000612629565b6124cd6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125c59116612a51565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125f792900416612a51565b905292915050565b600061073d8383670de0b6b3a7640000612ac7565b600061073d83670de0b6b3a764000084612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612678575047612703565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613b20565b90505b600f5460000361271457600061073d565b600f5461073d9084908390612ac7565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016127735750476127fe565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156127d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fb9190613b20565b90505b600f5461073d90849083612ac7565b6000612835600b6000612821600286612ae5565b815260200190815260200160002054612b1a565b612847600b6000612821600187612ae5565b6108129190613c62565b60408051604e80825260808201909252606091906000908260208201818036833701905050905060005b84156128f85761288c600a86613c98565b612897906030613a0e565b60f81b8260016128a78487613a21565b6128b19190613a21565b815181106128c1576128c1613a97565b60200101906001600160f81b031916908160001a905350806128e281613cac565b91506128f19050600a86613cc5565b945061287b565b918290030190815292915050565b60026000540361292957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c94908490612b48565b600061299160208301836131bd565b6001600160a01b0316036104785760405163f0dd15fd60e01b815260040160405180910390fd5b6000806129c585856125ff565b90506129d081612724565b9450846000036129e457600091505061073d565b8491506129f760408401602085016131e8565b15612a2657612a1f85612a0d60208601866131bd565b612a1a6040870187613cd9565b612bab565b9150612a49565b612a4985612a3760208601866131bd565b612a446040870187613cd9565b612d45565b509392505050565b600080670de0b6b3a7640000612a65612ed3565b612a6f9190613d20565b9050808311612a7f576000612a89565b612a898184613a21565b915061073d612ac0670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613d20565b8390612614565b6000826000190484118302158202612ade57600080fd5b5091020490565b60006001600160f81b03821115612b0f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60006001600160ff1b03821115612b445760405163396ea70160e11b815260040160405180910390fd5b5090565b6000612b5d6001600160a01b03841683612eff565b90508051600014158015612b82575080806020019051810190612b809190613d37565b155b15610c9457604051635274afe760e01b81526001600160a01b0384166004820152602401611677565b6000600f548511612bbc5784612bc0565b600f545b94506000612bcd86612629565b905085600f6000828254612be19190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612c87576040516001600160a01b038716908390600081818185875af1925050503d8060008114612c77576040519150601f19603f3d011682016040523d82523d6000602084013e612c7c565b606091505b505080915050612d1d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a9190613d37565b90505b80612d3b576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f548411612d545783612d58565b600f545b93506000612d6585612629565b905084600f6000828254612d799190613a21565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612e1f576040516001600160a01b038616908390600081818185875af1925050503d8060008114612e0f576040519150601f19603f3d011682016040523d82523d6000602084013e612e14565b606091505b505080915050612eb5565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb29190613d37565b90505b80610677576040516312171d8360e31b815260040160405180910390fd5b6000611f05427f0000000000000000000000000000000000000000000000000000000000000000612f0d565b606061073d83836000612f23565b6000612f198284613c98565b61073d9084613a21565b606081471015612f485760405163cd78605960e01b8152306004820152602401611677565b600080856001600160a01b03168486604051612f649190613d54565b60006040518083038185875af1925050503d8060008114612fa1576040519150601f19603f3d011682016040523d82523d6000602084013e612fa6565b606091505b5091509150612fb6868383612fc0565b9695505050505050565b606082612fd557612fd08261301c565b61073d565b8151158015612fec57506001600160a01b0384163b155b1561301557604051639996b31560e01b81526001600160a01b0385166004820152602401611677565b508061073d565b80511561302c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016131276040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b60006020828403121561313e57600080fd5b5035919050565b60005b83811015613160578181015183820152602001613148565b50506000910152565b60008151808452613181816020860160208601613145565b601f01601f19169290920160200192915050565b60208152600061073d6020830184613169565b6001600160a01b038116811461047857600080fd5b6000602082840312156131cf57600080fd5b813561073d816131a8565b801515811461047857600080fd5b6000602082840312156131fa57600080fd5b813561073d816131da565b60ff8116811461047857600080fd5b60008060008060008060008060006101208a8c03121561323357600080fd5b8935985060208a0135975060408a013561324c816131a8565b965060608a013561325c816131a8565b955060808a013561326c816131da565b945060a08a0135935060c08a013561328381613205565b8093505060e08a013591506101008a013590509295985092959850929598565b60008083601f8401126132b557600080fd5b50813567ffffffffffffffff8111156132cd57600080fd5b6020830191508360208260051b85010111156132e857600080fd5b9250929050565b6000806000806000806080878903121561330857600080fd5b8635613313816131a8565b95506020870135613323816131a8565b9450604087013567ffffffffffffffff8082111561334057600080fd5b61334c8a838b016132a3565b9096509450606089013591508082111561336557600080fd5b5061337289828a016132a3565b979a9699509497509295939492505050565b6000806000806080858703121561339a57600080fd5b8435935060208501356133ac816131a8565b925060408501356133bc816131a8565b9396929550929360600135925050565b6000806000606084860312156133e157600080fd5b8335925060208401356133f3816131a8565b91506040840135613403816131a8565b809150509250925092565b6000806040838503121561342157600080fd5b823591506020830135613433816131a8565b809150509250929050565b60006020828403121561345057600080fd5b813567ffffffffffffffff81111561346757600080fd5b82016060818503121561073d57600080fd5b6000806000806080858703121561348f57600080fd5b8435935060208501356134a1816131a8565b92506040850135915060608501356134b8816131a8565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b6000806040838503121561357757600080fd5b8235613582816131a8565b91506020830135613433816131da565b6000806000606084860312156135a757600080fd5b8335925060208401356135b9816131a8565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516135f660208401826001600160a01b03169052565b50604083015161361160408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613683828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b6000806020838503121561370357600080fd5b823567ffffffffffffffff81111561371a57600080fd5b613726858286016132a3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561376a5783518352928401929184019160010161374e565b50909695505050505050565b81516001600160801b03168152610180810160208301516137a260208401826001600160801b03169052565b5060408301516137bd60408401826001600160801b03169052565b5060608301516137d860608401826001600160801b03169052565b5060808301516137ed6080840182600f0b9052565b5060a083015161380860a08401826001600160801b03169052565b5060c083015161382360c08401826001600160801b03169052565b5060e083015161383e60e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526136e8565b600080600080600060a0868803121561389f57600080fd5b8535945060208601356138b1816131a8565b935060408601356138c1816131a8565b92506060860135915060808601356138d8816131a8565b809150509295509295909350565b600080604083850312156138f957600080fd5b8235613904816131a8565b91506020830135613433816131a8565b60006020808352600084548160018260011c9150600183168061393857607f831692505b60208310810361395657634e487b7160e01b85526022600452602485fd5b6020880183905260408801818015613975576001811461398b576139b6565b60ff198616825284151560051b820196506139b6565b60008b81526020902060005b868110156139b057815484820152908501908901613997565b83019750505b50949998505050505050505050565b6000602082840312156139d757600080fd5b815161073d81613205565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610812576108126139f8565b81810381811115610812576108126139f8565b60008060408385031215613a4757600080fd5b825191506020830151613433816131da565b80516105a0816131a8565b600060208284031215613a7657600080fd5b815161073d816131a8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b700243cb832b9323934bb32902637b7339d1607d1b815260008251613ad9816011850160208701613145565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b815260008251613b13816012850160208701613145565b9190910160120192915050565b600060208284031215613b3257600080fd5b5051919050565b60006020808385031215613b4c57600080fd5b825167ffffffffffffffff80821115613b6457600080fd5b818501915085601f830112613b7857600080fd5b815181811115613b8a57613b8a613a81565b8060051b604051601f19603f83011681018181108582111715613baf57613baf613a81565b604052918252848201925083810185019188831115613bcd57600080fd5b938501935b82851015613bf257613be385613a59565b84529385019392850192613bd2565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b815260008251613c29816010850160208701613145565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b815260008251613ad9816011850160208701613145565b81810360008312801583831316838312821617156112b1576112b16139f8565b634e487b7160e01b600052601260045260246000fd5b600082613ca757613ca7613c82565b500690565b600060018201613cbe57613cbe6139f8565b5060010190565b600082613cd457613cd4613c82565b500490565b6000808335601e19843603018112613cf057600080fd5b83018035915067ffffffffffffffff821115613d0b57600080fd5b6020019150368190038213156132e857600080fd5b8082028115828204841417610812576108126139f8565b600060208284031215613d4957600080fd5b815161073d816131da565b60008251613d66818460208701613145565b919091019291505056fea2646970667358221220448af9f5b26b62838684d8a96f2ef15a7fbf8bac4d63ed437102c4b148f1f22c64736f6c634300081600336102806040523480156200001257600080fd5b506040516200425c3803806200425c8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613da1620004bb60003960005050600050506000610b650152600050506000818160af01528181610325015261301c0152600081816113eb015281816117fc0152818161185f01528181612bfa01528181612c3601528181612e350152612ff601526000818161071301528181610de801528181610e2f01528181610ff401528181611661015281816116af0152612fd001526000611c1f015260008181611d45015281816123a801526124210152600081816108d701528181610f8c01528181611d1901526123f5015260008181610e81015261236e01526000818161073401528181610dc601528181610e50015281816110150152818161163f015281816116d0015261304201526000818161080f01528181610f0b015281816117580152818161224301526135760152600081816105d20152818161064d015281816106c30152818161078f01526107c7015260005050600081816119f101528181611a3a01528181612697015281816126e0015281816127bb015281816128670152818161295301526129ff0152613da16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806329b23fc11461003b578063ded0623114610060575b600080fd5b61004e610049366004613824565b610073565b60405190815260200160405180910390f35b61004e61006e366004613824565b61008c565b60006100818585858561009a565b90505b949350505050565b600061008185858585610310565b60006100a461054f565b6100ad82610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156100ee5760405163211ddda360e11b815260040160405180910390fd5b60006100f86105b2565b90508542101561011d5761011761010d6105ca565b82600460016105f6565b5061012d565b61012b8682600460016105f6565b505b61014261013b600288610c73565b3387610ca8565b6000806000806000806101568b888e610d81565b95509550955095509550955060008c90508c4210156102165782600960008282546101819190613899565b9091555061019990506101926105ca565b4284611075565b6101a68c888787856111b3565b60006101b18e61132d565b90506101cf6101bf8e611377565b6101c990836138ac565b826113a5565b6101d8896113e4565b6101e4576101e4611444565b60006101ef8a61145d565b90508061020f57604051638bdf918d60e01b815260040160405180910390fd5b505061022d565b610220868961146a565b955061022b8861145d565b505b600061023a878a8d61154b565b90508b81101561025d5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61026d600288610c73565b61027a60208301836138e1565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102b86040890160208a0161390c565b6102cc8a6102c68d8f613899565b906115e5565b8d6102da60408c018c613929565b6040516102ee989796959493929190613999565b60405180910390a450939c505050505050505050505050506100846001600055565b600061031a61054f565b61032382610579565b7f00000000000000000000000000000000000000000000000000000000000000008410156103645760405163211ddda360e11b815260040160405180910390fd5b600061036e6105b2565b9050854210156103895761038361010d6105ca565b50610399565b6103978682600460016105f6565b505b6103a761013b600188610c73565b6000806000806000806103bb8b888e6115fa565b95509550955095509550955060008c90508c42101561046e5782600960008282546103e69190613899565b909155506103f790506101926105ca565b6104048c888787856117e5565b600061040f8261132d565b905061042761041d8e611377565b6101c990836139e1565b610430896113e4565b61043c5761043c611444565b60006104478a61145d565b90508061046757604051638bdf918d60e01b815260040160405180910390fd5b5050610485565b610478868961146a565b95506104838861145d565b505b6000610492878a8d61154b565b90508b8110156104b55760405163c972651760e01b815260040160405180910390fd5b8c898c6104c3600186610c73565b6104d060208301836138e1565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee526788888761050e6040890160208a0161390c565b8a61051c60408b018b613929565b60405161052f9796959493929190613a09565b60405180910390a450919a50505050505050505050506100846001600055565b60026000540361057257604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600061058860208301836138e1565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b60006105c5670de0b6b3a76400006119d6565b905090565b60006105c5427f0000000000000000000000000000000000000000000000000000000000000000611ad1565b600084815260086020526040812060018101546001600160801b031615158061061e57504286115b1561063757600101546001600160801b03169050610084565b60008060006106446105ca565b905060006106727f00000000000000000000000000000000000000000000000000000000000000008b613899565b90505b818110156106e8576000818152600860205260409020600101546001600160801b031680156106c0576000828152600860205260409020549094506001600160801b031692506106e8565b507f000000000000000000000000000000000000000000000000000000000000000001610675565b8360000361075b578893506107586106fe611ae7565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b92505b5061076583611b1f565b6001850180546001600160801b0319166001600160801b03929092169190911790556107bb6107b47f00000000000000000000000000000000000000000000000000000000000000008b613a4a565b8a84611075565b6107f9896107f36107ec7f000000000000000000000000000000000000000000000000000000000000000083613899565b4290611b49565b84611075565b61080288611b5e565b50600090506008816108347f00000000000000000000000000000000000000000000000000000000000000008d613a4a565b815260208101919091526040016000908120600101546001600160801b0316915061086060028c610c73565b6000818152600b60205260408120549192508c8c83156109a6576001925060008061088f86898d866000611d02565b9150915080600960008282546108a59190613899565b909155506108c19050866000846108bb81611377565b886111b3565b6108cb8183613899565b91506108fb86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611dd1565b915061090f61090a83856115e5565b611e1b565b600680546002906109309084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061095d82611b1f565b6006805460109061097f908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b60006109b3600184610c73565b6000818152600b60205260409020549091508015610ac257600194506000806109e0838b8f886001611d02565b9150915080600960008282546109f69190613899565b90915550610a12905083600084610a0c81611377565b8a6117e5565b610a1c8183613a4a565b9150610a2b61090a83876115e5565b60068054600290610a4c9084906201000090046001600160701b0316613a5d565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7982611b1f565b60068054601090610a9b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610afc57610aee610ad487611377565b610add83611377565b610ae791906138ac565b60006113a5565b8e610af98482611e45565b50505b6000610b078461203f565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613a9d565b90506001600160a01b03811615610c5a57610c575a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061218b565b50505b509b9d5050505050505050505050505050949350505050565b60006001600160f81b03821115610c9d5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610ceb57604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610d2e908490613a4a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600080600080600080600080610d95611ae7565b90506000610da28a612216565b6002549091508c908c90610e0c908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f0000000000000000000000000000000000000000000000000000000000000000612267565b600254919d509a50909550610e74908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b9550610eaa858c610ea5897f00000000000000000000000000000000000000000000000000000000000000006122d7565b612307565b15610eb757610eb7611444565b6000806000610ec885878b87612349565b9c5091945092509050610edb8184613a4a565b610ee59089613899565b9750610ef18284613899565b610efb908d613899565b9b505050505050506000600860007f00000000000000000000000000000000000000000000000000000000000000008c610f359190613a4a565b815260208101919091526040016000908120600101546001600160801b03169150428b11610f7d5760008b8152600860205260409020600101546001600160801b0316610f7f565b8b5b90508b610fb08e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611dd1565b9950610fbc878a613a4a565b9850670de0b6b3a7640000611039610fd48787613899565b600254610ff2908f90600160801b90046001600160801b0316613a4a565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b111561104757611047611444565b6110578a8a878a8787600061245d565b939d50919b5090995090975050505050505093975093979195509350565b600083815260086020526040902054600160801b90046001600160801b03168083036110a15750505050565b6000848152600860205260408120546001600160801b0316908190036110fb576110ca83611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611179565b61114c611147670de0b6b3a76400006111148886613a4a565b61111e9190613aba565b85670de0b6b3a7640000611132878a613a4a565b61113c9190613aba565b8592919060016124fc565b611b1f565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61118284611b1f565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111fc611147826111df670de0b6b3a764000086613aba565b600554600160801b90046001600160801b031691908a60006124fc565b600580546001600160801b03928316600160801b02921691909117905561122286611b1f565b61122c9082613ad1565b600480546001600160801b03928316600160801b02921691909117905561125284611b1f565b6002805460009061126d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061129a836125a6565b600480546000906112af908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506112df85611b1f565b60028054601090611301908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000611355600b6000611341600286610c73565b815260200190815260200160002054611377565b611367600b6000611341600187610c73565b61137191906138ac565b92915050565b60006001600160ff1b038211156113a15760405163396ea70160e11b815260040160405180910390fd5b5090565b6003546113c090611147906001600160801b031684846125e2565b600380546001600160801b0319166001600160801b03929092169190911790555050565b60006114107f000000000000000000000000000000000000000000000000000000000000000083612649565b60035461142691906001600160801b0316613899565b60025461143c906001600160801b0316846115e5565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b6000611371826004611e45565b600080600061147884611b5e565b9092509050600061148986866115e5565b9050818311156114a15761149e86838561265e565b95505b828110156114b35780830392506114b8565b600092505b6114c183611e1b565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b909104168087101561151457869003611518565b5060005b61152181611b1f565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b60008061155885856115e5565b90506115638161267c565b9450846000036115775760009150506115de565b84915061158a604084016020850161390c565b156115b9576115b2856115a060208601866138e1565b6115ad6040870187613929565b612765565b91506115dc565b6115dc856115ca60208601866138e1565b6115d76040870187613929565b6128ff565b505b9392505050565b60006115de8383670de0b6b3a764000061265e565b60008060008060008060008061160e611ae7565b9050600061161b8a612216565b6002549091508b908d90611685908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612a95565b600254919d509b50909550600090819081906116f4908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b08565b985061170284878b88612349565b9c5091945090925090506117168284613a4a565b6117209089613a4a565b975061172c8184613899565b611736908e613a4a565b9c506117428a8e613899565b9b50505050505050506117cf86868386600860007f00000000000000000000000000000000000000000000000000000000000000008f6117829190613a4a565b81526020810191909152604001600020600101546001600160801b0316428e116117c65760008e8152600860205260409020600101546001600160801b03166117c8565b8e5b600161245d565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b03168381108061182757507f00000000000000000000000000000000000000000000000000000000000000006118258583613a4a565b105b1561183457611834611444565b6004549084900390600f0b61184984826138ac565b90508361185586611377565b13801561188a57507f00000000000000000000000000000000000000000000000000000000000000006118888383612ae9565b105b1561189757611897611444565b600354600160801b90046001600160801b03166118d9611147826118c3670de0b6b3a764000088613aba565b6005546001600160801b031691908c60006124fc565b600580546001600160801b0319166001600160801b03929092169190911790556119038882613a4a565b905061190e81611b1f565b600380546001600160801b03928316600160801b02921691909117905561193483611b1f565b600280546001600160801b0319166001600160801b039290921691909117905561195d826125a6565b600480546001600160801b0319166001600160801b039290921691909117905561198687611b1f565b600280546010906119a8908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a25575047611ab0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad9190613b1e565b90505b600f54600003611ac15760006115de565b600f546115de908490839061265e565b6000611add8284613b4d565b6115de9084613a4a565b6002546004546000916105c5916001600160801b0390911690600f0b612ae9565b600061008182611b1985888861265e565b90612b0f565b60006001600160801b038211156113a157604051630f0af95160e11b815260040160405180910390fd5b6000818311611b5857826115de565b50919050565b6006546000908190611b81908490600160801b90046001600160801b03166115e5565b6006546201000090046001600160701b03169250905081811115611cfd576000611bab8383613a4a565b9050611bba6111478286612b84565b60068054601090611bdc908490600160801b90046001600160801b0316613ad1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611c158583612b9990919063ffffffff16565b90506000611c43827f00000000000000000000000000000000000000000000000000000000000000006115e5565b90508060096000828254611c579190613899565b90915550611c6790508183613a4a565b9150611c7282611b1f565b60028054600090611c8d9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611cba82612bae565b60048054600090611ccf908490600f0b613af1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611d0f8785612b99565b91506000611d3d837f00000000000000000000000000000000000000000000000000000000000000006115e5565b9050611d69817f00000000000000000000000000000000000000000000000000000000000000006115e5565b91508315611d8c57611d7b8282613a4a565b611d859084613a4a565b9250611da3565b611d968282613a4a565b611da09084613899565b92505b86861015611dc657611db683878961265e565b9250611dc382878961265e565b91505b509550959350505050565b600080611de984611de38a888a61265e565b90612b99565b9050611df688848661265e565b611e009082613899565b905086811115611e105786810391505b509695505050505050565b60006001600160701b038211156113a15760405163086b151760e11b815260040160405180910390fd5b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611e90916001600160801b031690613a4a565b905080600003611ea4576001915050611371565b6000611eaf85612bd8565b905080600003611ec457600192505050611371565b600080611ed2838589612c74565b9150915080611ee8576000945050505050611371565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611f24929190613bdf565b6040805180830381865af4158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613c55565b91509150611f82611f7482611377565b611f7d90613c79565b612def565b925082611f985760009650505050505050611371565b611fa182611b1f565b60078054600090611fbc9084906001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fe981611b1f565b6007805460109061200b908490600160801b90046001600160801b0316613a7d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61206887612f87565b6040518263ffffffff1660e01b81526004016120849190613c95565b6040805180830381865af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613ca4565b91509150806120da575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161214091613899565b61214a9190613a4a565b90508060000361216257506000958695509350505050565b600080871161217257600061217d565b61217d84888461265e565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156121b1576121b1613cd4565b6040519080825280601f01601f1916602001820160405280156121db576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156121fc578692505b828152826000602083013e90999098509650505050505050565b6000806122216105ca565b905080831161223157600061223b565b61223b8184613a4a565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612b99565b6000808061228861228088670de0b6b3a7640000613a4a565b8990876130c1565b905086156122ca5761229a8888612649565b91506122bb8a8a846122b48a670de0b6b3a7640000613a4a565b89896130e7565b92506122c78382613899565b90505b9750975097945050505050565b60006122f56122ee84670de0b6b3a7640000613a4a565b8390612649565b6115de90670de0b6b3a7640000613a4a565b60008061233e85612316611ae7565b6123209190613899565b600254610ff2908790600160801b90046001600160801b0316613a4a565b909210949350505050565b60008080806123a087866123998b61239361236c8c670de0b6b3a7640000613a4a565b7f000000000000000000000000000000000000000000000000000000000000000090612649565b90612649565b91906130c1565b93506123cc847f00000000000000000000000000000000000000000000000000000000000000006115e5565b915060006123ed6123e589670de0b6b3a7640000613a4a565b8a90886130c1565b9050612419817f0000000000000000000000000000000000000000000000000000000000000000612649565b9350612445847f00000000000000000000000000000000000000000000000000000000000000006115e5565b61244f9084613899565b915050945094509450949050565b600080600080600080888810156124cc5786156124825761247f8d898b61265e565b9c505b61248d8c898b61265e565b9b506124988b611377565b6124a18d611377565b6124ab91906138ac565b90506124b88b898b61265e565b9a506124c58a898b61265e565b99506124eb565b6124d58b611377565b6124de8d611377565b6124e891906138ac565b90505b9b9c9a9b999a975050505050505050565b60008260000361250d57508461259d565b81156125605761253e6125208487613899565b61252a85876115e5565b612534888a6115e5565b611de39190613899565b9050600061254c8588611b49565b90508082101561255a578091505b5061259d565b82850361256f5750600061259d565b61259a61257c8487613a4a565b6125868587612649565b612590888a6115e5565b611de39190613a4a565b90505b95945050505050565b600060016001607f1b03198212806125c4575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b6000806125f084600061310a565b6125fb84600061310a565b61260591906138ac565b905060008113156126215761261a8186613899565b9450612640565b60008112156126405761263381613c79565b61263d9086613a4a565b94505b50929392505050565b60006115de8383670de0b6b3a76400006130c1565b600082600019048411830215820261267557600080fd5b5091020490565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126cb575047612756565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613b1e565b90505b600f546115de9084908361265e565b6000600f548511612776578461277a565b600f545b94506000612787866119d6565b905085600f600082825461279b9190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612841576040516001600160a01b038716908390600081818185875af1925050503d8060008114612831576040519150601f19603f3d011682016040523d82523d6000602084013e612836565b606091505b5050809150506128d7565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190613cea565b90505b806128f5576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161290e5783612912565b600f545b9350600061291f856119d6565b905084600f60008282546129339190613a4a565b909155506000905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016129d9576040516001600160a01b038616908390600081818185875af1925050503d80600081146129c9576040519150601f19603f3d011682016040523d82523d6000602084013e6129ce565b606091505b505080915050612a6f565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190613cea565b90505b80612a8d576040516312171d8360e31b815260040160405180910390fd5b505050505050565b60008080612ab6612aae88670de0b6b3a7640000613a4a565b89908761265e565b905086156122ca57612ac888886115e5565b91506122bb8a8a84612ae28a670de0b6b3a7640000613a4a565b8989613120565b600080612af68484613131565b909250905080612b0857612b08611444565b5092915050565b600081600003612b285750670de0b6b3a7640000611371565b82600003612b3857506000611371565b6000612b4383611377565b90506000612b58612b5386611377565b613170565b9050818102612b6f670de0b6b3a764000082613d07565b9050612b7a81613396565b9695505050505050565b60006115de83670de0b6b3a7640000846130c1565b60006115de83670de0b6b3a76400008461265e565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612bf3906001600160801b031684612b84565b9050612c1f7f000000000000000000000000000000000000000000000000000000000000000082613899565b6002546001600160801b03161115611b58576002547f000000000000000000000000000000000000000000000000000000000000000090612c6a9083906001600160801b0316613a4a565b6115de9190613a4a565b612c7c613771565b600080612c8884612f87565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612cc39190613c95565b6040805180830381865af4158015612cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d039190613ca4565b9350905082612d18575060009150612de79050565b6000612d3f612d3a8461016001518561014001516115e590919063ffffffff16565b611377565b612d5f612d3a85610120015186610100015161264990919063ffffffff16565b612d6991906138ac565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613d35565b935093509350935080612ee85750600098975050505050505050565b868414612f1957612ef884611b1f565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612f4a57612f29836125a6565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612f7857612f5a82611b1f565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612f8f6137c3565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191613087911661352b565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926130b99290041661352b565b905292915050565b60008260001904841183021582026130d857600080fd5b50910281810615159190040190565b6000806130f88888888888886135a1565b909250905080611e1057611e10611444565b600081831361311957816115de565b5090919050565b6000806130f8888888888888613682565b60008060008361314086611377565b61314a91906138ac565b90506000811215613162576000809250925050613169565b9150600190505b9250929050565b60008082136131925760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132159084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133b157506000919050565b680755bf798b4a1bf1e582126133da576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612b7a74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061353f6105ca565b6135499190613aba565b9050808311613559576000613563565b6135638184613a4a565b91506115de61359a670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613aba565b8390612b99565b60008060006135b38989888888613742565b9050868810156135ca576000809250925050613677565b96869003966135d98887612b0f565b9750878110156135f0576000809250925050613677565b8781036135fe8186886130c1565b9050670de0b6b3a764000081106136325761362b613624670de0b6b3a764000089612b84565b8290612b0f565b905061364a565b613647613624670de0b6b3a764000089612b99565b90505b6136548186612b84565b90508981101561366c57600080935093505050613677565b899003925060019150505b965096945050505050565b60008060006136948989888888613742565b90506136a486611b19898b613899565b9750878110156136bb576000809250925050613677565b8781036136c98186886130c1565b9050670de0b6b3a764000081106136f6576136ef613624670de0b6b3a764000089612b84565b905061370e565b61370b613624670de0b6b3a764000089612b99565b90505b6137188186612b84565b9050808a101561373057600080935093505050613677565b90980398600198509650505050505050565b600061374e8585612b0f565b61376761375f86611b19868b612649565b8590856130c1565b61259a9190613899565b6040518061012001604052806137856137c3565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561383a57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561386657600080fd5b85016060818803121561387857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561137157611371613883565b8181036000831280158383131683831282161715612b0857612b08613883565b6001600160a01b03811681146105af57600080fd5b6000602082840312156138f357600080fd5b81356115de816138cc565b80151581146105af57600080fd5b60006020828403121561391e57600080fd5b81356115de816138fe565b6000808335601e1984360301811261394057600080fd5b83018035915067ffffffffffffffff82111561395b57600080fd5b60200191503681900382131561316957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c082015260006139d360e083018486613970565b9a9950505050505050505050565b8082018281126000831280158216821582161715613a0157613a01613883565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613a3d60c083018486613970565b9998505050505050505050565b8181038181111561137157611371613883565b6001600160701b03818116838216019080821115612b0857612b08613883565b6001600160801b03818116838216019080821115612b0857612b08613883565b600060208284031215613aaf57600080fd5b81516115de816138cc565b808202811582820484141761137157611371613883565b6001600160801b03828116828216039080821115612b0857612b08613883565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561137157611371613883565b600060208284031215613b3057600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613b5c57613b5c613b37565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613bf3828551613b61565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613c6857600080fd5b505080516020909101519092909150565b6000600160ff1b8201613c8e57613c8e613883565b5060000390565b61018081016113718284613b61565b60008060408385031215613cb757600080fd5b825191506020830151613cc9816138fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613cfc57600080fd5b81516115de816138fe565b600082613d1657613d16613b37565b600160ff1b821460001984141615613d3057613d30613883565b500590565b60008060008060808587031215613d4b57600080fd5b8451935060208501519250604085015191506060850151613878816138fe56fea26469706673582212202c339e695fed60e0d5853ea03879c02a7d64df087a2b32b5ceff5fced664babb64736f6c634300081600336102806040523480156200001257600080fd5b50604051620044c2380380620044c28339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613fce620004f460003960005050600050506000610c8c015260005050600081816101000152818161031001526131ec01526000818161152301528181612049015281816120ac0152818161285e01528181612dd101528181612e0d0152818161300501526131c601526000818161083a01528181610dec01528181610e2e01528181610f2001528181611396015281816113f5015281816118cf0152818161196201526131a001526000611c68015260008181611d8e01528181612a4e01528181612ac701526133060152600081816109fe01528181610ea10152818161149001528181611d620152612a9b015260008181610e8001528181612a1a01526132c201526000818161085b01528181610dca01528181610e4f01528181610f41015281816113740152818161141601526132120152600081816101de015281816103a80152818161093601526137bc0152600081816106f401528181610774015281816107ea015281816108b601526108ee01526000505060008181610556015281816116cd01528181611716015281816117a801528181611829015281816119d001528181611a51015281816128df0152818161292801528181612b940152612bdd0152613fce6000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c366004613a51565b61006d565b6040805192835260208301919091520160405180910390f35b610041610068366004613a51565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a461052a565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610554565b6100de836105c0565b6000806100eb88866105f9565b909250905060006100fc83836106ce565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106ec565b905061017a81846004600161071d565b50600080600061018a8787610d9b565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613ac6565b909155506101d99050844283610f7d565b6102037f000000000000000000000000000000000000000000000000000000000000000085613ac6565b98506102118389888c6110bb565b600061021e60018b611255565b90506102378161023160208e018e613aee565b8b61128a565b8d8a8a898e8561024a6020830183613aee565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a8688866102876040880160208901613b19565b8961029560408a018a613b36565b6040516102a89796959493929190613ba6565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d461052a565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610554565b61030e836105c0565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b6000610359611332565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106ec565b9050600061039f6103956106ec565b846004600161071d565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613ac6565b90506000806000806103e08e8988611345565b60098054949850929650909450925083916000906103ff908490613ac6565b909155506104109050874283610f7d565b50600061041e84898d6114cb565b9050808d10156104415760405163c972651760e01b815260040160405180910390fd5b61044b818c6105f9565b508e905061045b81858b896114fd565b6000610468600288611255565b90508c6104828261047c6020840184613aee565b8561128a565b858b86846104936020860186613aee565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d060408b0160208c01613b19565b6104e4896104de8a8d613be7565b906106ce565b8d6104f260408e018e613b36565b604051610506989796959493929190613bfa565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361054d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105a057503415155b156105be57604051631574f9f360e01b815260040160405180910390fd5b565b60006105cf6020830183613aee565b6001600160a01b0316036105f65760405163f0dd15fd60e01b815260040160405180910390fd5b50565b8160008061060d6040850160208601613b19565b1561063257610628856106236040870187613b36565b6116b1565b909350905061064a565b503461064a856106456040870187613b36565b611945565b610652611332565b915080156106c557604051600090339083908381818185875af1925050503d806000811461069c576040519150601f19603f3d011682016040523d82523d6000602084013e6106a1565b606091505b50509050806106c3576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106e38383670de0b6b3a7640000611aef565b90505b92915050565b6000610718427f0000000000000000000000000000000000000000000000000000000000000000611b0d565b905090565b600084815260086020526040812060018101546001600160801b031615158061074557504286115b1561075e57600101546001600160801b03169050610d93565b600080600061076b6106ec565b905060006107997f00000000000000000000000000000000000000000000000000000000000000008b613ac6565b90505b8181101561080f576000818152600860205260409020600101546001600160801b031680156107e7576000828152600860205260409020549094506001600160801b0316925061080f565b507f00000000000000000000000000000000000000000000000000000000000000000161079c565b836000036108825788935061087f610825611b23565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b44565b92505b5061088c83611b64565b6001850180546001600160801b0319166001600160801b03929092169190911790556108e26108db7f00000000000000000000000000000000000000000000000000000000000000008b613be7565b8a84610f7d565b6109208961091a6109137f000000000000000000000000000000000000000000000000000000000000000083613ac6565b4290611b92565b84610f7d565b61092988611ba7565b506000905060088161095b7f00000000000000000000000000000000000000000000000000000000000000008d613be7565b815260208101919091526040016000908120600101546001600160801b0316915061098760028c611255565b6000818152600b60205260408120549192508c8c8315610acd57600192506000806109b686898d866000611d4b565b9150915080600960008282546109cc9190613ac6565b909155506109e89050866000846109e281611e1a565b88611e44565b6109f28183613ac6565b9150610a2286838a8e877f0000000000000000000000000000000000000000000000000000000000000000611fbe565b9150610a36610a3183856106ce565b612008565b60068054600290610a579084906201000090046001600160701b0316613c42565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a8482611b64565b60068054601090610aa6908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610ada600184611255565b6000818152600b60205260409020549091508015610be95760019450600080610b07838b8f886001611d4b565b915091508060096000828254610b1d9190613ac6565b90915550610b39905083600084610b3381611e1a565b8a612032565b610b438183613be7565b9150610b52610a3183876106ce565b60068054600290610b739084906201000090046001600160701b0316613c42565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610ba082611b64565b60068054601090610bc2908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c2357610c15610bfb87611e1a565b610c0483611e1a565b610c0e9190613c82565b6000612223565b8e610c208482612262565b50505b6000610c2e8461245c565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190613ca2565b90506001600160a01b03811615610d8157610d7e5a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906125a8565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610dab611b23565b600254909150610e10908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000612633565b600254909450610e73908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b44565b9150610eca8785610ec5857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061265f565b6126c4565b15610ed757610ed7612706565b610ee38785888561271f565b91965094509250670de0b6b3a7640000610f65610f008784613ac6565b600254610f1e908890600160801b90046001600160801b0316613be7565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b44565b1115610f7357610f73612706565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610fa95750505050565b6000848152600860205260408120546001600160801b03169081900361100357610fd283611b64565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611081565b61105461104f670de0b6b3a764000061101c8886613be7565b6110269190613cbf565b85670de0b6b3a764000061103a878a613be7565b6110449190613cbf565b85929190600161276b565b611b64565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61108a84611b64565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110fd61104f826110e7670de0b6b3a764000086613cbf565b6005546001600160801b0316919088600161276b565b600580546001600160801b0319166001600160801b039290921691909117905561112685611b64565b600280546000906111419084906001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061116e84611b64565b60028054601090611190908490600160801b90046001600160801b0316613cd6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506111bd84611b64565b6111c79082613c62565b600380546001600160801b03808416600160801b029116179055905060006111ee83612813565b905061120c816111fd87611e1a565b6112079084613cf6565b612223565b61121584612857565b61122157611221612706565b600061122c856128b7565b90508061124c57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b0382111561127f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906112bc908490613ac6565b90915550506000838152600b6020526040812080548392906112df908490613ac6565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b6000610718670de0b6b3a76400006128c4565b6000806000806000611355611b23565b6002549091506113ba908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006129bf565b9350876113c785896129e0565b11156113d5576113d5612706565b600254600090819061143a908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b44565b93506114508a670de0b6b3a7640000868c6129f5565b5091935090915061146390508183613be7565b61146d9087613be7565b9550886114ba816114b48d611482868c613be7565b8d61148d8782612b03565b877f0000000000000000000000000000000000000000000000000000000000000000612b19565b906129e0565b975090945050505093509350935093565b60006114dd6040830160208401613b19565b156114e95750826114f6565b6114f38484612b3e565b90505b9392505050565b6002546001600160801b03168381101561151957611519612706565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611551908390600f0b612b53565b101561155f5761155f612706565b6004546115a99061104f90600160801b90046001600160801b031661158c670de0b6b3a764000086613cbf565b600554600160801b90046001600160801b0316919089600161276b565b600580546001600160801b03928316600160801b0292169190911790556115cf81611b64565b600280546001600160801b0319166001600160801b03929092169190911790556115f885611b64565b6002805460109061161a908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061164785611b64565b60048054601090611669908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061169883612813565b905061120c816116a788611e1a565b6112079084613c82565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161170157504761178c565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190613d1e565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161180757873410156117f6576040516312171d8360e31b815260040160405180910390fd5b6118008834613be7565b90506118a1565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613d37565b91505b816118bf576040516312171d8360e31b815260040160405180910390fd5b600f54600003611904576118f3887f0000000000000000000000000000000000000000000000000000000000000000612b3e565b600f8190559450925061193d915050565b600f54600090611916908a9086611aef565b905080600f600082825461192a9190613ac6565b9091555090955090935061193d92505050565b935093915050565b6000611950846128c4565b9050600f5460000361198e57611986817f0000000000000000000000000000000000000000000000000000000000000000612b3e565b600f556119b4565b600061199982612b79565b905080600f60008282546119ad9190613ac6565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a2f5782341015611a1e576040516312171d8360e31b815260040160405180910390fd5b611a288334613be7565b9050611ac9565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac69190613d37565b91505b81611ae7576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000826000190484118302158202611b0657600080fd5b5091020490565b6000611b198284613d6a565b6106e39084613be7565b600254600454600091610718916001600160801b0390911690600f0b612b53565b6000611b5b82611b55858888611aef565b90612c62565b95945050505050565b60006001600160801b03821115611b8e57604051630f0af95160e11b815260040160405180910390fd5b5090565b6000818311611ba157826106e3565b50919050565b6006546000908190611bca908490600160801b90046001600160801b03166106ce565b6006546201000090046001600160701b03169250905081811115611d46576000611bf48383613be7565b9050611c0361104f8286612ccd565b60068054601090611c25908490600160801b90046001600160801b0316613cd6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611c5e8583612b3e90919063ffffffff16565b90506000611c8c827f00000000000000000000000000000000000000000000000000000000000000006106ce565b90508060096000828254611ca09190613ac6565b90915550611cb090508183613be7565b9150611cbb82611b64565b60028054600090611cd69084906001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611d0382612ce2565b60048054600090611d18908490600f0b613d7e565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611d588785612b3e565b91506000611d86837f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050611db2817f00000000000000000000000000000000000000000000000000000000000000006106ce565b91508315611dd557611dc48282613be7565b611dce9084613be7565b9250611dec565b611ddf8282613be7565b611de99084613ac6565b92505b86861015611e0f57611dff838789611aef565b9250611e0c828789611aef565b91505b509550959350505050565b60006001600160ff1b03821115611b8e5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611e8d61104f82611e70670de0b6b3a764000086613cbf565b600554600160801b90046001600160801b031691908a600061276b565b600580546001600160801b03928316600160801b029216919091179055611eb386611b64565b611ebd9082613cd6565b600480546001600160801b03928316600160801b029216919091179055611ee384611b64565b60028054600090611efe9084906001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f2b83612d0c565b60048054600090611f40908490600f0b613d7e565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611f7085611b64565b60028054601090611f92908490600160801b90046001600160801b0316613cd6565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611fd684611fd08a888a611aef565b90612b3e565b9050611fe3888486611aef565b611fed9082613ac6565b905086811115611ffd5786810391505b509695505050505050565b60006001600160701b03821115611b8e5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061207457507f00000000000000000000000000000000000000000000000000000000000000006120728583613be7565b105b1561208157612081612706565b6004549084900390600f0b6120968482613c82565b9050836120a286611e1a565b1380156120d757507f00000000000000000000000000000000000000000000000000000000000000006120d58383612b53565b105b156120e4576120e4612706565b600354600160801b90046001600160801b031661212661104f82612110670de0b6b3a764000088613cbf565b6005546001600160801b031691908c600061276b565b600580546001600160801b0319166001600160801b03929092169190911790556121508882613be7565b905061215b81611b64565b600380546001600160801b03928316600160801b02921691909117905561218183611b64565b600280546001600160801b0319166001600160801b03929092169190911790556121aa82612d0c565b600480546001600160801b0319166001600160801b03929092169190911790556121d387611b64565b600280546010906121f5908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461223e9061104f906001600160801b03168484612d48565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916122ad916001600160801b031690613be7565b9050806000036122c15760019150506106e6565b60006122cc85612daf565b9050806000036122e1576001925050506106e6565b6000806122ef838589612e4b565b91509150806123055760009450505050506106e6565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612341929190613e29565b6040805180830381865af415801561235d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123819190613e9f565b9150915061239f61239182611e1a565b61239a90613ec3565b612fbf565b9250826123b557600096505050505050506106e6565b6123be82611b64565b600780546000906123d99084906001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061240681611b64565b60078054601090612428908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61248587613157565b6040518263ffffffff1660e01b81526004016124a19190613edf565b6040805180830381865af41580156124bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e19190613eee565b91509150806124f7575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161255d91613ac6565b6125679190613be7565b90508060000361257f57506000958695509350505050565b600080871161258f57600061259a565b61259a848884611aef565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156125ce576125ce613f1e565b6040519080825280601f01601f1916602001820160405280156125f8576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612619578692505b828152826000602083013e90999098509650505050505050565b600061265487878761264d88670de0b6b3a7640000613be7565b8787613291565b979650505050505050565b60006114f36126a061267984670de0b6b3a7640000613be7565b6114b4670de0b6b3a764000061268f818a612ccd565b6126999190613be7565b87906129e0565b6126b290670de0b6b3a7640000613ac6565b611fd084670de0b6b3a7640000613be7565b6000806126fb856126d3611b23565b6126dd9190613ac6565b600254610f1e908790600160801b90046001600160801b0316613be7565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b60008060008060006127328987896132b4565b90925090506127418289613be7565b9750600061275082888a611aef565b905061275c818b613be7565b9a989950979650505050505050565b60008260000361277c575084611b5b565b81156127cf576127ad61278f8487613ac6565b61279985876106ce565b6127a3888a6106ce565b611fd09190613ac6565b905060006127bb8588611b92565b9050808210156127c9578091505b50611b5b565b8285036127de57506000611b5b565b6128096127eb8487613be7565b6127f585876129e0565b6127ff888a6106ce565b611fd09190613be7565b9695505050505050565b600061283b600b6000612827600286611255565b815260200190815260200160002054611e1a565b61284d600b6000612827600187611255565b6106e69190613c82565b60006128837f0000000000000000000000000000000000000000000000000000000000000000836129e0565b60035461289991906001600160801b0316613ac6565b6002546128af906001600160801b0316846106ce565b101592915050565b60006106e6826004612262565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161291357504761299e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299b9190613d1e565b90505b600f546000036129af5760006114f6565b600f546114f69084908390611aef565b60006126548787876129d988670de0b6b3a7640000613be7565b8787613334565b60006106e38383670de0b6b3a7640000613345565b6000808080612a468786612a3f8b6114b4612a188c670de0b6b3a7640000613be7565b7f0000000000000000000000000000000000000000000000000000000000000000906129e0565b9190613345565b9350612a72847f00000000000000000000000000000000000000000000000000000000000000006106ce565b91506000612a93612a8b89670de0b6b3a7640000613be7565b8a9088613345565b9050612abf817f00000000000000000000000000000000000000000000000000000000000000006129e0565b9350612aeb847f00000000000000000000000000000000000000000000000000000000000000006106ce565b612af59084613ac6565b915050945094509450949050565b6000818311612b1257816106e3565b5090919050565b600080612b3184612b2b8a888a613345565b90612ccd565b9050611fe3888486613345565b60006106e383670de0b6b3a764000084611aef565b600080612b60848461336b565b909250905080612b7257612b72612706565b5092915050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612bc8575047612c53565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c509190613d1e565b90505b600f546114f690849083611aef565b600081600003612c7b5750670de0b6b3a76400006106e6565b82600003612c8b575060006106e6565b6000612c9683611e1a565b90506000612cab612ca686611e1a565b6133a7565b9050818102612cc2670de0b6b3a764000082613f34565b9050612809816135cd565b60006106e383670de0b6b3a764000084613345565b600060016001607f1b03821115611b8e5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b0319821280612d2a575060016001607f1b0382135b15611b8e5760405163a5353be560e01b815260040160405180910390fd5b600080612d56846000613762565b612d61846000613762565b612d6b9190613c82565b90506000811315612d8757612d808186613ac6565b9450612da6565b6000811215612da657612d9981613ec3565b612da39086613be7565b94505b50929392505050565b6003546000908190612dca906001600160801b031684612ccd565b9050612df67f000000000000000000000000000000000000000000000000000000000000000082613ac6565b6002546001600160801b03161115611ba1576002547f000000000000000000000000000000000000000000000000000000000000000090612e419083906001600160801b0316613be7565b6114f69190613be7565b612e5361399e565b600080612e5f84613157565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612e9a9190613edf565b6040805180830381865af4158015612eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eda9190613eee565b9350905082612eef57506000915061193d9050565b6000612f16612f118461016001518561014001516106ce90919063ffffffff16565b611e1a565b612f36612f118561012001518661010001516129e090919063ffffffff16565b612f409190613c82565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015613078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309c9190613f62565b9350935093509350806130b85750600098975050505050505050565b8684146130e9576130c884611b64565b600280546001600160801b0319166001600160801b03929092169190911790555b85831461311a576130f983612d0c565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146131485761312a82611b64565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b61315f6139f0565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916132579116613771565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261328992900416613771565b905292915050565b6000806132a28888888888886137e7565b909250905080611ffd57611ffd612706565b6000806132fe856114b485817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006132f4818c612ccd565b6114b49190613be7565b915061332a827f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050935093915050565b6000806132a28888888888886138af565b600082600019048411830215820261335c57600080fd5b50910281810615159190040190565b60008060008361337a86611e1a565b6133849190613c82565b9050600081121561339c5760008092509250506106c7565b946001945092505050565b60008082136133c95760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061344c9084901c611e1a565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136135e857506000919050565b680755bf798b4a1bf1e58212613611576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061280974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611e1a565b6000818313612b1257816106e3565b600080670de0b6b3a76400006137856106ec565b61378f9190613cbf565b905080831161379f5760006137a9565b6137a98184613be7565b91506114f66137e0670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613cbf565b8390612b3e565b60008060006137f9898988888861396f565b905061381386611b5561380c8a8d613ac6565b87906106ce565b9850613820858a86611aef565b9850888110156138375760008092509250506138a4565b888103670de0b6b3a7640000811061386c5761386561385e670de0b6b3a764000089612ccd565b8290612c62565b9050613884565b61388161385e670de0b6b3a764000089612b3e565b90505b8089101561389a576000809350935050506138a4565b8803925060019150505b965096945050505050565b60008060006138c1898988888861396f565b90506138d186611b55898b613ac6565b9750878110156138e85760008092509250506138a4565b8781036138f6818688613345565b9050670de0b6b3a764000081106139235761391c61385e670de0b6b3a764000089612ccd565b905061393b565b61393861385e670de0b6b3a764000089612b3e565b90505b6139458186612ccd565b9050808a101561395d576000809350935050506138a4565b90980398600198509650505050505050565b600061397b8585612c62565b61399461398c86611b55868b6129e0565b859085613345565b6128099190613ac6565b6040518061012001604052806139b26139f0565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060008060808587031215613a6757600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613a9357600080fd5b850160608188031215613aa557600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106e6576106e6613ab0565b6001600160a01b03811681146105f657600080fd5b600060208284031215613b0057600080fd5b81356114f681613ad9565b80151581146105f657600080fd5b600060208284031215613b2b57600080fd5b81356114f681613b0b565b6000808335601e19843603018112613b4d57600080fd5b83018035915067ffffffffffffffff821115613b6857600080fd5b6020019150368190038213156106c757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613bda60c083018486613b7d565b9998505050505050505050565b818103818111156106e6576106e6613ab0565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613c3460e083018486613b7d565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612b7257612b72613ab0565b6001600160801b03818116838216019080821115612b7257612b72613ab0565b8181036000831280158383131683831282161715612b7257612b72613ab0565b600060208284031215613cb457600080fd5b81516114f681613ad9565b80820281158282048414176106e6576106e6613ab0565b6001600160801b03828116828216039080821115612b7257612b72613ab0565b8082018281126000831280158216821582161715613d1657613d16613ab0565b505092915050565b600060208284031215613d3057600080fd5b5051919050565b600060208284031215613d4957600080fd5b81516114f681613b0b565b634e487b7160e01b600052601260045260246000fd5b600082613d7957613d79613d54565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106e6576106e6613ab0565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613e3d828551613dab565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613eb257600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ed857613ed8613ab0565b5060000390565b61018081016106e68284613dab565b60008060408385031215613f0157600080fd5b825191506020830151613f1381613b0b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613f4357613f43613d54565b600160ff1b821460001984141615613f5d57613f5d613ab0565b500590565b60008060008060808587031215613f7857600080fd5b8451935060208501519250604085015191506060850151613aa581613b0b56fea26469706673582212204f99a37bca467f38f28f1533791cd85ef71edcc69216221478e2c32d11f3bf5264736f6c634300081600336102806040523480156200001257600080fd5b5060405162004483380380620044838339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613f7f620005046000396000505060005050600061134401526000818161030301528181610332015261035f01526000818160de015281816105a9015261176b01526000818161085601528181610941015281816109d401528181610add0152818161163c0152818161174501528181612474015281816124d701528181612db60152818161327901526132b501526000818161013f015281816108c601528181610ef20152818161150001528181611564015281816115ab0152818161171f01528181611c220152611cb5015260006120790152600081816121d4015261350e0152600081816110b601526121a8015260006134c40152600081816101810152818161091901528181610f13015281816114d001528181611534015281816115cc015261179101526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fee0152612d4c01526000818161029701528181610db101528181610e2c01528181610ea201528181610f6e0152610fa601526000505060008181610be501528181611a2001528181611a6901528181611afb01528181611b7c01528181611d2301528181611da401528181612fb101528181612ffa015281816130ac01526130f50152613f7f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c3660046139d2565b610066565b60405190815260200160405180910390f35b610041610061366004613a36565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c4f565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610cae565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610cd4565b9150915060006101ed610da9565b90506101fd818360046001610dd5565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b611453565b61149d565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613aaf565b81526020810191909152604001600020546001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006116aa565b90506103287f000000000000000000000000000000000000000000000000000000000000000082613a9c565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613aaf565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613aaf565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c908390613a9c565b9050600080600061043c8a6116d6565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610476908490600401613b40565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613b4f565b91506104ca6104c58c611810565b61183e565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b91859101613b40565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190613b4f565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613aaf565b9190611864565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611882565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613b7d565b8e611897565b61063a8961193f565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d9190613a9c565b9b5090508a158061073757506107348c600061194c565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611864565b610770565b60005b905061077f6020850185613b7d565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613ba8565b866107ca60408c018c613bc5565b6040516107dd9796959493929190613c0c565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c4f565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610cd4565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613c60565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af41580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190613c77565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109fd8484611961565b1015610a1c5760405163216f4ab160e21b815260040160405180910390fd5b600080610a2e8585858960008061149d565b91509150801580610a3f5750600082125b15610a5d57604051630552b01360e31b815260040160405180910390fd5b610a6685611987565b600280546001600160801b0319166001600160801b0392909216919091179055610a8f846119b1565b600480546001600160801b0319166001600160801b0392909216919091179055610ab883611987565b600280546001600160801b03928316600160801b029216919091179055610b016000807f0000000000000000000000000000000000000000000000000000000000000000611897565b610b196000610b1360208c018c613b7d565b8a611897565b610b2e610b24610da9565b8760046001610dd5565b508a8a8a610b3f6020820182613b7d565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b7c6040870160208801613ba8565b87610b8a6040890189613bc5565b604051610b9d9796959493929190613c0c565b60405180910390a2505050505050505050506100916001600055565b600260005403610bdc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801590610c2f57503415155b15610c4d57604051631574f9f360e01b815260040160405180910390fd5b565b6000610c5e6020830183613b7d565b6001600160a01b031603610c855760405163f0dd15fd60e01b815260040160405180910390fd5b50565b600254600454600091610ca9916001600160801b0390911690600f0b611961565b905090565b600080610cbd878787866119ed565b9050610cc981856116aa565b979650505050505050565b81600080610ce86040850160208601613ba8565b15610d0d57610d0385610cfe6040870187613bc5565b611a04565b9093509050610d25565b5034610d2585610d206040870187613bc5565b611c98565b610d2d611e42565b91508015610da057604051600090339083908381818185875af1925050503d8060008114610d77576040519150601f19603f3d011682016040523d82523d6000602084013e610d7c565b606091505b5050905080610d9e576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b6000610ca9427f0000000000000000000000000000000000000000000000000000000000000000611e55565b600084815260086020526040812060018101546001600160801b0316151580610dfd57504286115b15610e1657600101546001600160801b0316905061144b565b6000806000610e23610da9565b90506000610e517f00000000000000000000000000000000000000000000000000000000000000008b613a9c565b90505b81811015610ec7576000818152600860205260409020600101546001600160801b03168015610e9f576000828152600860205260409020549094506001600160801b03169250610ec7565b507f000000000000000000000000000000000000000000000000000000000000000001610e54565b83600003610f3a57889350610f37610edd610c88565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b92505b50610f4483611987565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f9a610f937f00000000000000000000000000000000000000000000000000000000000000008b613aaf565b8a84611e6b565b610fd889610fd2610fcb7f000000000000000000000000000000000000000000000000000000000000000083613a9c565b4290611fa9565b84611e6b565b610fe188611fb8565b50600090506008816110137f00000000000000000000000000000000000000000000000000000000000000008d613aaf565b815260208101919091526040016000908120600101546001600160801b0316915061103f60028c61215c565b6000818152600b60205260408120549192508c8c8315611185576001925060008061106e86898d866000612191565b9150915080600960008282546110849190613a9c565b909155506110a090508660008461109a81611810565b88612260565b6110aa8183613a9c565b91506110da86838a8e877f00000000000000000000000000000000000000000000000000000000000000006123da565b91506110ee6110e9838561241e565b612433565b6006805460029061110f9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061113c82611987565b6006805460109061115e908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061119260018461215c565b6000818152600b602052604090205490915080156112a157600194506000806111bf838b8f886001612191565b9150915080600960008282546111d59190613a9c565b909155506111f19050836000846111eb81611810565b8a61245d565b6111fb8183613aaf565b915061120a6110e9838761241e565b6006805460029061122b9084906201000090046001600160701b0316613ca5565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061125882611987565b6006805460109061127a908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156112db576112cd6112b387611810565b6112bc83611810565b6112c69190613ce5565b600061264e565b8e6112d8848261268d565b50505b60006112e684612887565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190613d05565b90506001600160a01b03811615611439576114365a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906129d3565b50505b509b9d50505050505050505050505050505b949350505050565b600061147b600b600061146760028661215c565b815260200190815260200160002054611810565b61148d600b600061146760018761215c565b6114979190613ce5565b92915050565b6000806000806114ad8a8a612a60565b91509150806114c45760008093509350505061169f565b6000611524838a6114fd7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8b7f0000000000000000000000000000000000000000000000000000000000000000612a9c565b5090506000611588848b846115617f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613aaf565b8d7f0000000000000000000000000000000000000000000000000000000000000000612b59565b509050811580611596575080155b156115a2575060009050805b60006115f0858c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ed565b90506115fe83838c84612c17565b5090935060009050611610848f613a9c565b905060006116318b8b61162287611810565b61162c908e613d22565b612c63565b90508b6116666116617f000000000000000000000000000000000000000000000000000000000000000083612cca565b611810565b61166f83611810565b61167c611661868561241e565b6116869190613ce5565b6116909190613ce5565b60019950995050505050505050505b965096945050505050565b60006100916116be84846301e13380612cdb565b6116d085670de0b6b3a7640000613aaf565b90611882565b6116de61390d565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916117d69116612d01565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261180892900416612d01565b905292915050565b60006001600160ff1b0382111561183a5760405163396ea70160e11b815260040160405180910390fd5b5090565b61184781612d70565b610c8557604051635044b7f560e01b815260040160405180910390fd5b600082600019048411830215820261187b57600080fd5b5091020490565b600061009183670de0b6b3a764000084611864565b6000838152600a602090815260408083206001600160a01b0386168452909152812080548392906118c9908490613a9c565b90915550506000838152600b6020526040812080548392906118ec908490613a9c565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b600061149782600461268d565b600081831361195b5782610091565b50919050565b60008061196e8484612a60565b90925090508061198057611980612f08565b5092915050565b60006001600160801b0382111561183a57604051630f0af95160e11b815260040160405180910390fd5b600060016001607f1b03198212806119cf575060016001607f1b0382135b1561183a5760405163a5353be560e01b815260040160405180910390fd5b6000610078826119fe858888611864565b90612f21565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611a54575047611adf565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613b4f565b90505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611b5a5787341015611b49576040516312171d8360e31b815260040160405180910390fd5b611b538834613aaf565b9050611bf4565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613d4a565b91505b81611c12576040516312171d8360e31b815260040160405180910390fd5b600f54600003611c5757611c46887f0000000000000000000000000000000000000000000000000000000000000000611882565b600f81905594509250611c90915050565b600f54600090611c69908a9086611864565b905080600f6000828254611c7d9190613a9c565b90915550909550909350611c9092505050565b935093915050565b6000611ca384612f96565b9050600f54600003611ce157611cd9817f0000000000000000000000000000000000000000000000000000000000000000611882565b600f55611d07565b6000611cec82613091565b905080600f6000828254611d009190613a9c565b9091555050505b6001600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611d825782341015611d71576040516312171d8360e31b815260040160405180910390fd5b611d7b8334613aaf565b9050611e1c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613d4a565b91505b81611e3a576040516312171d8360e31b815260040160405180910390fd5b505050505050565b6000610ca9670de0b6b3a7640000612f96565b6000611e618284613d7d565b6100919084613aaf565b600083815260086020526040902054600160801b90046001600160801b0316808303611e975750505050565b6000848152600860205260408120546001600160801b031690819003611ef157611ec083611987565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611f6f565b611f42611f3d670de0b6b3a7640000611f0a8886613aaf565b611f149190613c60565b85670de0b6b3a7640000611f28878a613aaf565b611f329190613c60565b85929190600161317a565b611987565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611f7884611987565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600081831161195b5782610091565b6006546000908190611fdb908490600160801b90046001600160801b031661241e565b6006546201000090046001600160701b031692509050818111156121575760006120058383613aaf565b9050612014611f3d8286613218565b60068054601090612036908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061206f858361188290919063ffffffff16565b9050600061209d827f000000000000000000000000000000000000000000000000000000000000000061241e565b905080600960008282546120b19190613a9c565b909155506120c190508183613aaf565b91506120cc82611987565b600280546000906120e79084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506121148261322d565b60048054600090612129908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156121865760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60008061219e8785611882565b915060006121cc837f000000000000000000000000000000000000000000000000000000000000000061241e565b90506121f8817f000000000000000000000000000000000000000000000000000000000000000061241e565b9150831561221b5761220a8282613aaf565b6122149084613aaf565b9250612232565b6122258282613aaf565b61222f9084613a9c565b92505b8686101561225557612245838789611864565b9250612252828789611864565b91505b509550959350505050565b600454600160801b90046001600160801b03166122a9611f3d8261228c670de0b6b3a764000086613c60565b600554600160801b90046001600160801b031691908a600061317a565b600580546001600160801b03928316600160801b0292169190911790556122cf86611987565b6122d99082613d91565b600480546001600160801b03928316600160801b0292169190911790556122ff84611987565b6002805460009061231a9084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612347836119b1565b6004805460009061235c908490600f0b613db1565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061238c85611987565b600280546010906123ae908490600160801b90046001600160801b0316613d91565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806123ec846116d08a888a611864565b90506123f9888486611864565b6124039082613a9c565b9050868111156124135786810391505b509695505050505050565b60006100918383670de0b6b3a7640000611864565b60006001600160701b0382111561183a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061249f57507f000000000000000000000000000000000000000000000000000000000000000061249d8583613aaf565b105b156124ac576124ac612f08565b6004549084900390600f0b6124c18482613ce5565b9050836124cd86611810565b13801561250257507f00000000000000000000000000000000000000000000000000000000000000006125008383611961565b105b1561250f5761250f612f08565b600354600160801b90046001600160801b0316612551611f3d8261253b670de0b6b3a764000088613c60565b6005546001600160801b031691908c600061317a565b600580546001600160801b0319166001600160801b039290921691909117905561257b8882613aaf565b905061258681611987565b600380546001600160801b03928316600160801b0292169190911790556125ac83611987565b600280546001600160801b0319166001600160801b03929092169190911790556125d5826119b1565b600480546001600160801b0319166001600160801b03929092169190911790556125fe87611987565b60028054601090612620908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461266990611f3d906001600160801b03168484612c63565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e754354909182916126d8916001600160801b031690613aaf565b9050806000036126ec576001915050611497565b60006126f785613257565b90508060000361270c57600192505050611497565b60008061271a8385896132f3565b9150915080612730576000945050505050611497565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161276c929190613dde565b6040805180830381865af4158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190613e54565b915091506127ca6127bc82611810565b6127c590613e78565b612d70565b9250826127e05760009650505050505050611497565b6127e982611987565b600780546000906128049084906001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061283181611987565b60078054601090612853908490600160801b90046001600160801b0316613cc5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6128b0876116d6565b6040518263ffffffff1660e01b81526004016128cc9190613b40565b6040805180830381865af41580156128e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290c9190613e94565b9150915080612922575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161298891613a9c565b6129929190613aaf565b9050806000036129aa57506000958695509350505050565b60008087116129ba5760006129c5565b6129c5848884611864565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156129f9576129f9613ec4565b6040519080825280601f01601f191660200182016040528015612a23576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612a44578692505b828152826000602083013e9093509150505b9550959350505050565b600080600083612a6f86611810565b612a799190613ce5565b90506000811215612a91576000809250925050610da2565b946001945092505050565b6000806000612aae8888888888613462565b90506000612ad9670de0b6b3a7640000612ac88888613218565b612ad29190613a9c565b8390611882565b9050670de0b6b3a76400008110612b0d57612b06612aff670de0b6b3a764000089611882565b8290612f21565b9050612b25565b612b22612aff670de0b6b3a764000089613218565b90505b612b2f8186611882565b905088811015612b4757600080935093505050612a56565b97909703976001975095505050505050565b6000806000612b6b8989888888613491565b9050612b85866119fe612b7e8a8d613a9c565b879061241e565b9850612b92858a86611864565b985088811015612ba957600080925092505061169f565b888103670de0b6b3a76400008110612bd757612bd0612aff670de0b6b3a764000089613218565b9050612bef565b612bec612aff670de0b6b3a764000089611882565b90505b80891015612c055760008093509350505061169f565b90970398600198509650505050505050565b6000806000806000612c2a8987896134b6565b9092509050612c398289613aaf565b97506000612c4882888a611864565b9050612c54818b613aaf565b9a989950979650505050505050565b600080612c7184600061353c565b612c7c84600061353c565b612c869190613ce5565b90506000811315612ca257612c9b8186613a9c565b9450612cc1565b6000811215612cc157612cb481613e78565b612cbe9086613aaf565b94505b50929392505050565b60006100918383670de0b6b3a76400005b6000826000190484118302158202612cf257600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612d15610da9565b612d1f9190613c60565b9050808311612d2f576000612d39565b612d398184613aaf565b9150610091612ad2670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613c60565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4d9190613eda565b935093509350935080612e695750600098975050505050505050565b868414612e9a57612e7984611987565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612ecb57612eaa836119b1565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612ef957612edb82611987565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612f3a5750670de0b6b3a7640000611497565b82600003612f4a57506000611497565b6000612f5583611810565b90506000612f6a612f6586611810565b613552565b9050818102612f81670de0b6b3a764000082613f1b565b9050612f8c81613778565b9695505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612fe5575047613070565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190613b4f565b90505b600f54600003613081576000610091565b600f546100919084908390611864565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016130e057504761316b565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190613b4f565b90505b600f5461009190849083611864565b60008260000361318b575084610078565b81156131de576131bc61319e8487613a9c565b6131a8858761241e565b6131b2888a61241e565b6116d09190613a9c565b905060006131ca8588611fa9565b9050808210156131d8578091505b50610078565b8285036131ed57506000610078565b6100756131fa8487613aaf565b6132048587612cca565b61320e888a61241e565b6116d09190613aaf565b600061009183670de0b6b3a764000084612cdb565b600060016001607f1b0382111561183a5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190613272906001600160801b031684613218565b905061329e7f000000000000000000000000000000000000000000000000000000000000000082613a9c565b6002546001600160801b0316111561195b576002547f0000000000000000000000000000000000000000000000000000000000000000906132e99083906001600160801b0316613aaf565b6100919190613aaf565b6132fb61396e565b600080613307846116d6565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016133429190613b40565b6040805180830381865af415801561335e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133829190613e94565b9350905082613397575060009150611c909050565b60006133b961166184610160015185610140015161241e90919063ffffffff16565b6133d9611661856101200151866101000151612cca90919063ffffffff16565b6133e39190613ce5565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b600061346e8585612f21565b61348761347f866119fe868b61241e565b859085611864565b6100759190613a9c565b600061349d8585612f21565b6134876134ae866119fe868b612cca565b859085612cdb565b6000806135068561350085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006134f6818c613218565b6135009190613aaf565b90612cca565b9150613532827f000000000000000000000000000000000000000000000000000000000000000061241e565b9050935093915050565b600081831361354b5781610091565b5090919050565b60008082136135745760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135f79084901c611810565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361379357506000919050565b680755bf798b4a1bf1e582126137bc576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612f8c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611810565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528061398261390d565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561195b57600080fd5b600080600080600060a086880312156139ea57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115613a1d57600080fd5b613a29888289016139c0565b9150509295509295909350565b600080600060608486031215613a4b57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613a7057600080fd5b613a7c868287016139c0565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561149757611497613a86565b8181038181111561149757611497613a86565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016114978284613ac2565b600060208284031215613b6157600080fd5b5051919050565b6001600160a01b0381168114610c8557600080fd5b600060208284031215613b8f57600080fd5b813561009181613b68565b8015158114610c8557600080fd5b600060208284031215613bba57600080fd5b813561009181613b9a565b6000808335601e19843603018112613bdc57600080fd5b83018035915067ffffffffffffffff821115613bf757600080fd5b602001915036819003821315610da257600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761149757611497613a86565b600080600060608486031215613c8c57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561198057611980613a86565b6001600160801b0381811683821601908082111561198057611980613a86565b818103600083128015838313168383128216171561198057611980613a86565b600060208284031215613d1757600080fd5b815161009181613b68565b8082018281126000831280158216821582161715613d4257613d42613a86565b505092915050565b600060208284031215613d5c57600080fd5b815161009181613b9a565b634e487b7160e01b600052601260045260246000fd5b600082613d8c57613d8c613d67565b500690565b6001600160801b0382811682821603908082111561198057611980613a86565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561149757611497613a86565b60006102a082019050613df2828551613ac2565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613e6757600080fd5b505080516020909101519092909150565b6000600160ff1b8201613e8d57613e8d613a86565b5060000390565b60008060408385031215613ea757600080fd5b825191506020830151613eb981613b9a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ef057600080fd5b8451935060208501519250604085015191506060850151613f1081613b9a565b939692955090935050565b600082613f2a57613f2a613d67565b600160ff1b821460001984141615613f4457613f44613a86565b50059056fea264697066735822122028ab3b441544fc104437d74c35f7dab4088c8a39825db7fda6c474a402403afe64736f6c634300081600336102806040523480156200001257600080fd5b5060405162003661380380620036618339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161322d62000434600039600050506000505060006109c10152600050506000818161026d015261205401526000818161189a015281816118fd01528181611c3901528181611c7501528181611e6d015261202e01526000818161056f01526120080152600061146f015260006115ca015260008181610733015261159e01526000505060008181610590015261207a01526000818161066b01526127cc0152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb0152610623015260005050600081816110ef015281816111380152818161235d015281816123a6015281816124810152818161252d0152818161261901526126c5015261322d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612cba565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612d11565b6100b5565b005b610059610095366004612cba565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612d48565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612d73565b61017160408c018c612d90565b60405161018396959493929190612e00565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612e50565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612d48565b88610ee8565b60006103066102fd6020870187612d48565b88848989610ad0565b90945090506103158188612e7a565b9250600061032283610f88565b5090506103326020870187612d48565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612d73565b8a888e80604001906103829190612d90565b604051610396989796959493929190612e8d565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612d48565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f00000000000000000000000000000000000000000000000000000000000000006111d6565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612ed5565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a6111ec565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061120d565b92505b506105c18361122d565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612e7a565b8a8461125b565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612ed5565b4290611399565b8461125b565b61065e886113ae565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612e7a565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611552565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d866000611587565b9150915080600960008282546107019190612ed5565b9091555061071d90508660008461071781611656565b88611680565b6107278183612ed5565b915061075786838a8e877f00000000000000000000000000000000000000000000000000000000000000006117fa565b915061076b6107668385611844565b611859565b6006805460029061078c9084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261122d565b600680546010906107db908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611552565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f886001611587565b9150915080600960008282546108529190612ed5565b9091555061086e90508360008461086881611656565b8a611883565b6108788183612e7a565b91506108876107668387611844565b600680546002906108a89084906201000090046001600160701b0316612ee8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261122d565b600680546010906108f7908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611656565b61093983611656565b6109439190612f28565b6000611a74565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612f48565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611ab3565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611b3e565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611b4b565b9050610b568361122d565b610b609083612f65565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161122d565b60078054601090610bab908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611b69565b9350610be68684611c02565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612e7a565b905080600003610c72576001915050610e08565b6000610c7d85611c17565b905080600003610c9257600192505050610e08565b600080610ca0838589611cb3565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190613003565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190613079565b91509150610d50610d4282611656565b610d4b9061309d565b611e27565b925082610d665760009650505050505050610e08565b610d6f8261122d565b60078054600090610d8a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161122d565b60078054601090610dd9908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612e7a565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612ed5565b90915550506000838152600b602052604081208054839290610f3d908490612ed5565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611fbf565b6040518263ffffffff1660e01b8152600401610fcd91906130b9565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d91906130c8565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612ed5565b6110939190612e7a565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611b4b565b976001975095505050505050565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016111235750476111ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab91906130f8565b90505b600f546000036111bf5760006111cf565b600f546111cf9084908390611b4b565b9392505050565b60006111e28284612e50565b6111cf9084612e7a565b600254600454600091610421916001600160801b0390911690600f0b6120f9565b60006112248261121e858888611b4b565b9061211f565b95945050505050565b60006001600160801b0382111561125757604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036112875750505050565b6000848152600860205260408120546001600160801b0316908190036112e1576112b08361122d565b600086815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561135f565b61133261132d670de0b6b3a76400006112fa8886612e7a565b6113049190613111565b85670de0b6b3a7640000611318878a612e7a565b6113229190613111565b859291906001612194565b61122d565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6113688461122d565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116113a857826111cf565b50919050565b60065460009081906113d1908490600160801b90046001600160801b0316611844565b6006546201000090046001600160701b0316925090508181111561154d5760006113fb8383612e7a565b905061140a61132d8286612232565b6006805460109061142c908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506000611465858361224790919063ffffffff16565b90506000611493827f0000000000000000000000000000000000000000000000000000000000000000611844565b905080600960008282546114a79190612ed5565b909155506114b790508183612e7a565b91506114c28261122d565b600280546000906114dd9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061150a8261225c565b6004805460009061151f908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b0382111561157c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806115948785612247565b915060006115c2837f0000000000000000000000000000000000000000000000000000000000000000611844565b90506115ee817f0000000000000000000000000000000000000000000000000000000000000000611844565b91508315611611576116008282612e7a565b61160a9084612e7a565b9250611628565b61161b8282612e7a565b6116259084612ed5565b92505b8686101561164b5761163b838789611b4b565b9250611648828789611b4b565b91505b509550959350505050565b60006001600160ff1b038211156112575760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166116c961132d826116ac670de0b6b3a764000086613111565b600554600160801b90046001600160801b031691908a6000612194565b600580546001600160801b03928316600160801b0292169190911790556116ef8661122d565b6116f99082612f65565b600480546001600160801b03928316600160801b02921691909117905561171f8461122d565b6002805460009061173a9084906001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061176783612286565b6004805460009061177c908490600f0b613128565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506117ac8561122d565b600280546010906117ce908490600160801b90046001600160801b0316612f65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806118128461180c8a888a611b4b565b90612247565b905061181f888486611b4b565b6118299082612ed5565b9050868111156118395786810391505b509695505050505050565b60006111cf8383670de0b6b3a7640000611b4b565b60006001600160701b038211156112575760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806118c557507f00000000000000000000000000000000000000000000000000000000000000006118c38583612e7a565b105b156118d2576118d26122c2565b6004549084900390600f0b6118e78482612f28565b9050836118f386611656565b13801561192857507f000000000000000000000000000000000000000000000000000000000000000061192683836120f9565b105b15611935576119356122c2565b600354600160801b90046001600160801b031661197761132d82611961670de0b6b3a764000088613111565b6005546001600160801b031691908c6000612194565b600580546001600160801b0319166001600160801b03929092169190911790556119a18882612e7a565b90506119ac8161122d565b600380546001600160801b03928316600160801b0292169190911790556119d28361122d565b600280546001600160801b0319166001600160801b03929092169190911790556119fb82612286565b600480546001600160801b0319166001600160801b0392909216919091179055611a248761122d565b60028054601090611a46908490600160801b90046001600160801b0316612f08565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a8f9061132d906001600160801b031684846122db565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611ad957611ad9613155565b6040519080825280601f01601f191660200182016040528015611b03576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611b24578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611b6257600080fd5b5091020490565b600080611b768585611844565b9050611b8181612342565b945084600003611b955760009150506111cf565b849150611ba86040840160208501612d73565b15611bd757611bd085611bbe6020860186612d48565b611bcb6040870187612d90565b61242b565b9150611bfa565b611bfa85611be86020860186612d48565b611bf56040870187612d90565b6125c5565b509392505050565b60006111cf8383670de0b6b3a764000061275b565b6003546000908190611c32906001600160801b031684612232565b9050611c5e7f000000000000000000000000000000000000000000000000000000000000000082612ed5565b6002546001600160801b031611156113a8576002547f000000000000000000000000000000000000000000000000000000000000000090611ca99083906001600160801b0316612e7a565b6111cf9190612e7a565b611cbb612c07565b600080611cc784611fbf565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611d0291906130b9565b6040805180830381865af4158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4291906130c8565b9350905082611d575750600091506100ad9050565b6000611d7e611d7984610160015185610140015161184490919063ffffffff16565b611656565b611d9e611d79856101200151866101000151611c0290919063ffffffff16565b611da89190612f28565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = StkWellHyperdriveInstanceTestContractFunctions(stkwellhyperdriveinstancetest_abi, self.w3, address)  # type: ignore
        self.events = StkWellHyperdriveInstanceTestContractEvents(stkwellhyperdriveinstancetest_abi, self.w3, address)  # type: ignore
        self.errors = StkWellHyperdriveInstanceTestContractErrors()

    events: StkWellHyperdriveInstanceTestContractEvents

    errors: StkWellHyperdriveInstanceTestContractErrors = (
        StkWellHyperdriveInstanceTestContractErrors()
    )

    functions: StkWellHyperdriveInstanceTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        StkWellConversions: StkWellConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "StkWellConversions": "__$d9e3dcde200ce050ae5bde3efb6129cc33$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["StkWellConversions"],
                link_references.StkWellConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = StkWellHyperdriveInstanceTestContractFunctions(
            stkwellhyperdriveinstancetest_abi, w3, None
        )
        contract.errors = StkWellHyperdriveInstanceTestContractErrors()

        return contract
