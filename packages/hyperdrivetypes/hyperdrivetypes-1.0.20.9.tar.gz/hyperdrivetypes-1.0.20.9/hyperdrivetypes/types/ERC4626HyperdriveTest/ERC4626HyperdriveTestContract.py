"""A web3.py Contract class for the ERC4626HyperdriveTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.46.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

import copy
from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    check_txn_receipt,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    handle_contract_logic_error,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .ERC4626HyperdriveTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}


class ERC4626HyperdriveTestIS_TESTContractFunction0(PypechainContractFunction):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestIS_TESTContractFunction(PypechainContractFunction):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestIS_TESTContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestIS_TESTContractFunction0._type_signature: ERC4626HyperdriveTestIS_TESTContractFunction0.factory(
                "ERC4626HyperdriveTestIS_TESTContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestCreateUserContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, name: str) -> ERC4626HyperdriveTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestCreateUserContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestCreateUserContractFunction0._type_signature: ERC4626HyperdriveTestCreateUserContractFunction0.factory(
                "ERC4626HyperdriveTestCreateUserContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestExcludeArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestExcludeArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestExcludeArtifactsContractFunction0._type_signature: ERC4626HyperdriveTestExcludeArtifactsContractFunction0.factory(
                "ERC4626HyperdriveTestExcludeArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestExcludeContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestExcludeContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestExcludeContractsContractFunction0._type_signature: ERC4626HyperdriveTestExcludeContractsContractFunction0.factory(
                "ERC4626HyperdriveTestExcludeContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestExcludeSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestExcludeSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestExcludeSendersContractFunction0._type_signature: ERC4626HyperdriveTestExcludeSendersContractFunction0.factory(
                "ERC4626HyperdriveTestExcludeSendersContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestFailedContractFunction0(PypechainContractFunction):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestFailedContractFunction(PypechainContractFunction):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestFailedContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestFailedContractFunction0._type_signature: ERC4626HyperdriveTestFailedContractFunction0.factory(
                "ERC4626HyperdriveTestFailedContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestSetUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestSetUpContractFunction(PypechainContractFunction):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestSetUpContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestSetUpContractFunction0._type_signature: ERC4626HyperdriveTestSetUpContractFunction0.factory(
                "ERC4626HyperdriveTestSetUpContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction0._type_signature: ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction0.factory(
                "ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetArtifactsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetArtifactsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetArtifactsContractFunction0._type_signature: ERC4626HyperdriveTestTargetArtifactsContractFunction0.factory(
                "ERC4626HyperdriveTestTargetArtifactsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetContractsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetContractsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetContractsContractFunction0._type_signature: ERC4626HyperdriveTestTargetContractsContractFunction0.factory(
                "ERC4626HyperdriveTestTargetContractsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetInterfacesContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetInterfacesContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetInterfacesContractFunction0._type_signature: ERC4626HyperdriveTestTargetInterfacesContractFunction0.factory(
                "ERC4626HyperdriveTestTargetInterfacesContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetSelectorsContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetSelectorsContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetSelectorsContractFunction0._type_signature: ERC4626HyperdriveTestTargetSelectorsContractFunction0.factory(
                "ERC4626HyperdriveTestTargetSelectorsContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTargetSendersContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTargetSendersContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTargetSendersContractFunction0._type_signature: ERC4626HyperdriveTestTargetSendersContractFunction0.factory(
                "ERC4626HyperdriveTestTargetSendersContractFunction0", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_depositContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_deposit() method."""

    _function_name = "test_erc4626_deposit"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_depositContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_deposit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_deposit"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_depositContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_depositContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_depositContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_depositContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_depositContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_kindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_kind() method."""

    _function_name = "test_erc4626_kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_kindContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_kindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_kindContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_kindContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_kindContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_kindContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_nameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_name() method."""

    _function_name = "test_erc4626_name"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_nameContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_nameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_nameContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_nameContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_nameContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_nameContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_testDeploy() method."""

    _function_name = "test_erc4626_testDeploy"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_testDeploy method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_testDeploy"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_vaultSharePrice() method."""

    _function_name = "test_erc4626_vaultSharePrice"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_vaultSharePrice method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_vaultSharePrice"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_versionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_version() method."""

    _function_name = "test_erc4626_version"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_versionContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_versionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_versionContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_versionContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_versionContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_versionContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_withdraw() method."""

    _function_name = "test_erc4626_withdraw"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_withdraw method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_withdraw"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_withdraw_zero() method."""

    _function_name = "test_erc4626_withdraw_zero"
    _type_signature = expand_struct_type_str(tuple([]), structs)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the test_erc4626_withdraw_zero method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_erc4626_withdraw_zero"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction0._type_signature: ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction0.factory(
                "ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction0",
                **kwargs,
            ),
        }
        return out


class ERC4626HyperdriveTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        try:
            raw_values = super().call(
                transaction, block_identifier, state_override, ccip_read_enabled
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="call",
                transaction=transaction,
                block_identifier=block_identifier,
            ) from err

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )

    def transact(self, transaction: TxParams | None = None) -> HexBytes:
        try:
            return super().transact(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def estimate_gas(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
    ) -> int:
        try:
            return super().estimate_gas(
                transaction, block_identifier, state_override
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def build_transaction(
        self, transaction: TxParams | None = None
    ) -> TxParams:
        try:
            return super().build_transaction(transaction)
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="build",
                transaction=transaction,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_and_transact(
        self, account: LocalAccount, transaction: TxParams | None = None
    ) -> HexBytes:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.

        Returns
        -------
        HexBytes
            The transaction hash.
        """
        if transaction is None:
            transaction_params: TxParams = {}
        else:
            transaction_params: TxParams = transaction

        if "from" in transaction_params:
            # Ensure if transaction is set, it matches
            assert (
                transaction_params["from"] == account.address
            ), f"Transaction from {transaction_params['from']} does not match account {account.address}"
        else:
            transaction_params["from"] = account.address

        if "gas" not in transaction_params:
            # Web3 default gas estimate seems to be underestimating gas, likely due to
            # not looking at pending block. Here, we explicitly call estimate gas
            # if gas isn't passed in.
            transaction_params["gas"] = self.estimate_gas(
                transaction_params, block_identifier="pending"
            )

        # Build the raw transaction
        raw_transaction = self.build_transaction(transaction_params)

        if "nonce" not in raw_transaction:
            raw_transaction["nonce"] = self.w3.eth.get_transaction_count(
                account.address, block_identifier="pending"
            )

        # Sign the raw transaction
        # Mismatched types between account and web3py
        signed_transaction = account.sign_transaction(raw_transaction)  # type: ignore

        # Send the signed transaction
        try:
            return self.w3.eth.send_raw_transaction(
                signed_transaction.raw_transaction
            )
        except Exception as err:  # pylint disable=broad-except
            raise handle_contract_logic_error(
                contract_function=self,
                errors_class=ERC4626HyperdriveTestContractErrors,
                err=err,
                contract_call_type="transact",
                transaction=transaction_params,
                block_identifier="pending",  # race condition here, best effort to get block of txn.
            ) from err

    def sign_transact_and_wait(
        self,
        account: LocalAccount,
        transaction: TxParams | None = None,
        timeout: float | None = None,
        poll_latency: float | None = None,
        validate_transaction: bool = False,
    ) -> TxReceipt:
        """Convenience method for signing and sending a transaction using the provided account.

        Arguments
        ---------
        account : LocalAccount
            The account to use for signing and sending the transaction.
        transaction : TxParams | None, optional
            The transaction parameters to use for sending the transaction.
        timeout: float, optional
            The number of seconds to wait for the transaction to be mined. Defaults to 120.
        poll_latency: float, optional
            The number of seconds to wait between polling for the transaction receipt. Defaults to 0.1.
        validate_transaction: bool, optional
            Whether to validate the transaction. If True, will throw an exception if the resulting
            tx_receipt returned a failure status.

        Returns
        -------
        HexBytes
            The transaction hash.
        """

        # pylint: disable=too-many-arguments
        # pylint: disable=too-many-positional-arguments

        if timeout is None:
            timeout = 120
        if poll_latency is None:
            poll_latency = 0.1

        tx_hash = self.sign_and_transact(account, transaction)
        tx_receipt = self.w3.eth.wait_for_transaction_receipt(
            tx_hash, timeout=timeout, poll_latency=poll_latency
        )
        # Check the receipt, throwing an error if status == 0
        if validate_transaction:
            return check_txn_receipt(self, tx_hash, tx_receipt)
        else:
            return tx_receipt


class ERC4626HyperdriveTestWhaleTransferContractFunction(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> ERC4626HyperdriveTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> ERC4626HyperdriveTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626HyperdriveTestWhaleTransferContractFunction:  # type: ignore
        clone = super().__call__(
            *(dataclass_to_tuple(arg) for arg in args),
            **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
        )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Look up the function class based on arg types.
        # We ensure we use a copy of the original object.
        function_obj = copy.copy(self._functions[arg_types])

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instanciated object
        # (attached to a specific web3 and contract address)
        out._functions = {
            ERC4626HyperdriveTestWhaleTransferContractFunction0._type_signature: ERC4626HyperdriveTestWhaleTransferContractFunction0.factory(
                "ERC4626HyperdriveTestWhaleTransferContractFunction0", **kwargs
            ),
            ERC4626HyperdriveTestWhaleTransferContractFunction1._type_signature: ERC4626HyperdriveTestWhaleTransferContractFunction1.factory(
                "ERC4626HyperdriveTestWhaleTransferContractFunction1", **kwargs
            ),
        }
        return out


class ERC4626HyperdriveTestContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC4626HyperdriveTest contract."""

    IS_TEST: ERC4626HyperdriveTestIS_TESTContractFunction

    createUser: ERC4626HyperdriveTestCreateUserContractFunction

    excludeArtifacts: ERC4626HyperdriveTestExcludeArtifactsContractFunction

    excludeContracts: ERC4626HyperdriveTestExcludeContractsContractFunction

    excludeSenders: ERC4626HyperdriveTestExcludeSendersContractFunction

    failed: ERC4626HyperdriveTestFailedContractFunction

    setUp: ERC4626HyperdriveTestSetUpContractFunction

    targetArtifactSelectors: (
        ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: ERC4626HyperdriveTestTargetArtifactsContractFunction

    targetContracts: ERC4626HyperdriveTestTargetContractsContractFunction

    targetInterfaces: ERC4626HyperdriveTestTargetInterfacesContractFunction

    targetSelectors: ERC4626HyperdriveTestTargetSelectorsContractFunction

    targetSenders: ERC4626HyperdriveTestTargetSendersContractFunction

    test_erc4626_deposit: (
        ERC4626HyperdriveTestTest_erc4626_depositContractFunction
    )

    test_erc4626_kind: ERC4626HyperdriveTestTest_erc4626_kindContractFunction

    test_erc4626_name: ERC4626HyperdriveTestTest_erc4626_nameContractFunction

    test_erc4626_testDeploy: (
        ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction
    )

    test_erc4626_vaultSharePrice: (
        ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction
    )

    test_erc4626_version: (
        ERC4626HyperdriveTestTest_erc4626_versionContractFunction
    )

    test_erc4626_withdraw: (
        ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction
    )

    test_erc4626_withdraw_zero: (
        ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction
    )

    whaleTransfer: ERC4626HyperdriveTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = ERC4626HyperdriveTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="IS_TEST",
        )
        self.createUser = (
            ERC4626HyperdriveTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = (
            ERC4626HyperdriveTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            ERC4626HyperdriveTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeContracts",
            )
        )
        self.excludeSenders = (
            ERC4626HyperdriveTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeSenders",
            )
        )
        self.failed = ERC4626HyperdriveTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="failed",
        )
        self.setUp = ERC4626HyperdriveTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = ERC4626HyperdriveTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = (
            ERC4626HyperdriveTestTargetArtifactsContractFunction.factory(
                "targetArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetArtifacts",
            )
        )
        self.targetContracts = (
            ERC4626HyperdriveTestTargetContractsContractFunction.factory(
                "targetContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetContracts",
            )
        )
        self.targetInterfaces = (
            ERC4626HyperdriveTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = (
            ERC4626HyperdriveTestTargetSelectorsContractFunction.factory(
                "targetSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSelectors",
            )
        )
        self.targetSenders = (
            ERC4626HyperdriveTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test_erc4626_deposit = (
            ERC4626HyperdriveTestTest_erc4626_depositContractFunction.factory(
                "test_erc4626_deposit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_erc4626_deposit",
            )
        )
        self.test_erc4626_kind = (
            ERC4626HyperdriveTestTest_erc4626_kindContractFunction.factory(
                "test_erc4626_kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_erc4626_kind",
            )
        )
        self.test_erc4626_name = (
            ERC4626HyperdriveTestTest_erc4626_nameContractFunction.factory(
                "test_erc4626_name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_erc4626_name",
            )
        )
        self.test_erc4626_testDeploy = ERC4626HyperdriveTestTest_erc4626_testDeployContractFunction.factory(
            "test_erc4626_testDeploy",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_erc4626_testDeploy",
        )
        self.test_erc4626_vaultSharePrice = ERC4626HyperdriveTestTest_erc4626_vaultSharePriceContractFunction.factory(
            "test_erc4626_vaultSharePrice",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_erc4626_vaultSharePrice",
        )
        self.test_erc4626_version = (
            ERC4626HyperdriveTestTest_erc4626_versionContractFunction.factory(
                "test_erc4626_version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_erc4626_version",
            )
        )
        self.test_erc4626_withdraw = (
            ERC4626HyperdriveTestTest_erc4626_withdrawContractFunction.factory(
                "test_erc4626_withdraw",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_erc4626_withdraw",
            )
        )
        self.test_erc4626_withdraw_zero = ERC4626HyperdriveTestTest_erc4626_withdraw_zeroContractFunction.factory(
            "test_erc4626_withdraw_zero",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_erc4626_withdraw_zero",
        )
        self.whaleTransfer = (
            ERC4626HyperdriveTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class ERC4626HyperdriveTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626HyperdriveTestContractEvents(ContractEvents):
    """ContractEvents for the ERC4626HyperdriveTest contract."""

    AddLiquidity: Type[ERC4626HyperdriveTestAddLiquidityContractEvent]

    Approval: Type[ERC4626HyperdriveTestApprovalContractEvent]

    ApprovalForAll: Type[ERC4626HyperdriveTestApprovalForAllContractEvent]

    CloseLong: Type[ERC4626HyperdriveTestCloseLongContractEvent]

    CloseShort: Type[ERC4626HyperdriveTestCloseShortContractEvent]

    CollectGovernanceFee: Type[
        ERC4626HyperdriveTestCollectGovernanceFeeContractEvent
    ]

    CreateCheckpoint: Type[ERC4626HyperdriveTestCreateCheckpointContractEvent]

    Deployed: Type[ERC4626HyperdriveTestDeployedContractEvent]

    Initialize: Type[ERC4626HyperdriveTestInitializeContractEvent]

    OpenLong: Type[ERC4626HyperdriveTestOpenLongContractEvent]

    OpenShort: Type[ERC4626HyperdriveTestOpenShortContractEvent]

    PauseStatusUpdated: Type[
        ERC4626HyperdriveTestPauseStatusUpdatedContractEvent
    ]

    RedeemWithdrawalShares: Type[
        ERC4626HyperdriveTestRedeemWithdrawalSharesContractEvent
    ]

    RemoveLiquidity: Type[ERC4626HyperdriveTestRemoveLiquidityContractEvent]

    Sweep: Type[ERC4626HyperdriveTestSweepContractEvent]

    TransferSingle: Type[ERC4626HyperdriveTestTransferSingleContractEvent]

    log: Type[ERC4626HyperdriveTestLogContractEvent]

    log_address: Type[ERC4626HyperdriveTestLog_addressContractEvent]

    log_array: Type[ERC4626HyperdriveTestLog_arrayContractEvent]

    log_bytes: Type[ERC4626HyperdriveTestLog_bytesContractEvent]

    log_bytes32: Type[ERC4626HyperdriveTestLog_bytes32ContractEvent]

    log_int: Type[ERC4626HyperdriveTestLog_intContractEvent]

    log_named_address: Type[ERC4626HyperdriveTestLog_named_addressContractEvent]

    log_named_array: Type[ERC4626HyperdriveTestLog_named_arrayContractEvent]

    log_named_bytes: Type[ERC4626HyperdriveTestLog_named_bytesContractEvent]

    log_named_bytes32: Type[ERC4626HyperdriveTestLog_named_bytes32ContractEvent]

    log_named_decimal_int: Type[
        ERC4626HyperdriveTestLog_named_decimal_intContractEvent
    ]

    log_named_decimal_uint: Type[
        ERC4626HyperdriveTestLog_named_decimal_uintContractEvent
    ]

    log_named_int: Type[ERC4626HyperdriveTestLog_named_intContractEvent]

    log_named_string: Type[ERC4626HyperdriveTestLog_named_stringContractEvent]

    log_named_uint: Type[ERC4626HyperdriveTestLog_named_uintContractEvent]

    log_string: Type[ERC4626HyperdriveTestLog_stringContractEvent]

    log_uint: Type[ERC4626HyperdriveTestLog_uintContractEvent]

    logs: Type[ERC4626HyperdriveTestLogsContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            Type[ERC4626HyperdriveTestAddLiquidityContractEvent],
            ERC4626HyperdriveTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            ),
        )
        self.Approval = cast(
            Type[ERC4626HyperdriveTestApprovalContractEvent],
            ERC4626HyperdriveTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            ),
        )
        self.ApprovalForAll = cast(
            Type[ERC4626HyperdriveTestApprovalForAllContractEvent],
            ERC4626HyperdriveTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            ),
        )
        self.CloseLong = cast(
            Type[ERC4626HyperdriveTestCloseLongContractEvent],
            ERC4626HyperdriveTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            ),
        )
        self.CloseShort = cast(
            Type[ERC4626HyperdriveTestCloseShortContractEvent],
            ERC4626HyperdriveTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            ),
        )
        self.CollectGovernanceFee = cast(
            Type[ERC4626HyperdriveTestCollectGovernanceFeeContractEvent],
            ERC4626HyperdriveTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            ),
        )
        self.CreateCheckpoint = cast(
            Type[ERC4626HyperdriveTestCreateCheckpointContractEvent],
            ERC4626HyperdriveTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            ),
        )
        self.Deployed = cast(
            Type[ERC4626HyperdriveTestDeployedContractEvent],
            ERC4626HyperdriveTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            ),
        )
        self.Initialize = cast(
            Type[ERC4626HyperdriveTestInitializeContractEvent],
            ERC4626HyperdriveTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            ),
        )
        self.OpenLong = cast(
            Type[ERC4626HyperdriveTestOpenLongContractEvent],
            ERC4626HyperdriveTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            ),
        )
        self.OpenShort = cast(
            Type[ERC4626HyperdriveTestOpenShortContractEvent],
            ERC4626HyperdriveTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            ),
        )
        self.PauseStatusUpdated = cast(
            Type[ERC4626HyperdriveTestPauseStatusUpdatedContractEvent],
            ERC4626HyperdriveTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            ),
        )
        self.RedeemWithdrawalShares = cast(
            Type[ERC4626HyperdriveTestRedeemWithdrawalSharesContractEvent],
            ERC4626HyperdriveTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            ),
        )
        self.RemoveLiquidity = cast(
            Type[ERC4626HyperdriveTestRemoveLiquidityContractEvent],
            ERC4626HyperdriveTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            ),
        )
        self.Sweep = cast(
            Type[ERC4626HyperdriveTestSweepContractEvent],
            ERC4626HyperdriveTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            ),
        )
        self.TransferSingle = cast(
            Type[ERC4626HyperdriveTestTransferSingleContractEvent],
            ERC4626HyperdriveTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            ),
        )
        self.log = cast(
            Type[ERC4626HyperdriveTestLogContractEvent],
            ERC4626HyperdriveTestLogContractEvent.factory(
                "log",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log",
            ),
        )
        self.log_address = cast(
            Type[ERC4626HyperdriveTestLog_addressContractEvent],
            ERC4626HyperdriveTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            ),
        )
        self.log_array = cast(
            Type[ERC4626HyperdriveTestLog_arrayContractEvent],
            ERC4626HyperdriveTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            ),
        )
        self.log_bytes = cast(
            Type[ERC4626HyperdriveTestLog_bytesContractEvent],
            ERC4626HyperdriveTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            ),
        )
        self.log_bytes32 = cast(
            Type[ERC4626HyperdriveTestLog_bytes32ContractEvent],
            ERC4626HyperdriveTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            ),
        )
        self.log_int = cast(
            Type[ERC4626HyperdriveTestLog_intContractEvent],
            ERC4626HyperdriveTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            ),
        )
        self.log_named_address = cast(
            Type[ERC4626HyperdriveTestLog_named_addressContractEvent],
            ERC4626HyperdriveTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            ),
        )
        self.log_named_array = cast(
            Type[ERC4626HyperdriveTestLog_named_arrayContractEvent],
            ERC4626HyperdriveTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            ),
        )
        self.log_named_bytes = cast(
            Type[ERC4626HyperdriveTestLog_named_bytesContractEvent],
            ERC4626HyperdriveTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            ),
        )
        self.log_named_bytes32 = cast(
            Type[ERC4626HyperdriveTestLog_named_bytes32ContractEvent],
            ERC4626HyperdriveTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            ),
        )
        self.log_named_decimal_int = cast(
            Type[ERC4626HyperdriveTestLog_named_decimal_intContractEvent],
            ERC4626HyperdriveTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            ),
        )
        self.log_named_decimal_uint = cast(
            Type[ERC4626HyperdriveTestLog_named_decimal_uintContractEvent],
            ERC4626HyperdriveTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            ),
        )
        self.log_named_int = cast(
            Type[ERC4626HyperdriveTestLog_named_intContractEvent],
            ERC4626HyperdriveTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            ),
        )
        self.log_named_string = cast(
            Type[ERC4626HyperdriveTestLog_named_stringContractEvent],
            ERC4626HyperdriveTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            ),
        )
        self.log_named_uint = cast(
            Type[ERC4626HyperdriveTestLog_named_uintContractEvent],
            ERC4626HyperdriveTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            ),
        )
        self.log_string = cast(
            Type[ERC4626HyperdriveTestLog_stringContractEvent],
            ERC4626HyperdriveTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            ),
        )
        self.log_uint = cast(
            Type[ERC4626HyperdriveTestLog_uintContractEvent],
            ERC4626HyperdriveTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            ),
        )
        self.logs = cast(
            Type[ERC4626HyperdriveTestLogsContractEvent],
            ERC4626HyperdriveTestLogsContractEvent.factory(
                "logs",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="logs",
            ),
        )


erc4626hyperdrivetest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_erc4626_deposit",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_erc4626_kind",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_erc4626_name",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_erc4626_testDeploy",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_erc4626_vaultSharePrice",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_erc4626_version",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_erc4626_withdraw",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_erc4626_withdraw_zero",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class ERC4626HyperdriveTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = erc4626hyperdrivetest_abi


class ERC4626HyperdriveTestWhaleIsContractContractError(PypechainBaseError):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = erc4626hyperdrivetest_abi


class ERC4626HyperdriveTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the ERC4626HyperdriveTest contract."""

    WhaleBalanceExceeded: ERC4626HyperdriveTestWhaleBalanceExceededContractError

    WhaleIsContract: ERC4626HyperdriveTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.WhaleBalanceExceeded = (
            ERC4626HyperdriveTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            ERC4626HyperdriveTestWhaleIsContractContractError()
        )

        self._all = [
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class ERC4626HyperdriveTestContract(Contract):
    """A web3.py Contract class for the ERC4626HyperdriveTest contract."""

    abi: ABI = erc4626hyperdrivetest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60806040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b90526020608452601060a4526f105490925514955357d49410d7d5549360821b60c4526000805160206203f70d83398151915263f877cb1960e4600060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ad91908101906200045b565b602c90620000bc9082620005c1565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b60448201526000805160206203f70d8339815191529063f877cb1990606401600060405180830381865afa15801562000125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200014f91908101906200045b565b602d906200015e9082620005c1565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c00000000000000000000000060448201526000805160206203f70d8339815191529063f877cb1990606401600060405180830381865afa158015620001d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200020291908101906200045b565b602e90620002119082620005c1565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b60448201526000805160206203f70d8339815191529063f877cb1990606401600060405180830381865afa1580156200027b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002a591908101906200045b565b602f90620002b49082620005c1565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b60448201526000805160206203f70d8339815191529063f877cb1990606401600060405180830381865afa15801562000320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200034a91908101906200045b565b603090620003599082620005c1565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b60448201526000805160206203f70d8339815191529063f877cb1990606401600060405180830381865afa158015620003c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003ef91908101906200045b565b603190620003fe9082620005c1565b50603580546001600160a01b0319908116909155603f8054909116736b175474e89094c44da98b954eedeac495271d0f1790553480156200043e57600080fd5b506200068d565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200046f57600080fd5b82516001600160401b03808211156200048757600080fd5b818501915085601f8301126200049c57600080fd5b815181811115620004b157620004b162000445565b604051601f8201601f19908116603f01168101908382118183101715620004dc57620004dc62000445565b816040528281528886848701011115620004f557600080fd5b600093505b82841015620005195784840186015181850187015292850192620004fa565b600086848301015280965050505050505092915050565b600181811c908216806200054557607f821691505b6020821081036200056657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005bc576000816000526020600020601f850160051c81016020861015620005975750805b601f850160051c820191505b81811015620005b857828155600101620005a3565b5050505b505050565b81516001600160401b03811115620005dd57620005dd62000445565b620005f581620005ee845462000530565b846200056c565b602080601f8311600181146200062d5760008415620006145750858301515b600019600386901b1c1916600185901b178555620005b8565b600085815260208120601f198616915b828110156200065e578886015182559484019460019091019084016200063d565b50858210156200067d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6203f06f806200069e6000396000f3fe60806040523480156200001157600080fd5b5060043610620001695760003560e01c8063507ffba511620000d35780639a9c940411620000865780639a9c940414620002a9578063b5508aa914620002b3578063ba414fa614620002bd578063e20c9f7114620002d8578063fa7626d414620002e2578063fbcd281e14620002f057600080fd5b8063507ffba514620002295780635fd0e4c0146200025957806366d9a9a0146200026357806381344a92146200027c57806385226c811462000286578063916a17c6146200029f57600080fd5b80632ade3880116200012c5780632ade388014620001d1578063360e671214620001ea5780633e5e0d2614620001f45780633e5e3c23146200020b5780633f7286f41462000215578063435e4e75146200021f57600080fd5b80630a9254e4146200016e57806310229703146200017a5780631071676014620001845780631c76d27414620001ae5780631ed7831c14620001b8575b600080fd5b62000178620002fa565b005b6200017862001535565b6200019b6200019536600462004e40565b62001621565b6040519081526020015b60405180910390f35b62000178620016a9565b620001c262001f71565b604051620001a5919062004e92565b620001db62001fd5565b604051620001a5919062004f35565b6200017862002123565b6200019b6200020536600462004ffb565b62002276565b620001c2620024d0565b620001c262002532565b6200017862002594565b620002406200023a36600462005144565b62002b29565b6040516001600160a01b039091168152602001620001a5565b6200017862002c39565b6200026d62002d77565b604051620001a59190620051cc565b6200017862002e61565b620002906200359d565b604051620001a5919062005285565b6200026d62003677565b6200017862003761565b6200029062003b98565b620002c762003c72565b6040519015158152602001620001a5565b620001c262003d27565b601e54620002c79060ff1681565b6200017862003d89565b604051630637469360e31b815262fe9b94906000906000805160206203efd6833981519152906331ba349890620003379060309060040162005329565b6020604051808303816000875af115801562000357573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037d9190620053e2565b604051639ebf682760e01b8152600481018290529091506000805160206203efd683398151915290639ebf682790602401600060405180830381600087803b158015620003c957600080fd5b505af1158015620003de573d6000803e3d6000fd5b505060405163d9bbf3a160e01b8152600481018590526000805160206203efd6833981519152925063d9bbf3a19150602401600060405180830381600087803b1580156200042b57600080fd5b505af115801562000440573d6000803e3d6000fd5b50506032805460ff191660011790555050604080518082019091526005815264616c69636560d81b6020820152620004789062002b29565b601e60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550620004c4604051806040016040528060038152602001623137b160e91b81525062002b29565b601f80546001600160a01b0319166001600160a01b03928316179055602480546040516303223eab60e11b8152921660048301526000805160206203efd6833981519152916306447d569101600060405180830381600087803b1580156200052b57600080fd5b505af115801562000540573d6000803e3d6000fd5b50505050603f60009054906101000a90046001600160a01b03166000806000600019604051620005709062004d47565b6001600160a01b03958616815260e06020820181905260099082015268796561726e2064616960b81b61010082015261012060408201819052600490820152637944616960e01b6101408201526060810194909452939091166080830152151560a082015260c081019190915261016001604051809103906000f080158015620005fe573d6000803e3d6000fd5b50604080546001600160a01b0319166001600160a01b039290921691909117815580516001808252818301909252600091602080830190803683375050601f5482519293506001600160a01b031691839150600090620006625762000662620053fc565b60200260200101906001600160a01b031690816001600160a01b031681525050604051620006909062004d55565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103906000f080158015620006d4573d6000803e3d6000fd5b5060328054610100600160a81b0319166101006001600160a01b0393841681029190911791829055604080516102c081018252601e548390048516815260208054861681830152601f5486168284015260608083018890526025548716608080850191909152602654881660a0850152600060c08501819052610e1060e0860152617080858801526201518061012086015262093a806101408601526312cc0300610160860152670214e8348c4f0000610180860152671bc16d674ec800006101a086015266038d7ea4c680006101c08601526706f05b59d3b200006101e086018190526611c37937e08000610200870152610220860152855180830187528181528085018290528087018290528084019190915261024085015284519081018552670de0b6b3a764000080825281840181905281860181905291810191909152610260830152929093049093166102808301819052835163d13053bb60e01b8152935192936102a0850193919263d13053bb926004808401938290030181865afa15801562000868573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088e9190620053e2565b90526040516200089e9062004d63565b620008aa919062005459565b604051809103906000f080158015620008c7573d6000803e3d6000fd5b50604380546001600160a01b0319166001600160a01b0392909216919091179055604051620008f69062004d71565b604051809103906000f08015801562000913573d6000803e3d6000fd5b50603980546001600160a01b0319166001600160a01b0392909216919091179055604051620009429062004d7f565b604051809103906000f0801580156200095f573d6000803e3d6000fd5b50603a80546001600160a01b0319166001600160a01b03929092169190911790556040516200098e9062004d8d565b604051809103906000f080158015620009ab573d6000803e3d6000fd5b50603b80546001600160a01b0319166001600160a01b0392909216919091179055604051620009da9062004d9b565b604051809103906000f080158015620009f7573d6000803e3d6000fd5b50603c80546001600160a01b0319166001600160a01b039290921691909117905560405162000a269062004da9565b604051809103906000f08015801562000a43573d6000803e3d6000fd5b50603d80546001600160a01b0319166001600160a01b039290921691909117905560405162000a729062004db7565b604051809103906000f08015801562000a8f573d6000803e3d6000fd5b50603e80546001600160a01b0319166001600160a01b03928316908117909155604080518082018252601d81527f487970657264726976654465706c6f796572436f6f7264696e61746f720000006020820152604354603954603a54603b54603c54603d549651959894851697938516969285169591851694908116939216919062000b1b9062004dc5565b62000b2e98979695949392919062005663565b604051809103906000f08015801562000b4b573d6000803e3d6000fd5b50603880546001600160a01b0319166001600160a01b03928316179055603f54601e5473075e72a5edf65f0a5f44699c7654c1a76941ddc89262000b9c928492908216916101009091041662001621565b506040805161020081018252603f546001600160a01b0390811682528254166020820152600091810182905260608101829052670de0b6b3a76400006080820181905260a0820181905266038d7ea4c6800060c0830152671bc16d674ec8000060e08301526301e133806101008301526201518061012083015261014082019062000c3190680133e79f1880bca5ea620042ed565b8152601e546001600160a01b036101009091048116602080840191909152601f54821660408085019190915281548316606080860191909152600060808087018290528351908101845281815293840181905283830181905290830181905260a0909401919091526043549051939450919284929091169062000cb49062004dd3565b62000cc1929190620057e5565b604051809103906000f08015801562000cde573d6000803e3d6000fd5b5060435460405191925060009184916001600160a01b03169062000d029062004de1565b62000d0f929190620057e5565b604051809103906000f08015801562000d2c573d6000803e3d6000fd5b5060435460405191925060009185916001600160a01b03169062000d509062004def565b62000d5d929190620057e5565b604051809103906000f08015801562000d7a573d6000803e3d6000fd5b5060435460405191925060009186916001600160a01b03169062000d9e9062004dfd565b62000dab929190620057e5565b604051809103906000f08015801562000dc8573d6000803e3d6000fd5b5060435460405191925060009187916001600160a01b03169062000dec9062004e0b565b62000df9929190620057e5565b604051809103906000f08015801562000e16573d6000803e3d6000fd5b5090506040518060400160405280600a8152602001694879706572647269766560b01b81525086604360009054906101000a90046001600160a01b0316878787878760405162000e669062004e19565b62000e799897969594939291906200580f565b604051809103906000f08015801562000e96573d6000803e3d6000fd5b50604260006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000805160206203f01a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000f0b57600080fd5b505af115801562000f20573d6000803e3d6000fd5b5050601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd683398151915292506306447d569150602401600060405180830381600087803b15801562000f7d57600080fd5b505af115801562000f92573d6000803e3d6000fd5b5050604354603854604051630843957560e31b81526001600160a01b0391821660048201529116925063421caba89150602401600060405180830381600087803b15801562000fe057600080fd5b505af115801562000ff5573d6000803e3d6000fd5b5050603f5460435460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620010349290911690600019906004016200587e565b6020604051808303816000875af115801562001054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107a9190620058ad565b50603f5460365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620010b592911690600019906004016200587e565b6020604051808303816000875af1158015620010d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010fb9190620058ad565b50603f5460425460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200113692911690600019906004016200587e565b6020604051808303816000875af115801562001156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200117c9190620058ad565b50603f5460408054905163095ea7b360e01b81526001600160a01b039283169263095ea7b392620011b792911690600019906004016200587e565b6020604051808303816000875af1158015620011d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011fd9190620058ad565b5060408054601e549151636e553f6560e01b8152678ac7230489e8000060048201526101009092046001600160a01b0390811660248401521690636e553f65906044016020604051808303816000875af115801562001260573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012869190620053e2565b604155604080516390c5013b60e01b815290516000805160206203efd6833981519152916390c5013b91600480830192600092919082900301818387803b158015620012d157600080fd5b505af1158015620012e6573d6000803e3d6000fd5b5050601f546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206203efd683398151915292506306447d569150602401600060405180830381600087803b1580156200133f57600080fd5b505af115801562001354573d6000803e3d6000fd5b5050603f5460365460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620013939290911690600019906004016200587e565b6020604051808303816000875af1158015620013b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013d99190620058ad565b50603f5460425460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200141492911690600019906004016200587e565b6020604051808303816000875af115801562001434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200145a9190620058ad565b506000805160206203f01a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620014a957600080fd5b505af1158015620014be573d6000803e3d6000fd5b505050506000805160206203f01a83398151915260001c6001600160a01b03166341af2f526040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200151057600080fd5b505af115801562001525573d6000803e3d6000fd5b5050505050505050505050505050565b6042546040805163054fd4d560e41b81529051620015d2926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa15801562001582573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620015ac919081019062005917565b60405180604001604052806007815260200166076312e302e32360cc1b8152506200430d565b6038546040805163054fd4d560e41b815290516200161f926001600160a01b0316916354fd4d509160048083019260009291908290030181865afa15801562001582573d6000803e3d6000fd5b565b6040516370a0823160e01b81526001600160a01b038085166004830152600091620016a191869186918216906370a0823190602401602060405180830381865afa15801562001674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169a9190620053e2565b8562002276565b949350505050565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd6833981519152906306447d5690602401600060405180830381600087803b1580156200170257600080fd5b505af115801562001717573d6000803e3d6000fd5b5050604080516101e081018252603f546001600160a01b0390811682528254811660208084019190915260435484516399623bb160e01b81528551662386f26fc10000985068878678326eac900000975060009686019492909216926399623bb1926004808401938290030181865afa15801562001799573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017bf91906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001821573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018479190620053e2565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec8000081526020016301e13380815260200162015180815260200160008152602001604360009054906101000a90046001600160a01b03166001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620018e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200190991906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200196b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200199191906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a1991906200595d565b6001600160a01b0390811682526000602080840182905260408051608081018252838152918201839052818101839052606082019290925292810192909252603f54603854925163095ea7b360e01b815293945081169263095ea7b39262001a8a921690600019906004016200587e565b6020604051808303816000875af115801562001aaa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ad09190620058ad565b5060005b603860009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001b28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b4e9190620053e2565b81101562001bf857604354603854604080516000815260208101918290526349f13de760e01b9091526001600160a01b03928316926349f13de79262001ba89261dead929091169087908a808961babe6024850162005a99565b6020604051808303816000875af115801562001bc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bee91906200595d565b5060010162001ad4565b50604354603854604080518082018252600a8152694879706572647269766560b01b60208083019190915282516000808252608082018552601e546001600160a01b0361010090910481168385019081526001848801528651928352938201865260608301919091529351632e7cd97160e01b815295841695632e7cd9719562001c9c9561dead959116939092899290918b918d91829161babe9060040162005b35565b6020604051808303816000875af115801562001cbc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ce291906200595d565b603680546001600160a01b0319166001600160a01b0392909216918217905560408051630c048d9160e31b8152905162001d7c92916360246c88916004808301926101e09291908290030181865afa15801562001d43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d69919062005bcd565b60c00151670de0b6b3a764000062004379565b603f5460408054905163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9262001db49291169086906004016200587e565b6020604051808303816000875af115801562001dd4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dfa9190620058ad565b5060365460408051630c048d9160e31b8152905162001f6c926001600160a01b0316916360246c88916004808301926101e09291908290030181865afa15801562001e49573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e6f919062005bcd565b60c0015162001f66604060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001ecb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ef19190620053e2565b6040805481516278744560e21b815291516001600160a01b03909116916301e1d1149160048083019260209291908290030181865afa15801562001f39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f5f9190620053e2565b90620042ed565b62004379565b505050565b6060601680548060200260200160405190810160405280929190818152602001828054801562001fcb57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001fac575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020016000905b828210156200211a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015620021025783829060005260206000200180546200206e90620052ed565b80601f01602080910402602001604051908101604052809291908181526020018280546200209c90620052ed565b8015620020ed5780601f10620020c157610100808354040283529160200191620020ed565b820191906000526020600020905b815481529060010190602001808311620020cf57829003601f168201915b5050505050815260200190600101906200204c565b50505050815250508152602001906001019062001ff9565b50505050905090565b604254604080516306fdde0360e01b81529051620021c3926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562002170573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200219a919081019062005917565b6040518060400160405280600a8152602001694879706572647269766560b01b8152506200430d565b603854604080516306fdde0360e01b815290516200161f926001600160a01b0316916306fdde039160048083019260009291908290030181865afa15801562002210573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200223a919081019062005917565b6040518060400160405280601d81526020017f487970657264726976654465706c6f796572436f6f7264696e61746f720000008152506200430d565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa158015620022c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022e89190620053e2565b9050808411156200230c5760405163188c93a560e31b815260040160405180910390fd5b6000805160206203f01a83398151915260001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200235a57600080fd5b505af11580156200236f573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03891660048201526000805160206203efd683398151915292506306447d569150602401600060405180830381600087803b158015620023c457600080fd5b505af1158015620023d9573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206203efd6833981519152925063c88a5e6d91506200241b908990670de0b6b3a7640000906004016200587e565b600060405180830381600087803b1580156200243657600080fd5b505af11580156200244b573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038816925063a9059cbb91506200247f90869088906004016200587e565b6020604051808303816000875af11580156200249f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024c59190620058ad565b509295945050505050565b6060601880548060200260200160405190810160405280929190818152602001828054801562001fcb576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001fac575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801562001fcb576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001fac575050505050905090565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd6833981519152906306447d5690602401600060405180830381600087803b158015620025ed57600080fd5b505af115801562002602573d6000803e3d6000fd5b5050603f5460408054905163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb9350620026479290911690674563918244f40000906004016200587e565b6020604051808303816000875af115801562002667573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200268d9190620058ad565b5060408054604254915163a9059cbb60e01b81526001600160a01b039182169263a9059cbb92620026ce92911690678ac7230489e80000906004016200587e565b6020604051808303816000875af1158015620026ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027149190620058ad565b50603f54601e546040516370a0823160e01b81526101009091046001600160a01b03908116600483015260009216906370a0823190602401602060405180830381865afa1580156200276a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027909190620053e2565b60425460408051636d551aff60e11b815290519293506000926001600160a01b039092169163a314453191671bc16d674ec8000091849163daaa35fe9160048083019260209291908290030181865afa158015620027f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028189190620053e2565b60408051606081018252601e5461010090046001600160a01b031681526001602080830191909152825160008152908101835281830152905160e085901b6001600160e01b0319168152620028739392919060040162005c8b565b6020604051808303816000875af115801562002893573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028b99190620053e2565b603f54601e546040516370a0823160e01b81526001600160a01b03610100909204821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562002911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029379190620053e2565b9050620029528162001f66856729a2241af62c000062005ccb565b62002966826729a2241af62c000062004379565b60425460408051636d551aff60e11b815290516001600160a01b039092169163a314453191671bc16d674ec8000091849163daaa35fe9160048083019260209291908290030181865afa158015620029c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029e89190620053e2565b60408051606081018252601e5461010090046001600160a01b031681526000602080830182905283519182528101835281830152905160e085901b6001600160e01b031916815262002a409392919060040162005c8b565b6020604051808303816000875af115801562002a60573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a869190620053e2565b60408054601e5491516370a0823160e01b81526101009092046001600160a01b03908116600484015292945062002b159216906370a0823190602401602060405180830381865afa15801562002ae0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b069190620053e2565b671bc16d674ec8000062004379565b62001f6c82671bc16d674ec8000062004379565b60008160405160200162002b3e919062005ce1565b60408051601f198184030181529082905280516020909101206318caf8e360e31b825291506000805160206203efd68339815191529063c657c7189062002b8c908490869060040162005cf6565b600060405180830381600087803b15801562002ba757600080fd5b505af115801562002bbc573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526000805160206203efd6833981519152925063c88a5e6d915062002c0090849069021e19e0c9bab2400000906004016200587e565b600060405180830381600087803b15801562002c1b57600080fd5b505af115801562002c30573d6000803e3d6000fd5b50505050919050565b604254604080516304baa00b60e01b8152905162002ce0926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562002c86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002cb0919081019062005917565b60405180604001604052806011815260200170455243343632364879706572647269766560781b8152506200430d565b603854604080516304baa00b60e01b815290516200161f926001600160a01b0316916304baa00b9160048083019260009291908290030181865afa15801562002d2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002d57919081019062005917565b6040518060600160405280602481526020016203eff6602491396200430d565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156200211a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562002e4857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162002e095790505b5050505050815250508152602001906001019062002d9b565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd6833981519152906306447d5690602401600060405180830381600087803b15801562002eba57600080fd5b505af115801562002ecf573d6000803e3d6000fd5b5050604080516101e081018252603f546001600160a01b0390811682528254811660208084019190915260435484516399623bb160e01b81528551662386f26fc10000985068878678326eac900000975060009686019492909216926399623bb1926004808401938290030181865afa15801562002f51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f7791906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002fd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fff9190620053e2565b8152602001670de0b6b3a7640000815260200166038d7ea4c680008152602001671bc16d674ec8000081526020016301e13380815260200162015180815260200160008152602001604360009054906101000a90046001600160a01b03166001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200309b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030c191906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200314991906200595d565b6001600160a01b03168152602001604360009054906101000a90046001600160a01b03166001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015620031ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620031d191906200595d565b6001600160a01b0390811682526000602080840182905260408051608081018252838152918201839052818101839052606082019290925292810192909252603f54603854925163095ea7b360e01b815293945081169263095ea7b39262003242921690600019906004016200587e565b6020604051808303816000875af115801562003262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620032889190620058ad565b5060005b603860009054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620032e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620033069190620053e2565b811015620033b457604354603854604080516000815260208101918290526349f13de760e01b9091526001600160a01b03928316926349f13de792620033649263deadbeef929091169087908a808963deadbabe6024850162005a99565b6020604051808303816000875af115801562003384573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620033aa91906200595d565b506001016200328c565b50604354603854604080518082018252600a8152694879706572647269766560b01b60208083019190915282516000808252608082018552601e546001600160a01b0361010090910481168385019081526001848801528651928352938201865260608301919091529351632e7cd97160e01b815295841695632e7cd971956200345c9563deadbeef959116939092899290918b918d91829163deadbabe9060040162005b35565b6020604051808303816000875af11580156200347c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034a291906200595d565b603680546001600160a01b0319166001600160a01b03928316908117909155601e54604051631b2b776160e11b81526000600482015261010090910490921660248301526200355691633656eec290604401602060405180830381865afa15801562003512573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035389190620053e2565b60808301516200354a90600262005d1c565b62001f66908562005d36565b603854603654601e5460808401516040805160008082526020820190925262001f6c956001600160a01b03908116958116946101009004169288928a9260019291620043b4565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156200211a578382906000526020600020018054620035e390620052ed565b80601f01602080910402602001604051908101604052809291908181526020018280546200361190620052ed565b8015620036625780601f10620036365761010080835404028352916020019162003662565b820191906000526020600020905b8154815290600101906020018083116200364457829003601f168201915b505050505081526020019060010190620035c1565b6060601c805480602002602001604051908101604052809291908181526020016000905b828210156200211a5760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200374857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620037095790505b505050505081525050815260200190600101906200369b565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd6833981519152906306447d5690602401600060405180830381600087803b158015620037ba57600080fd5b505af1158015620037cf573d6000803e3d6000fd5b5050603f5460408054905163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb9350620038149290911690674563918244f40000906004016200587e565b6020604051808303816000875af115801562003834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200385a9190620058ad565b506042546040805160608101825260008082526001602080840191909152835182815290810184528284015291516320a5557560e21b8152919283926001600160a01b039091169163829555d491620038c091670de0b6b3a76400009160040162005d4c565b60408051808303816000875af1158015620038df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003905919062005d67565b915091506200391d816714d1120d7b16000062004379565b620039318267094079cd1a42aaaa62004379565b6040805460425491516370a0823160e01b81526001600160a01b039283166004820152620039b992909116906370a0823190602401602060405180830381865afa15801562003984573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620039aa9190620053e2565b67094079cd1a42aaaa62004379565b60408054604254915163095ea7b360e01b81526001600160a01b039182169263095ea7b392620039f392911690600019906004016200587e565b6020604051808303816000875af115801562003a13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a399190620058ad565b5060425460408051606081018252600080825260208083018290528351918252810183528183015290516320a5557560e21b81526001600160a01b039092169163829555d49162003a98916729a2241af62c0000919060040162005d4c565b60408051808303816000875af115801562003ab7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003add919062005d67565b909250905062003af6816714d1120d7b16000062004379565b62003b0a826729a2241af62c000062004379565b6040805460425491516370a0823160e01b81526001600160a01b03928316600482015262003b9492909116906370a0823190602401602060405180830381865afa15801562003b5d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b839190620053e2565b6732e29de8106eaaaa600262004ad6565b5050565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156200211a57838290600052602060002001805462003bde90620052ed565b80601f016020809104026020016040519081016040528092919081815260200182805462003c0c90620052ed565b801562003c5d5780601f1062003c315761010080835404028352916020019162003c5d565b820191906000526020600020905b81548152906001019060200180831162003c3f57829003601f168201915b50505050508152602001906001019062003bbc565b60085460009060ff161562003c8b575060085460ff1690565b604051630667f9d760e41b81526000906000805160206203efd68339815191529063667f9d709062003cdc906000805160206203f01a833981519152906519985a5b195960d21b906004016200587e565b602060405180830381865afa15801562003cfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d209190620053e2565b1415905090565b6060601580548060200260200160405190810160405280929190818152602001828054801562001fcb576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162001fac575050505050905090565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201526000805160206203efd6833981519152906306447d5690602401600060405180830381600087803b15801562003de257600080fd5b505af115801562003df7573d6000803e3d6000fd5b5050603f5460408054905163a9059cbb60e01b81526001600160a01b03928316945063a9059cbb935062003e3c9290911690674563918244f40000906004016200587e565b6020604051808303816000875af115801562003e5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e829190620058ad565b5060408054604254915163a9059cbb60e01b81526001600160a01b039182169263a9059cbb9262003ec392911690678ac7230489e80000906004016200587e565b6020604051808303816000875af115801562003ee3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f099190620058ad565b50603f54601e546040516370a0823160e01b81526101009091046001600160a01b03908116600483015260009216906370a0823190602401602060405180830381865afa15801562003f5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f859190620053e2565b60425460408051636d551aff60e11b815290519293506000926001600160a01b039092169163a3144531918491849163daaa35fe9160048083019260209291908290030181865afa15801562003fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620040059190620053e2565b60408051606081018252601e5461010090046001600160a01b031681526001602080830191909152825160008152908101835281830152905160e085901b6001600160e01b0319168152620040609392919060040162005c8b565b6020604051808303816000875af115801562004080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620040a69190620053e2565b603f54601e546040516370a0823160e01b81526001600160a01b03610100909204821660048201529293506000929116906370a0823190602401602060405180830381865afa158015620040fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041249190620053e2565b905062004132818462004379565b6200413f82600062004379565b60425460408051636d551aff60e11b815290516001600160a01b039092169163a314453191600091849163daaa35fe9160048083019260209291908290030181865afa15801562004194573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041ba9190620053e2565b60408051606081018252601e5461010090046001600160a01b031681526000602080830182905283519182528101835281830152905160e085901b6001600160e01b0319168152620042129392919060040162005c8b565b6020604051808303816000875af115801562004232573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620042589190620053e2565b60408054601e5491516370a0823160e01b81526101009092046001600160a01b039081166004840152929450620042e09216906370a0823190602401602060405180830381865afa158015620042b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620042d89190620053e2565b600062004379565b62001f6c82600062004379565b60006200430483670de0b6b3a76400008462004b49565b90505b92915050565b60405163f320d96360e01b81526000805160206203efd68339815191529063f320d9639062004343908590859060040162005d8c565b60006040518083038186803b1580156200435c57600080fd5b505afa15801562004371573d6000803e3d6000fd5b505050505050565b60405163260a5b1560e21b815260048101839052602481018290526000805160206203efd6833981519152906398296c549060440162004343565b60006000805160206203f01a83398151915260001c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af115801562004409573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004433919081019062005ddc565b9050600062004463827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed23446562004b68565b9050620044738151600162004379565b620044dd816000815181106200448d576200448d620053fc565b602002602001015160000151600081518110620044ae57620044ae620053fc565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed23446562004c8b565b6200453381600081518110620044f757620044f7620053fc565b602002602001015160000151600181518110620045185762004518620053fc565b602002602001015160001c8c6001600160a01b031662004379565b600080600080846000815181106200454f576200454f620053fc565b60200260200101516020015180602001905181019062004570919062005fcd565b935093509350935062004584848f62004cc6565b620045f8838f6001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620045c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620045f2919081019062005917565b6200430d565b60008e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200463a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004660919062006163565b83518151919250620046729162004cc6565b620046868360200151826020015162004cc6565b6200469a8360400151826040015162004cc6565b620046ae8360600151826060015162004c8b565b620046c283608001518260a0015162004379565b620046d68360a001518260c0015162004379565b620046eb8360e0015182610100015162004379565b6200470183610100015182610120015162004379565b6200471783610120015182610140015162004379565b6200472d83610140015182610160015162004cc6565b6200474383610160015182610180015162004cc6565b6101c0830151516101e0820151516200475d919062004379565b6200477b836101c0015160200151826101e001516020015162004379565b62004799836101c0015160400151826101e001516040015162004379565b620047b7836101c0015160600151826101e001516060015162004379565b6200481382604051602001620047ce919062005ce1565b604051602081830303815290604052805190602001208a604051602001620047f7919062005ce1565b6040516020818303038152906040528051906020012062004c8b565b505050505050600062004847827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af362004b68565b9050620048578151600162004379565b620048c181600081518110620048715762004871620053fc565b602002602001015160000151600081518110620048925762004892620053fc565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af362004c8b565b6200490e81600081518110620048db57620048db620053fc565b602002602001015160000151600181518110620048fc57620048fc620053fc565b602002602001015160001c8a62004cc6565b60008a9050600080600080600086600081518110620049315762004931620053fc565b60200260200101516020015180602001905181019062004952919062006276565b9398509196509450925090508d8c1562004a075762004a0186620049788e600262005d1c565b620049ee8a6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa158015620049bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620049e2919062006163565b608001518590620042ed565b620049fa919062005d36565b8c62004ad6565b62004a25565b62004a258662004a198e600262005d1c565b620049fa908462005d36565b62004a31858262004379565b62004aaa84886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562004a76573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a9c919062006163565b60800151620186a062004ad6565b62004ab6838e62004d0a565b62004ac2828f62004379565b505050505050505050505050505050505050565b604051630b6903e360e11b81526004810184905260248101839052604481018290526000805160206203efd6833981519152906316d207c69060640160006040518083038186803b15801562004b2b57600080fd5b505afa15801562004b40573d6000803e3d6000fd5b50505050505050565b600082600019048411830215820262004b6157600080fd5b5091020490565b60606000835167ffffffffffffffff81111562004b895762004b8962005055565b60405190808252806020026020018201604052801562004bd857816020015b6040805160608082018352808252602082015260009181019190915281526020019060019003908162004ba85790505b50915060005b845181101562004c82578385828151811062004bfe5762004bfe620053fc565b60200260200101516000015160008151811062004c1f5762004c1f620053fc565b60200260200101510362004c795784818151811062004c425762004c42620053fc565b602002602001015183838062004c5890620062c2565b94508151811062004c6d5762004c6d620053fc565b60200260200101819052505b60010162004bde565b50815292915050565b604051637c84c69b60e01b815260048101839052602481018290526000805160206203efd683398151915290637c84c69b9060440162004343565b6040516328a9b0fb60e11b81526001600160a01b038084166004830152821660248201526000805160206203efd68339815191529063515361f69060440162004343565b60405163f7fe347760e01b8152821515600482015281151560248201526000805160206203efd68339815191529063f7fe34779060440162004343565b61302380620062df83390190565b6118f4806200930283390190565b61412c806200abf683390190565b6121f3806200ed2283390190565b6143cc8062010f1583390190565b6145ec80620152e183390190565b61489380620198cd83390190565b61482b806201e16083390190565b6139f1806202298b83390190565b612bc6806202637c83390190565b613ebf8062028f4283390190565b6140df806202ce0183390190565b6143868062030ee083390190565b61431e806203526683390190565b6134e4806203958483390190565b61256e806203ca6883390190565b6001600160a01b038116811462004e3d57600080fd5b50565b60008060006060848603121562004e5657600080fd5b833562004e638162004e27565b9250602084013562004e758162004e27565b9150604084013562004e878162004e27565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b8181101562004ed55783516001600160a01b03168352928401929184019160010162004eae565b50909695505050505050565b60005b8381101562004efe57818101518382015260200162004ee4565b50506000910152565b6000815180845262004f2181602086016020860162004ee1565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b8581101562004feb57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b8181101562004fd457605f1989850301835262004fc184865162004f07565b948e01949350918d019160010162004fa2565b505050978a01979450509188019160010162004f5c565b50919a9950505050505050505050565b600080600080608085870312156200501257600080fd5b84356200501f8162004e27565b93506020850135620050318162004e27565b92506040850135915060608501356200504a8162004e27565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171562005092576200509262005055565b60405290565b6040516060810167ffffffffffffffff8111828210171562005092576200509262005055565b604051610200810167ffffffffffffffff8111828210171562005092576200509262005055565b604051601f8201601f1916810167ffffffffffffffff8111828210171562005111576200511162005055565b604052919050565b600067ffffffffffffffff82111562005136576200513662005055565b50601f01601f191660200190565b6000602082840312156200515757600080fd5b813567ffffffffffffffff8111156200516f57600080fd5b8201601f810184136200518157600080fd5b803562005198620051928262005119565b620050e5565b818152856020838501011115620051ae57600080fd5b81602084016020830137600091810160200191909152949350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b848110156200527657898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015620052605783516001600160e01b0319168252928b019260019290920191908b019062005234565b50978a01979550505091870191600101620051f6565b50919998505050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015620052e057603f19888603018452620052cd85835162004f07565b94509285019290850190600101620052ae565b5092979650505050505050565b600181811c908216806200530257607f821691505b6020821081036200532357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020808352600084548160018260011c915060018316806200534e57607f831692505b6020831081036200536d57634e487b7160e01b85526022600452602485fd5b60208801839052604088018180156200538f5760018114620053a657620053d3565b60ff198616825284151560051b82019650620053d3565b60008b81526020902060005b86811015620053cd57815484820152908501908901620053b2565b83019750505b50949998505050505050505050565b600060208284031215620053f557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b838110156200544e5781516001600160a01b03168752958201959082019060010162005427565b509495945050505050565b60408152620054746040820183516001600160a01b03169052565b600060208301516200549160608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161038060a08401819052620054c46103c085018362005412565b91506080850151620054e160c08601826001600160a01b03169052565b5060a08501516001600160a01b03811660e08601525060c085015161010062005514818701836001600160a01b03169052565b60e087015161012087810191909152908701516101408088019190915290870151610160808801919091529087015161018080880191909152908701516101a080880191909152908701516101c080880191909152908701516101e080880191909152908701516102008088019190915290870151610220808801919091529087015161024080880191909152908701516102608088019190915290870151915061028090620055e782880184805182526020810151602083015260408101516040830152606081015160608301525050565b87015180516103008801526020808201516103208901526040808301516103408a0152606090920151610360890152918801516001600160a01b0316938701939093526102a08701516103a087015285840381870152601184527048797065726472697665466163746f727960781b90840152508101620016a1565b6000610100808352620056798184018c62004f07565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b80516001600160a01b031682526020810151620056eb60208401826001600160a01b03169052565b5060408101516200570760408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201518184015250610160808201516200577a828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e0808201518051828501526020810151610200850152604081015161022085015260608101516102408501525b50505050565b6102808101620057f68285620056c3565b6001600160a01b03929092166102609190910152919050565b6000610340808352620058258184018c62004f07565b91505062005837602083018a620056c3565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e084015284166103008301529092166103209092019190915292915050565b6001600160a01b03929092168252602082015260400190565b80518015158114620058a857600080fd5b919050565b600060208284031215620058c057600080fd5b620043048262005897565b600082601f830112620058dd57600080fd5b8151620058ee620051928262005119565b8181528460208386010111156200590457600080fd5b620016a182602083016020870162004ee1565b6000602082840312156200592a57600080fd5b815167ffffffffffffffff8111156200594257600080fd5b620016a184828501620058cb565b8051620058a88162004e27565b6000602082840312156200597057600080fd5b81516200597d8162004e27565b9392505050565b80516001600160a01b031682526020810151620059ac60208401826001600160a01b03169052565b506040810151620059c860408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015162005a2f828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c08082015180518285015260208101516101e085015260408101516102008501526060810151610220850152620057df565b8881526001600160a01b0388166020820152600061032062005abf604084018a62005984565b8061028084015262005ad48184018962004f07565b915050856102a0830152846102c0830152836102e0830152826103008301529998505050505050505050565b60018060a01b0381511682526020810151151560208301526000604082015160606040850152620016a1606085018262004f07565b8a81526001600160a01b038a1660208201526103606040820181905260009062005b628382018c62004f07565b905062005b73606084018b62005984565b8281036102a084015262005b88818a62004f07565b9050876102c0840152866102e08401528561030084015282810361032084015262005bb4818662005b00565b915050826103408301529b9a5050505050505050505050565b60006101e0828403121562005be157600080fd5b62005beb6200506b565b825181526020808401519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c0928301519281019290925250919050565b83815282602082015260606040820152600062005cac606083018462005b00565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111562004307576200430762005cb5565b60208152600062004304602083018462004f07565b6001600160a01b0383168152604060208201819052600090620016a19083018462004f07565b808202811582820484141762004307576200430762005cb5565b8181038181111562004307576200430762005cb5565b828152604060208201526000620016a1604083018462005b00565b6000806040838503121562005d7b57600080fd5b505080516020909101519092909150565b60408152600062005da1604083018562004f07565b828103602084015262005cac818562004f07565b600067ffffffffffffffff82111562005dd25762005dd262005055565b5060051b60200190565b6000602080838503121562005df057600080fd5b825167ffffffffffffffff8082111562005e0957600080fd5b818501915085601f83011262005e1e57600080fd5b815162005e2f620051928262005db5565b81815260059190911b8301840190848101908883111562005e4f57600080fd5b8585015b8381101562005f565780518581111562005e6c57600080fd5b86016060818c03601f1901121562005e8357600080fd5b62005e8d62005098565b888201518781111562005e9f57600080fd5b8201603f81018d1362005eb157600080fd5b8981015162005ec4620051928262005db5565b81815260059190911b8201604001908b8101908f83111562005ee557600080fd5b6040840193505b8284101562005f075783518252928c0192908c019062005eec565b845250505060408201518781111562005f1f57600080fd5b62005f2f8d8b83860101620058cb565b8a8301525062005f426060830162005950565b604082015284525091860191860162005e53565b5098975050505050505050565b60006080828403121562005f7657600080fd5b6040516080810181811067ffffffffffffffff8211171562005f9c5762005f9c62005055565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000806000808486036102a081121562005fe657600080fd5b855162005ff38162004e27565b602087015190955067ffffffffffffffff808211156200601257600080fd5b6200602089838a01620058cb565b9550610240603f19840112156200603657600080fd5b620060406200506b565b9250620060506040890162005950565b8352620060606060890162005950565b6020840152620060736080890162005950565b604084015260a0880151606084015260c0880151608084015260e088015160a084015261010091508188015160c08401526101208089015160e0850152610140808a0151848601526101609350838a0151828601526101809150620060da828b0162005950565b908501526101a0620060ee8a820162005950565b848601526101c0935062006104848b0162005950565b82860152620061176101e08b0162005950565b90850152506200612c896102008a0162005f63565b83830152610280880151929450808311156200614757600080fd5b50506200615787828801620058cb565b91505092959194509250565b600061026082840312156200617757600080fd5b62006181620050be565b6200618c8362005950565b81526200619c6020840162005950565b6020820152620061af6040840162005950565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101606200621a81850162005950565b908201526101806200622e84820162005950565b908201526101a06200624284820162005950565b908201526101c06200625684820162005950565b908201526101e06200626b8585830162005f63565b908201529392505050565b600080600080600060a086880312156200628f57600080fd5b855194506020860151935060408601519250620062af6060870162005897565b9150608086015190509295509295909350565b600060018201620062d757620062d762005cb5565b506001019056fe6101206040523480156200001257600080fd5b506040516200302338038062003023833981016040819052620000359162000317565b823081818a8a8a8181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a39190620003da565b6000620000b1848262000497565b506001620000c0838262000497565b5060ff81166080524660a052620000d66200019a565b60c0525050506001600160a01b0392831660e0525050600680548483166001600160a01b0319918216811790925560078054938516939091169290921790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a3505050600c9490945542600d5590151561010052600e5550620005e19350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001ce919062000563565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03811681146200024c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200027757600080fd5b81516001600160401b03808211156200029457620002946200024f565b604051601f8301601f19908116603f01168101908282118183101715620002bf57620002bf6200024f565b8160405283815260209250866020858801011115620002dd57600080fd5b600091505b83821015620003015785820183015181830184015290820190620002e2565b6000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156200033357600080fd5b8751620003408162000236565b60208901519097506001600160401b03808211156200035e57600080fd5b6200036c8b838c0162000265565b975060408a01519150808211156200038357600080fd5b50620003928a828b0162000265565b955050606088015193506080880151620003ac8162000236565b60a08901519093508015158114620003c357600080fd5b8092505060c0880151905092959891949750929550565b600060208284031215620003ed57600080fd5b815160ff81168114620003ff57600080fd5b9392505050565b600181811c908216806200041b57607f821691505b6020821081036200043c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000492576000816000526020600020601f850160051c810160208610156200046d5750805b601f850160051c820191505b818110156200048e5782815560010162000479565b5050505b505050565b81516001600160401b03811115620004b357620004b36200024f565b620004cb81620004c4845462000406565b8462000442565b602080601f831160018114620005035760008415620004ea5750858301515b600019600386901b1c1916600185901b1785556200048e565b600085815260208120601f198616915b82811015620005345788860151825594840194600190910190840162000513565b5085821015620005535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620005738162000406565b600182811680156200058e5760018114620005a457620005d5565b60ff1984168752821515830287019450620005d5565b8760005260208060002060005b85811015620005cc5781548a820152908401908201620005b1565b50505082870194505b50929695505050505050565b60805160a05160c05160e05161010051612978620006ab600039600081816105d80152818161093601528181610a7d01528181610d1f01528181610dda01528181610f31015281816113c801526114b20152600081816104d7015281816108b201528181610e9b01528181610f8901528181611328015281816114200152818161157301528181611b3c01528181611ccb01528181611ee501528181611f7d015281816120cf015261221101526000610db601526000610d860152600061048301526129786000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80637a8c63b5116101d3578063ba08765211610104578063d905777e116100a2578063ea7ca2761161007c578063ea7ca27614610815578063ed0d0efb1461084c578063ef8b30f71461086c578063f2fde38b1461087f57600080fd5b8063d905777e1461078b578063dd62ed3e146107b4578063e688747b146107df57600080fd5b8063c63d75b6116100de578063c63d75b614610511578063c6e6f59214610752578063ce96cb7714610765578063d505accf1461077857600080fd5b8063ba08765214610703578063bf7e214f14610716578063c53a39851461072957600080fd5b80639dc29fac11610171578063aed307771161014b578063aed30777146106a7578063b3d7f6b9146106ca578063b460af94146106dd578063b7009613146106f057600080fd5b80639dc29fac1461066e578063a0712d6814610681578063a9059cbb1461069457600080fd5b80638da5cb5b116101ad5780638da5cb5b1461062d578063946058571461064057806394bf804d1461065357806395d89b411461066657600080fd5b80637a8c63b5146105d35780637a9e5e4b146105fa5780637ecebe001461060d57600080fd5b8063313ce567116102ad5780634b5159da1161024b57806367aff4841161022557806367aff4841461057a5780636e553f651461058d57806370a08231146105a0578063728b952b146105c057600080fd5b80634b5159da1461054c5780634cdad5061461055f578063679aefce1461057257600080fd5b806338d52e0f1161028757806338d52e0f146104d2578063402d267d1461051157806340c10f191461052657806342966c681461053957600080fd5b8063313ce5671461047e57806334fcf437146104b75780633644e515146104ca57600080fd5b8063095ea7b31161031a5780630ea9b75b116102f45780630ea9b75b1461044657806318160ddd14610459578063239c70ae1461046257806323b872dd1461046b57600080fd5b8063095ea7b3146103ed5780630a28a477146104105780630bade8a41461042357600080fd5b806301e1d1141461036257806305f05a941461037d57806306a36aee1461039257806306fdde03146103b257806307a2d13a146103c7578063088a4ed0146103da575b600080fd5b61036a610892565b6040519081526020015b60405180910390f35b61039061038b3660046123a8565b610934565b005b61036a6103a03660046123e1565b60096020526000908152604090205481565b6103ba6109c0565b60405161037491906123fe565b61036a6103d536600461244d565b610a4e565b6103906103e836600461244d565b610a7b565b6104006103fb366004612466565b610ad8565b6040519015158152602001610374565b61036a61041e36600461244d565b610b45565b6104006104313660046124af565b600a6020526000908152604090205460ff1681565b6103906104543660046124db565b610b65565b61036a60025481565b61036a600e5481565b610400610479366004612522565b610c3d565b6104a57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610374565b6103906104c536600461244d565b610d1d565b61036a610d82565b6104f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610374565b61036a61051f3660046123e1565b5060001990565b610390610534366004612466565b610dd8565b61039061054736600461244d565b610f2f565b61039061055a366004612563565b61101c565b61036a61056d36600461244d565b6110ae565b600c5461036a565b61039061058836600461257f565b6110b9565b61036a61059b3660046125ad565b611181565b61036a6105ae3660046123e1565b60036020526000908152604090205481565b6103906105ce3660046125d2565b611195565b6104007f000000000000000000000000000000000000000000000000000000000000000081565b6103906106083660046123e1565b61121e565b61036a61061b3660046123e1565b60056020526000908152604090205481565b6006546104f9906001600160a01b031681565b61036a61064e36600461244d565b611308565b61036a6106613660046125ad565b6113a5565b6103ba6113b9565b61039061067c366004612466565b6113c6565b61039061068f36600461244d565b6114b0565b6104006106a2366004612466565b611603565b6104006106b53660046123e1565b600f6020526000908152604090205460ff1681565b61036a6106d836600461244d565b611669565b61036a6106eb366004612600565b611688565b6104006106fe366004612637565b6116a5565b61036a610711366004612600565b6117a3565b6007546104f9906001600160a01b031681565b6104f96107373660046123e1565b6008602052600090815260409020546001600160a01b031681565b61036a61076036600461244d565b6117b8565b61036a6107733660046123e1565b6117d8565b61039061078636600461267e565b6117fa565b61036a6107993660046123e1565b6001600160a01b031660009081526003602052604090205490565b61036a6107c23660046125d2565b600460209081526000928352604080842090915290825290205481565b6104006107ed3660046126ec565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b61040061082336600461271f565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b61036a61085a3660046124af565b600b6020526000908152604090205481565b61036a61087a36600461244d565b611a3e565b61039061088d3660046123e1565b611a49565b600061089d42611ac7565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061274b565b61092f919061277a565b905090565b7f00000000000000000000000000000000000000000000000000000000000000001561099557610970336000356001600160e01b031916611bb5565b6109955760405162461bcd60e51b815260040161098c9061278d565b60405180910390fd5b6001600160a01b03919091166000908152600f60205260409020805460ff1916911515919091179055565b600080546109cd906127c4565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906127c4565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b6002546000908015610a7257610a6d610a65610892565b849083611c5e565b610a74565b825b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610ad357610ab7336000356001600160e01b031916611bb5565b610ad35760405162461bcd60e51b815260040161098c9061278d565b600e55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b339086815260200190565b60405180910390a35060015b92915050565b6002546000908015610a7257610a6d81610b5d610892565b859190611c7c565b610b7b336000356001600160e01b031916611bb5565b610b975760405162461bcd60e51b815260040161098c906127fe565b8015610bc7576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610bee565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610c30911515815260200190565b60405180910390a3505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c9957610c748382612824565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610cc1908490612824565b90915550506001600160a01b038085166000818152600360205260409081902080548701905551909187169060008051602061292383398151915290610d0a9087815260200190565b60405180910390a3506001949350505050565b7f000000000000000000000000000000000000000000000000000000000000000015610d7557610d59336000356001600160e01b031916611bb5565b610d755760405162461bcd60e51b815260040161098c9061278d565b610d7d611ca2565b600c55565b60007f00000000000000000000000000000000000000000000000000000000000000004614610db35761092f611d37565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610e3057610e14336000356001600160e01b031916611bb5565b610e305760405162461bcd60e51b815260040161098c9061278d565b336000908152600f602052604090205460ff16610e9957600e54811115610e995760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161098c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68610ed183610a4e565b6040518263ffffffff1660e01b8152600401610eef91815260200190565b600060405180830381600087803b158015610f0957600080fd5b505af1158015610f1d573d6000803e3d6000fd5b50505050610f2b8282611dd1565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610f8757610f6b336000356001600160e01b031916611bb5565b610f875760405162461bcd60e51b815260040161098c9061278d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68610fbf83610a4e565b6040518263ffffffff1660e01b8152600401610fdd91815260200190565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505050506110193382611e2b565b50565b611032336000356001600160e01b031916611bb5565b61104e5760405162461bcd60e51b815260040161098c906127fe565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b6000610b3f82610a4e565b6110cf336000356001600160e01b031916611bb5565b6110eb5760405162461bcd60e51b815260040161098c906127fe565b801561111a576001600160a01b03831660009081526009602052604090208054600160ff85161b179055611140565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610c30911515815260200190565b600061118b611ca2565b610a748383611e8d565b6111ab336000356001600160e01b031916611bb5565b6111c75760405162461bcd60e51b815260040161098c906127fe565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b03163314806112b3575060075460405163b700961360e01b81526001600160a01b039091169063b70096139061127290339030906001600160e01b03196000351690600401612837565b602060405180830381865afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190612864565b6112bc57600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b600061131382611ac7565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b919061274b565b610b3f919061277a565b60006113af611ca2565b610a748383611f63565b600180546109cd906127c4565b7f00000000000000000000000000000000000000000000000000000000000000001561141e57611402336000356001600160e01b031916611bb5565b61141e5760405162461bcd60e51b815260040161098c9061278d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c6861145683610a4e565b6040518263ffffffff1660e01b815260040161147491815260200190565b600060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b50505050610f2b8282611e2b565b7f000000000000000000000000000000000000000000000000000000000000000015611508576114ec336000356001600160e01b031916611bb5565b6115085760405162461bcd60e51b815260040161098c9061278d565b336000908152600f602052604090205460ff1661157157600e548111156115715760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161098c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d686115a983610a4e565b6040518263ffffffff1660e01b81526004016115c791815260200190565b600060405180830381600087803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b505050506110193382611dd1565b33600090815260036020526040812080548391908390611624908490612824565b90915550506001600160a01b0383166000818152600360205260409081902080548501905551339060008051602061292383398151915290610b339086815260200190565b6002546000908015610a7257610a6d611680610892565b849083611c7c565b6000611692611ca2565b61169d848484611ff2565b949350505050565b6001600160a01b0380831660009081526008602052604081205490911680156117415760405163b700961360e01b81526001600160a01b0382169063b7009613906116f890889088908890600401612837565b602060405180830381865afa158015611715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117399190612864565b915050610a74565b6001600160e01b031983166000908152600a602052604090205460ff168061179a57506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b60006117ad611ca2565b61169d8484846120f6565b6002546000908015610a7257610a6d816117d0610892565b859190611c5e565b6001600160a01b038116600090815260036020526040812054610b3f90610a4e565b4284101561184a5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161098c565b60006001611856610d82565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611962573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119985750876001600160a01b0316816001600160a01b0316145b6119d55760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161098c565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000610b3f826117b8565b611a5f336000356001600160e01b031916611bb5565b611a7b5760405162461bcd60e51b815260040161098c906127fe565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6000600c54600003611adb57506000919050565b600d54821015611aed57506000919050565b6000611b0b6301e13380600d5485611b059190612824565b90612238565b9050600061169d611b2783600c5461224d90919063ffffffff16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf919061274b565b9061224d565b6007546000906001600160a01b03168015801590611c3f575060405163b700961360e01b81526001600160a01b0382169063b700961390611bfe90879030908890600401612837565b602060405180830381865afa158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f9190612864565b8061169d57506006546001600160a01b03858116911614949350505050565b6000826000190484118302158202611c7557600080fd5b5091020490565b6000826000190484118302158202611c9357600080fd5b50910281810615159190040190565b6000611cad42611ac7565b90508015611d305760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050505b5042600d55565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611d699190612881565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254611de3919061277a565b90915550506001600160a01b03821660008181526003602090815260408083208054860190555184815260008051602061292383398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611e53908490612824565b90915550506002805482900390556040518181526000906001600160a01b0384169060008051602061292383398151915290602001611e1f565b6000611e9883611a3e565b905080600003611ed85760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b604482015260640161098c565b611f0d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612262565b611f178282611dd1565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3610b3f565b6000611f6e83611669565b9050611fa56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612262565b611faf8284611dd1565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101611f56565b6000611ffd84610b45565b9050336001600160a01b0383161461206d576001600160a01b0382166000908152600460209081526040808320338452909152902054600019811461206b576120468282612824565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6120778282611e2b565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a746001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866122fe565b6000336001600160a01b03831614612166576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146121645761213f8582612824565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b61216f846110ae565b9050806000036121af5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b604482015260640161098c565b6121b98285611e2b565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a746001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836122fe565b6000610a7483670de0b6b3a764000084611c5e565b6000610a748383670de0b6b3a7640000611c5e565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b03841660248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806122f75760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161098c565b5050505050565b600060405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061237f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161098c565b50505050565b6001600160a01b038116811461101957600080fd5b801515811461101957600080fd5b600080604083850312156123bb57600080fd5b82356123c681612385565b915060208301356123d68161239a565b809150509250929050565b6000602082840312156123f357600080fd5b8135610a7481612385565b60006020808352835180602085015260005b8181101561242c57858101830151858201604001528201612410565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561245f57600080fd5b5035919050565b6000806040838503121561247957600080fd5b823561248481612385565b946020939093013593505050565b80356001600160e01b0319811681146124aa57600080fd5b919050565b6000602082840312156124c157600080fd5b610a7482612492565b803560ff811681146124aa57600080fd5b6000806000606084860312156124f057600080fd5b6124f9846124ca565b925061250760208501612492565b915060408401356125178161239a565b809150509250925092565b60008060006060848603121561253757600080fd5b833561254281612385565b9250602084013561255281612385565b929592945050506040919091013590565b6000806040838503121561257657600080fd5b6123c683612492565b60008060006060848603121561259457600080fd5b833561259f81612385565b9250612507602085016124ca565b600080604083850312156125c057600080fd5b8235915060208301356123d681612385565b600080604083850312156125e557600080fd5b82356125f081612385565b915060208301356123d681612385565b60008060006060848603121561261557600080fd5b83359250602084013561262781612385565b9150604084013561251781612385565b60008060006060848603121561264c57600080fd5b833561265781612385565b9250602084013561266781612385565b915061267560408501612492565b90509250925092565b600080600080600080600060e0888a03121561269957600080fd5b87356126a481612385565b965060208801356126b481612385565b955060408801359450606088013593506126d0608089016124ca565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156126ff57600080fd5b612708836124ca565b915061271660208401612492565b90509250929050565b6000806040838503121561273257600080fd5b823561273d81612385565b9150612716602084016124ca565b60006020828403121561275d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3f57610b3f612764565b6020808252601b908201527f4d6f636b455243343632363a206e6f7420617574686f72697a65640000000000604082015260600190565b600181811c908216806127d857607f821691505b6020821081036127f857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b81810381811115610b3f57610b3f612764565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561287657600080fd5b8151610a748161239a565b60008083548160018260011c9150600183168061289f57607f831692505b602080841082036128be57634e487b7160e01b86526022600452602486fd5b8180156128d257600181146128e757612914565b60ff1986168952841515850289019650612914565b60008a81526020902060005b8681101561290c5781548b8201529085019083016128f3565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220de4996326d3ea61d369a95e318e63e4ec00a10fe916daf21b7716ed8c2865b8464736f6c634300081600336080604052600180546001600160a01b0319168117815560025534801561002557600080fd5b506040516118f43803806118f48339810160408190526100449161006d565b600061005082826101c1565b5050610280565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561008057600080fd5b82516001600160401b038082111561009757600080fd5b818501915085601f8301126100ab57600080fd5b8151818111156100bd576100bd610057565b604051601f8201601f19908116603f011681019083821181831017156100e5576100e5610057565b8160405282815288868487010111156100fd57600080fd5b600093505b8284101561011f5784840186015181850187015292850192610102565b600086848301015280965050505050505092915050565b600181811c9082168061014a57607f821691505b60208210810361016a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101bc576000816000526020600020601f850160051c810160208610156101995750805b601f850160051c820191505b818110156101b8578281556001016101a5565b5050505b505050565b81516001600160401b038111156101da576101da610057565b6101ee816101e88454610136565b84610170565b602080601f831160018114610223576000841561020b5750858301515b600019600386901b1c1916600185901b1785556101b8565b600085815260208120601f198616915b8281101561025257888601518255948401946001909101908401610233565b50858210156102705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6116658061028f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80630ecaea731161005b5780630ecaea73146100ff57806354fd4d5014610112578063600eb4ba14610138578063d13053bb1461016e57600080fd5b806304baa00b1461008257806306fdde03146100cc5780630710fd58146100d4575b600080fd5b6100b6604051806040016040528060158152602001744552433230466f72776172646572466163746f727960581b81525081565b6040516100c391906103fe565b60405180910390f35b6100b6610184565b6100e76100e236600461044d565b610212565b6040516001600160a01b0390911681526020016100c3565b6100e761010d36600461044d565b6102e7565b6100b660405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014f6001546002546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100c3565b6101766103c4565b6040519081526020016100c3565b6000805461019190610485565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610485565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b505050505081565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610264906103f1565b6020820181038252601f19601f82011660405250805190602001206040516020016102c694939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6002819055600180546001600160a01b0319166001600160a01b0384169081179091556040805160208101929092528101829052600090819060600160405160208183030381529060405280519060200120905060008160405161034a906103f1565b8190604051809103906000f590508015801561036a573d6000803e3d6000fd5b5090506103778585610212565b6001600160a01b0316816001600160a01b0316146103a75760405162e0775560e61b815260040160405180910390fd5b600180546001600160a01b03191681178155600255949350505050565b6040516103d3602082016103f1565b6020820181038252601f19601f820116604052508051906020012081565b611170806104c083390190565b60006020808352835180602085015260005b8181101561042c57858101830151858201604001528201610410565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561046057600080fd5b82356001600160a01b038116811461047757600080fd5b946020939093013593505050565b600181811c9082168061049957607f821691505b6020821081036104b957634e487b7160e01b600052602260045260246000fd5b5091905056fe60c060405234801561001057600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa15801561004b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061006f9190610084565b60a0526001600160a01b0316608052506100be565b6000806040838503121561009757600080fd5b82516001600160a01b03811681146100ae57600080fd5b6020939093015192949293505050565b60805160a05161100861016860003960008181610183015281816102f5015281816103a9015281816104a70152818161055201528181610664015281816107190152818161078801528181610a4d0152610bf50152600081816102ad0152818161031e015281816103ef015281816104d0015281816105a00152818161069d01528181610742015281816107d801528181610a8a01528181610b6b0152610c3301526110086000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806354fd4d50116100a2578063a9059cbb11610071578063a9059cbb14610265578063d505accf14610278578063dd62ed3e1461028d578063f698da25146102a0578063fc0c546a146102a857600080fd5b806354fd4d501461020457806370a082311461022a5780637ecebe001461023d57806395d89b411461025d57600080fd5b806318160ddd116100de57806318160ddd146101b357806323b872dd146101bb57806330adf81f146101ce578063313ce567146101f557600080fd5b806304baa00b1461011057806306fdde0314610153578063095ea7b31461015b57806317d70f7c1461017e575b600080fd5b61013d6040518060400160405280600e81526020016d22a92199182337b93bb0b93232b960911b81525081565b60405161014a9190610d57565b60405180910390f35b61013d6102e7565b61016e610169366004610da6565b61039a565b604051901515815260200161014a565b6101a57f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b6101a5610498565b61016e6101c9366004610dd0565b610543565b6101a57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161014a565b61013d60405180604001604052806007815260200166076312e302e32360cc1b81525081565b6101a5610238366004610e0c565b610655565b6101a561024b366004610e0c565b60006020819052908152604090205481565b61013d61070a565b61016e610273366004610da6565b610779565b61028b610286366004610e2e565b610873565b005b6101a561029b366004610ea1565b610b41565b6101a5610ca5565b6102cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014a565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103959190810190610eea565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610f97565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161064391815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f97565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610350565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610486565b834211156108945760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108bb5760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038716600090815260208190526040812054906108dd610ca5565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810184905260c0810188905260e0016040516020818303038152906040528051906020012060405160200161097692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156109e1573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b031614610a1f57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610b2d91815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190610fb0565b15610be65750600019610492565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190610f97565b9050610492565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60005b83811015610d4e578181015183820152602001610d36565b50506000910152565b6020815260008251806020840152610d76816040850160208701610d33565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610da157600080fd5b919050565b60008060408385031215610db957600080fd5b610dc283610d8a565b946020939093013593505050565b600080600060608486031215610de557600080fd5b610dee84610d8a565b9250610dfc60208501610d8a565b9150604084013590509250925092565b600060208284031215610e1e57600080fd5b610e2782610d8a565b9392505050565b600080600080600080600060e0888a031215610e4957600080fd5b610e5288610d8a565b9650610e6060208901610d8a565b95506040880135945060608801359350608088013560ff81168114610e8457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610eb457600080fd5b610ebd83610d8a565b9150610ecb60208401610d8a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610efc57600080fd5b815167ffffffffffffffff80821115610f1457600080fd5b818401915084601f830112610f2857600080fd5b815181811115610f3a57610f3a610ed4565b604051601f8201601f19908116603f01168101908382118183101715610f6257610f62610ed4565b81604052828152876020848701011115610f7b57600080fd5b610f8c836020830160208801610d33565b979650505050505050565b600060208284031215610fa957600080fd5b5051919050565b600060208284031215610fc257600080fd5b81518015158114610e2757600080fdfea264697066735822122072a960899472dac0f2fddb5c3e56ae5a33dcff02ecd676b675f837d812d3bbc764736f6c63430008160033a2646970667358221220f2d0dad96e859d242e1fd4ebd3c068a4fccde9f747b0157d8c35249a02a1a06464736f6c63430008160033608060405260026001553480156200001657600080fd5b506040516200412c3803806200412c833981016040819052620000399162000708565b60006200004782826200096d565b508160e0015182610100015110806200007557508160e0015182610100015162000072919062000a39565b15155b156200009457604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c757508160e00151826101200151620000c4919062000a39565b15155b15620000e65760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011957508160e0015182610140015162000116919062000a39565b15155b156200013857604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016b57508160e0015182610160015162000168919062000a39565b15155b156200018a5760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bf5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fd576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e082015160125561022082015161020083015111156200023b576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a764000010806200027a5750670de0b6b3a764000082610260015160200151115b80620002965750670de0b6b3a764000082610260015160400151115b80620002b25750670de0b6b3a764000082610260015160600151115b15620002d15760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031c57508161026001516020015182610240015160200151115b806200033957508161026001516040015182610240015160400151115b806200035657508161026001516060015182610240015160600151115b1562000375576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200043192601d9201906200046e565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a5c565b828054828255906000526020600020908101928215620004c6579160200282015b82811115620004c657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048f565b50620004d4929150620004d8565b5090565b5b80821115620004d45760008155600101620004d9565b634e487b7160e01b600052604160045260246000fd5b6040516102c081016001600160401b03811182821017156200052b576200052b620004ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620004ef565b604052919050565b80516001600160a01b03811681146200057c57600080fd5b919050565b600082601f8301126200059357600080fd5b815160206001600160401b03821115620005b157620005b1620004ef565b8160051b620005c282820162000531565b9283528481018201928281019087851115620005dd57600080fd5b83870192505b848310156200060757620005f78362000564565b82529183019190830190620005e3565b979650505050505050565b6000608082840312156200062557600080fd5b604051608081016001600160401b03811182821017156200064a576200064a620004ef565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200068d57600080fd5b81516001600160401b03811115620006a957620006a9620004ef565b6020620006bf601f8301601f1916820162000531565b8281528582848701011115620006d457600080fd5b60005b83811015620006f4578581018301518282018401528201620006d7565b506000928101909101919091529392505050565b600080604083850312156200071c57600080fd5b82516001600160401b03808211156200073457600080fd5b9084019061038082870312156200074a57600080fd5b6200075462000505565b6200075f8362000564565b81526200076f6020840162000564565b6020820152620007826040840162000564565b60408201526060830151828111156200079a57600080fd5b620007a88882860162000581565b606083015250620007bc6080840162000564565b6080820152620007cf60a0840162000564565b60a0820152620007e260c0840162000564565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008708882860162000612565b9082015262000884876102c0850162000612565b61026082015262000899610340840162000564565b61028082015261036092909201516102a0830152602085015191935080821115620008c357600080fd5b50620008d2858286016200067b565b9150509250929050565b600181811c90821680620008f157607f821691505b6020821081036200091257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000968576000816000526020600020601f850160051c81016020861015620009435750805b601f850160051c820191505b8181101562000964578281556001016200094f565b5050505b505050565b81516001600160401b03811115620009895762000989620004ef565b620009a1816200099a8454620008dc565b8462000918565b602080601f831160018114620009d95760008415620009c05750858301515b600019600386901b1c1916600185901b17855562000964565b600085815260208120601f198616915b8281101562000a0a57888601518255948401946001909101908401620009e9565b508582101562000a295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a5757634e487b7160e01b600052601260045260246000fd5b500690565b6136c08062000a6c6000396000f3fe6080604052600436106103a65760003560e01c80638e127cf5116101e7578063d2c35ce81161010d578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610ae9578063f259645814610b09578063f8c09e5914610b29578063fe3d5aeb14610b5957600080fd5b8063e4e7148f14610a74578063e71f34b314610a94578063e83e34b114610ab4578063eb71f66c14610ac957600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb14610a09578063e0e2daaa14610a29578063e1b39c8014610a3f578063e333155514610a5457600080fd5b8063d2c35ce81461099d578063d6f50169146109bd578063daac24da146109d3578063daf012e6146109f357600080fd5b8063b256126311610185578063c415b95c11610154578063c415b95c1461093b578063c905a4b51461095b578063d0f96b9214610971578063d23d7ea31461098757600080fd5b8063b2561263146108c3578063bc30e7a1146108e3578063bf9bd5cd14610903578063c17225631461091957600080fd5b806399623bb1116101c157806399623bb11461084e5780639af252621461086e578063a64c90bf1461088e578063a98a46db146108a357600080fd5b80638e127cf5146107f85780638efc09861461081857806397b0e8ce1461082e57600080fd5b80634554f9a9116102cc578063628027a31161026a57806383b361e81161023957806383b361e81461077857806384c19aab1461079857806385229785146107b85780638627a4f0146107d857600080fd5b8063628027a3146106e35780636b44e6be146107035780636e95d67c146107435780636f6d5c4a1461075857600080fd5b80634fbfee77116102a65780634fbfee771461065a57806354fd4d501461067a5780635720c9d5146106ad5780635aa6e675146106c357600080fd5b80634554f9a91461060e578063488007601461062457806349f13de71461063a57600080fd5b80631ecda0fe116103445780632e7cd971116103135780632e7cd9711461059b5780633e2d2014146105ae578063411c3035146105ce578063421caba8146105ee57600080fd5b80631ecda0fe146105025780632885e3ac146105265780632907d3dd146105465780632b58f4181461056657600080fd5b806310d1dc3e1161038057806310d1dc3e1461047557806311e77bfe146104955780631978ebcf146104b55780631b59be0c146104d557600080fd5b806304baa00b146103d557806306fdde031461042857806310780f731461043d57600080fd5b366103d0576002600154036103ce57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103e157600080fd5b506104126040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161041f9190612cec565b60405180910390f35b34801561043457600080fd5b50610412610b79565b34801561044957600080fd5b5060085461045d906001600160a01b031681565b6040516001600160a01b03909116815260200161041f565b34801561048157600080fd5b506103ce610490366004612cff565b610c07565b3480156104a157600080fd5b506103ce6104b0366004612d11565b610d20565b3480156104c157600080fd5b506103ce6104d0366004612d11565b610df9565b3480156104e157600080fd5b506104f56104f0366004612d2a565b610e7b565b60405161041f9190612d9f565b34801561050e57600080fd5b50610518600f5481565b60405190815260200161041f565b34801561053257600080fd5b506103ce610541366004612cff565b610f56565b34801561055257600080fd5b506103ce610561366004612d11565b6110bc565b34801561057257600080fd5b5061045d610581366004612e14565b60208052600090815260409020546001600160a01b031681565b61045d6105a93660046130ee565b61113e565b3480156105ba57600080fd5b506103ce6105c9366004612e14565b611580565b3480156105da57600080fd5b506103ce6105e93660046131cf565b6115f4565b3480156105fa57600080fd5b506103ce610609366004612e14565b6117c5565b34801561061a57600080fd5b5061051860105481565b34801561063057600080fd5b5061051860145481565b34801561064657600080fd5b5061045d6106553660046131fb565b6118ce565b34801561066657600080fd5b506103ce610675366004612d11565b6119c0565b34801561068657600080fd5b5061041260405180604001604052806007815260200166076312e302e32360cc1b81525081565b3480156106b957600080fd5b50610518600b5481565b3480156106cf57600080fd5b5060025461045d906001600160a01b031681565b3480156106ef57600080fd5b506103ce6106fe366004612d11565b611a1d565b34801561070f57600080fd5b5061073361071e366004612e14565b60226020526000908152604090205460ff1681565b604051901515815260200161041f565b34801561074f57600080fd5b50602154610518565b34801561076457600080fd5b506103ce610773366004612d11565b611a9f565b34801561078457600080fd5b506103ce610793366004612d11565b611b43565b3480156107a457600080fd5b506103ce6107b3366004612d11565b611bc5565b3480156107c457600080fd5b506103ce6107d3366004612e14565b611c47565b3480156107e457600080fd5b506103ce6107f3366004612e14565b611cbb565b34801561080457600080fd5b506103ce610813366004612d11565b611d2f565b34801561082457600080fd5b50610518600e5481565b34801561083a57600080fd5b506103ce610849366004612d11565b611dd3565b34801561085a57600080fd5b5060055461045d906001600160a01b031681565b34801561087a57600080fd5b506103ce610889366004612d2a565b611e55565b34801561089a57600080fd5b506104f5611ebd565b3480156108af57600080fd5b506103ce6108be366004612e14565b611f1f565b3480156108cf57600080fd5b506103ce6108de366004612e14565b611f93565b3480156108ef57600080fd5b506104f56108fe36600461328f565b612007565b34801561090f57600080fd5b5061051860125481565b34801561092557600080fd5b5061092e612109565b60405161041f91906132b1565b34801561094757600080fd5b5060075461045d906001600160a01b031681565b34801561096757600080fd5b5061051860065481565b34801561097d57600080fd5b50610518600a5481565b34801561099357600080fd5b5061051860115481565b3480156109a957600080fd5b506103ce6109b8366004612e14565b612161565b3480156109c957600080fd5b5061051860135481565b3480156109df57600080fd5b5061045d6109ee366004612d11565b6121d5565b3480156109ff57600080fd5b50610518600d5481565b348015610a1557600080fd5b506103ce610a24366004612e14565b612205565b348015610a3557600080fd5b50610518600c5481565b348015610a4b57600080fd5b50601e54610518565b348015610a6057600080fd5b5060045461045d906001600160a01b031681565b348015610a8057600080fd5b5060035461045d906001600160a01b031681565b348015610aa057600080fd5b506103ce610aaf366004612d11565b612279565b348015610ac057600080fd5b5061092e61231d565b348015610ad557600080fd5b506103ce610ae4366004612d11565b612375565b348015610af557600080fd5b506104f5610b0436600461328f565b61240d565b348015610b1557600080fd5b5060095461045d906001600160a01b031681565b348015610b3557600080fd5b50610733610b44366004612e14565b601f6020526000908152604090205460ff1681565b348015610b6557600080fd5b5061045d610b74366004612d11565b61250f565b60008054610b86906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb2906132dc565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b505050505081565b6002546001600160a01b03163314610c31576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c71575080602001518260200135115b80610c83575080604001518260400135115b80610c95575080606001518260600135115b15610cb3576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610d4a576040516282b42960e81b815260040160405180910390fd5b80600b54610d589190613310565b151580610d71575080600c54610d6e9190613310565b15155b80610d88575080600d54610d859190613310565b15155b80610d9f575080600e54610d9c9190613310565b15155b15610dbd576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610e23576040516282b42960e81b815260040160405180910390fd5b601254811115610e4657604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610dee565b60215460609067ffffffffffffffff811115610e9957610e99612e31565b604051908082528060200260200182016040528015610ec2578160200160208202803683370190505b50905060005b82811015610f4e5760206000858584818110610ee657610ee6613332565b9050602002016020810190610efb9190612e14565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610f2e57610f2e613332565b6001600160a01b0390921660209283029190910190910152600101610ec8565b505b92915050565b6002546001600160a01b03163314610f80576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610fcb5750670de0b6b3a76400008260200135115b80610fe15750670de0b6b3a76400008260400135115b80610ff75750670de0b6b3a76400008260600135115b80611003575080518235105b80611015575080602001518260200135105b80611027575080604001518260400135105b80611039575080606001518260600135105b156110575760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610d14565b6002546001600160a01b031633146110e6576040516282b42960e81b815260040160405180910390fd5b601054811115611109576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610dee565b6001600160a01b0389166000908152601f602052604081205460ff1661117757604051636e623f0f60e01b815260040160405180910390fd5b611182888686612524565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092526000916001600160a01b038d169163e990eba8916111df918e908e908e908a90606401613459565b6020604051808303816000875af11580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122291906134a9565b90508a60206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460009054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c6040516112e194939291906134c6565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b03848116918217909255600090815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b81526004016113aa959493929190613518565b60206040518083038185885af11580156113c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113ed919061357b565b50600260015560005b601d5481101561149a57816001600160a01b0316637180c8ca601d838154811061142257611422613332565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050600190920191506113f69050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50479250508115905061157057604051600090339083908381818185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b505090508061156e576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b031633146115aa576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d390600090a250565b6002546001600160a01b0316331480159061161a57506003546001600160a01b03163314155b15611637576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601f602052604090205460ff1661167057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e828154811061168d5761168d613332565b6000918252602090912001546001600160a01b0316146116c057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601f60205260409020805460ff19169055601e80546116f0906001906135aa565b8154811061170057611700613332565b600091825260209091200154601e80546001600160a01b03909216918390811061172c5761172c613332565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e80548061176b5761176b6135bd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906117eb57506003546001600160a01b03163314155b15611808576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16156118425760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387166000908152601f602052604081205460ff1661190757604051636e623f0f60e01b815260040160405180910390fd5b611912878686612524565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092526000916001600160a01b038b169163c15106189161196f918c908c908a908a906064016135d3565b6020604051808303816000875af115801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906134a9565b9a9950505050505050505050565b6002546001600160a01b031633146119ea576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b03163314611a47576040516282b42960e81b815260040160405180910390fd5b601354811015611a6a57604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610dee565b6002546001600160a01b03163314611ac9576040516282b42960e81b815260040160405180910390fd5b600b54811080611ae45750600a54611ae19082613310565b15155b80611af05750600d5481115b15611b0e5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610dee565b6002546001600160a01b03163314611b6d576040516282b42960e81b815260040160405180910390fd5b601454811115611b9057604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610dee565b6002546001600160a01b03163314611bef576040516282b42960e81b815260040160405180910390fd5b600f54811015611c1257604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610dee565b6002546001600160a01b03163314611c71576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b03163314611ce5576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b03163314611d59576040516282b42960e81b815260040160405180910390fd5b600a54811080611d745750600a54611d719082613310565b15155b80611d805750600c5481115b15611d9e57604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610dee565b6002546001600160a01b03163314611dfd576040516282b42960e81b815260040160405180910390fd5b601154811015611e205760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610dee565b6002546001600160a01b03163314611e7f576040516282b42960e81b815260040160405180910390fd5b611e8b601d8383612c37565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610d14929190613612565b6060601d805480602002602001604051908101604052809291908181526020018280548015611f1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef7575b5050505050905090565b6002546001600160a01b03163314611f49576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611fbd576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b606081831061202957604051633b2735ab60e11b815260040160405180910390fd5b60215482111561204c5760405163e0f7becb60e01b815260040160405180910390fd5b61205683836135aa565b67ffffffffffffffff81111561206e5761206e612e31565b604051908082528060200260200182016040528015612097578160200160208202803683370190505b509050825b82811015610f4e57602181815481106120b7576120b7613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106120e9576120e9613332565b6001600160a01b039092166020928302919091019091015260010161209c565b6121346040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b0316331461218b576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000602182815481106121ea576121ea613332565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461222f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b031633146122a3576040516282b42960e81b815260040160405180910390fd5b600c548110806122be5750600a546122bb9082613310565b15155b806122ca5750600e5481115b156122e857604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610dee565b6123486040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b0316331461239f576040516282b42960e81b815260040160405180910390fd5b600d548110806123ba5750600a546123b79082613310565b15155b156123d85760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610dee565b606081831061242f57604051633b2735ab60e11b815260040160405180910390fd5b601e548211156124525760405163e0f7becb60e01b815260040160405180910390fd5b61245c83836135aa565b67ffffffffffffffff81111561247457612474612e31565b60405190808252806020026020018201604052801561249d578160200160208202803683370190505b509050825b82811015610f4e57601e81815481106124bd576124bd613332565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106124ef576124ef613332565b6001600160a01b03909216602092830291909101909101526001016124a2565b6000601e82815481106121ea576121ea613332565b600b54836101000151108061253f5750600c54836101000151115b8061255b5750600a548361010001516125589190613310565b15155b1561257957604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806125925750600e548360e00151115b806125b057508261010001518360e001516125ad9190613310565b15155b156125ce5760405163253fffcf60e11b815260040160405180910390fd5b600f548360c0015110806125e757506010548360c00151115b156126055760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c08401515111806126395750601a5460e08401516101c085015160200151612637916301e1338090612895565b115b8061264e5750601b546101c084015160400151115b806126635750601c546101c084015160600151115b8061267557506015546101c084015151105b8061269e575060165460e08401516101c08501516020015161269c916301e13380906128bb565b105b806126b357506017546101c084015160400151105b806126c857506018546101c084015160600151105b156126e657604051632d8768f960e01b815260040160405180910390fd5b6011548210806126f7575060125482115b15612715576040516330554de160e01b815260040160405180910390fd5b600061273a6611c37937e0800061273485671bc16d674ec800006128d9565b906128f5565b60135490915061274a90826128f5565b82108061277d575061277a612771671bc16d674ec8000061276b86856128f5565b9061290b565b60145490612920565b82115b1561279b576040516383ebdfb760e01b815260040160405180910390fd5b60006127ab838660e00151612935565b60055460408701519192506001600160a01b0391821691161415806127d65750600654856060015114155b806127f557506007546101608601516001600160a01b03908116911614155b8061281457506008546101808601516001600160a01b03908116911614155b8061283357506009546101a08601516001600160a01b03908116911614155b8061285257506004546101408601516001600160a01b03908116911614155b80612861575061012085015115155b1561287f5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b60008260001904841183021582026128ac57600080fd5b50910281810615159190040190565b60008260001904841183021582026128d257600080fd5b5091020490565b60006128ee83670de0b6b3a7640000846128bb565b9392505050565b600081831161290457816128ee565b5090919050565b60006128ee8383670de0b6b3a76400006128bb565b600081831161292f57826128ee565b50919050565b600080612966612957612949866064613660565b66a5bbed86c5a0009061290b565b6748cd4072281e0000906128d9565b905061297a670de0b6b3a7640000826128d9565b90506129d28161276b6129a56129a061299b89670de0b6b3a7640000613677565b6129da565b612a08565b6129cc6129a06129ba8a8a6301e133806128bb565b61299b90670de0b6b3a7640000613677565b906128d9565b949350505050565b60006001600160ff1b03821115612a045760405163396ea70160e11b815260040160405180910390fd5b5090565b6000808213612a2a5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612ab69084901c6129da565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612c8a579160200282015b82811115612c8a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612c57565b50612a049291505b80821115612a045760008155600101612c92565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006128ee6020830184612ca6565b60006080828403121561292f57600080fd5b600060208284031215612d2357600080fd5b5035919050565b60008060208385031215612d3d57600080fd5b823567ffffffffffffffff80821115612d5557600080fd5b818501915085601f830112612d6957600080fd5b813581811115612d7857600080fd5b8660208260051b8501011115612d8d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612de05783516001600160a01b031683529284019291840191600101612dbb565b50909695505050505050565b6001600160a01b0381168114612e0157600080fd5b50565b8035612e0f81612dec565b919050565b600060208284031215612e2657600080fd5b81356128ee81612dec565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715612e6b57612e6b612e31565b60405290565b600082601f830112612e8257600080fd5b813567ffffffffffffffff80821115612e9d57612e9d612e31565b604051601f8301601f19908116603f01168101908282118183101715612ec557612ec5612e31565b81604052838152866020858801011115612ede57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060808284031215612f1057600080fd5b6040516080810181811067ffffffffffffffff82111715612f3357612f33612e31565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215612f7757600080fd5b612f7f612e47565b9050612f8a82612e04565b8152612f9860208301612e04565b6020820152612fa960408301612e04565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140613006818401612e04565b90820152610160613018838201612e04565b9082015261018061302a838201612e04565b908201526101a061303c838201612e04565b908201526101c061304f84848301612efe565b9082015292915050565b60006060828403121561306b57600080fd5b6040516060810167ffffffffffffffff828210818311171561308f5761308f612e31565b81604052829350843591506130a382612dec565b90825260208401359081151582146130ba57600080fd5b81602084015260408501359150808211156130d457600080fd5b506130e185828601612e71565b6040830152505092915050565b6000806000806000806000806000806103608b8d03121561310e57600080fd5b8a35995061311e60208c01612e04565b985060408b013567ffffffffffffffff8082111561313b57600080fd5b6131478e838f01612e71565b99506131568e60608f01612f64565b98506102a08d013591508082111561316d57600080fd5b6131798e838f01612e71565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156131a857600080fd5b506131b58d828e01613059565b9250506103408b013590509295989b9194979a5092959850565b600080604083850312156131e257600080fd5b82356131ed81612dec565b946020939093013593505050565b600080600080600080600080610320898b03121561321857600080fd5b88359750602089013561322a81612dec565b96506132398a60408b01612f64565b955061028089013567ffffffffffffffff81111561325657600080fd5b6132628b828c01612e71565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b600080604083850312156132a257600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610f50565b600181811c908216806132f057607f821691505b60208210810361292f57634e487b7160e01b600052602260045260246000fd5b60008261332d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b80516001600160a01b03168252602081015161336f60208401826001600160a01b03169052565b50604081015161338a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133f0828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b60006102c087835280602084015261347381840188612ca6565b90506134826040840187613348565b8281036102808401526134958186612ca6565b915050826102a08301529695505050505050565b6000602082840312156134bb57600080fd5b81516128ee81612dec565b6001600160a01b03851681526102a0602082018190526000906134eb83820187612ca6565b90506134fa6040840186613348565b82810361028084015261350d8185612ca6565b979650505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261356f610100840182612ca6565b98975050505050505050565b60006020828403121561358d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f5057610f50613594565b634e487b7160e01b600052603160045260246000fd5b60006102c08783526135e86020840188613348565b806102608401526135fb81840187612ca6565b61028084019590955250506102a001529392505050565b60208082528181018390526000908460408401835b8681101561365557823561363a81612dec565b6001600160a01b031682529183019190830190600101613627565b509695505050505050565b8082028115828204841417610f5057610f50613594565b80820180821115610f5057610f5061359456fea26469706673582212202217d822866c8a8fcdecac35618f52937311a873e0b7e02e8b13da1f161ff80364736f6c63430008160033608060405234801561001057600080fd5b506121d3806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80638cc23ce01462000033575b600080fd5b6200004a6200004436600462000370565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290526000908190606001604051602081830303815290604052805190602001208c8c8c8b8b8b8b8b604051620000aa90620000ef565b620000bd98979695949392919062000590565b8190604051809103906000f5905080158015620000de573d6000803e3d6000fd5b509c9b505050505050505050505050565b611b62806200063c83390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff811182821017156200013a576200013a620000fd565b60405290565b600082601f8301126200015257600080fd5b813567ffffffffffffffff80821115620001705762000170620000fd565b604051601f8301601f19908116603f011681019082821181831017156200019b576200019b620000fd565b81604052838152866020858801011115620001b557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114620001ed57600080fd5b919050565b6000608082840312156200020557600080fd5b6040516080810181811067ffffffffffffffff821117156200022b576200022b620000fd565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600061026082840312156200027057600080fd5b6200027a62000113565b90506200028782620001d5565b81526200029760208301620001d5565b6020820152620002aa60408301620001d5565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016062000315818401620001d5565b9082015261018062000329838201620001d5565b908201526101a06200033d838201620001d5565b908201526101c062000351838201620001d5565b908201526101e06200036684848301620001f2565b9082015292915050565b6000806000806000806000806000806103808b8d0312156200039157600080fd5b8a3567ffffffffffffffff80821115620003aa57600080fd5b620003b88e838f0162000140565b9b50620003c98e60208f016200025c565b9a50620003da6102808e01620001d5565b99506102a08d0135915080821115620003f257600080fd5b50620004018d828e0162000140565b975050620004136102c08c01620001d5565b9550620004246102e08c01620001d5565b9450620004356103008c01620001d5565b9350620004466103208c01620001d5565b9250620004576103408c01620001d5565b91506103608b013590509295989b9194979a5092959850565b80516001600160a01b0316825260208101516200049860208401826001600160a01b03169052565b506040810151620004b460408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015162000527828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006103408083528a518082850152600091505b80821015620005c8576020828d0101516103608386010152602082019150620005a4565b6103609150600082828601015281601f19601f83011685010192505050620005f4602083018a62000470565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e08401528416610300830152909216610320909201919091529291505056fe6103206040523480156200001257600080fd5b5060405162001b6238038062001b628339810160408190526200003591620006c0565b6001600081905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fc898262000879565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e05281166103005260208b01518b5162000142955090911692509050600162000150565b505050505050505062000987565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001aa90859083906200021c16565b6200021657604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200020a918691620002cd16565b620002168482620002cd565b50505050565b6000806000846001600160a01b0316846040516200023b919062000945565b6000604051808303816000865af19150503d80600081146200027a576040519150601f19603f3d011682016040523d82523d6000602084013e6200027f565b606091505b5091509150818015620002ad575080511580620002ad575080806020019051810190620002ad919062000963565b8015620002c457506000856001600160a01b03163b115b95945050505050565b6000620002e46001600160a01b0384168362000340565b905080516000141580156200030c5750808060200190518101906200030a919062000963565b155b156200033b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620003508383600062000357565b9392505050565b6060814710156200037e5760405163cd78605960e01b815230600482015260240162000332565b600080856001600160a01b031684866040516200039c919062000945565b60006040518083038185875af1925050503d8060008114620003db576040519150601f19603f3d011682016040523d82523d6000602084013e620003e0565b606091505b509092509050620003f3868383620003fd565b9695505050505050565b6060826200041657620004108262000461565b62000350565b81511580156200042e57506001600160a01b0384163b155b156200045957604051639996b31560e01b81526001600160a01b038516600482015260240162000332565b508062000350565b805115620004725780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715620004c757620004c76200048b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004f857620004f86200048b565b604052919050565b60005b838110156200051d57818101518382015260200162000503565b50506000910152565b80516001600160a01b03811681146200053e57600080fd5b919050565b6000608082840312156200055657600080fd5b604051608081016001600160401b03811182821017156200057b576200057b6200048b565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006102608284031215620005c057600080fd5b620005ca620004a1565b9050620005d78262000526565b8152620005e76020830162000526565b6020820152620005fa6040830162000526565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200066581840162000526565b908201526101806200067983820162000526565b908201526101a06200068d83820162000526565b908201526101c0620006a183820162000526565b908201526101e0620006b68484830162000543565b9082015292915050565b600080600080600080600080610340898b031215620006de57600080fd5b88516001600160401b0380821115620006f657600080fd5b818b0191508b601f8301126200070b57600080fd5b8151818111156200072057620007206200048b565b62000735601f8201601f1916602001620004cd565b91508082528c60208285010111156200074d57600080fd5b6200076081602084016020860162000500565b5098506200077490508a60208b01620005ac565b9650620007856102808a0162000526565b9550620007966102a08a0162000526565b9450620007a76102c08a0162000526565b9350620007b86102e08a0162000526565b9250620007c96103008a0162000526565b9150620007da6103208a0162000526565b90509295985092959890939650565b600181811c90821680620007fe57607f821691505b6020821081036200081f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b576000816000526020600020601f850160051c81016020861015620008505750805b601f850160051c820191505b8181101562000871578281556001016200085c565b505050505050565b81516001600160401b038111156200089557620008956200048b565b620008ad81620008a68454620007e9565b8462000825565b602080601f831160018114620008e55760008415620008cc5750858301515b600019600386901b1c1916600185901b17855562000871565b600085815260208120601f198616915b828110156200091657888601518255948401946001909101908401620008f5565b5085821015620009355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200095981846020870162000500565b9190910192915050565b6000602082840312156200097657600080fd5b815180151581146200035057600080fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516110ad62000ab5600039600081816105ee0152818161065a01526107530152600081816105660152818161078301526107e101526000818161051f015261097c0152600081816105ba01526106f00152600081816101ce015281816103900152818161062a0152818161068c015281816106be01528181610724015281816107b6015281816108120152818161094a01526109af0152600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506000505060005050600050506110ad6000f3fe6080604052600436106101b75760003560e01c80639032c726116100ec578063d899e1121161008a578063e44808bc11610064578063e44808bc14610588578063eac3e799146105a8578063f3f70707146105dc578063f698da2514610610576101b7565b8063d899e11214610554578063dbbe807014610541578063ded06231146103ca576101b7565b8063a6e8a859116100c6578063a6e8a8591461050d578063ab033ea9146102c7578063cba2e58d14610541578063cbc1343414610304576101b7565b80639032c726146104cd5780639cd241af146104ed578063a22cb4651461049a576101b7565b806330adf81f116101595780634c2ac1d9116101335780634c2ac1d91461046c5780634ed2d6ac1461047f5780637180c8ca1461049a57806377d05ff4146104ba576101b7565b806330adf81f146103f85780633e691db91461042c578063414f826d1461044c576101b7565b806317fad7fc1161019557806317fad7fc1461033e5780631c0f12b61461035e57806321b57d531461037e57806329b23fc1146103ca576101b7565b806301681a62146102c757806302329a29146102e9578063074a6de914610304575b3480156101c357600080fd5b5060003660606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610206929190610a85565b600060405180830381855af49150503d8060008114610241576040519150601f19603f3d011682016040523d82523d6000602084013e610246565b606091505b5091509150811561026a57604051638bb0a34b60e01b815260040160405180910390fd5b600061027582610a95565b90506001600160e01b03198116636e64089360e11b1461029757815160208301fd5b8151600319810160048401908152926102b891810160200190602401610b06565b80519650602001945050505050f35b3480156102d357600080fd5b506102e76102e2366004610bcb565b610625565b005b3480156102f557600080fd5b506102e76102e2366004610c04565b34801561031057600080fd5b5061032461031f366004610c31565b610652565b604080519283526020830191909152015b60405180910390f35b34801561034a57600080fd5b506102e7610359366004610ccd565b610687565b34801561036a57600080fd5b506102e7610379366004610d62565b6106b9565b34801561038a57600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610335565b3480156103d657600080fd5b506103ea6103e5366004610daa565b6106e9565b604051908152602001610335565b34801561040457600080fd5b506103ea7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561043857600080fd5b506103ea610447366004610e04565b61071d565b34801561045857600080fd5b506102e7610467366004610e41565b61074e565b6103ea61047a366004610e63565b61077c565b34801561048b57600080fd5b506102e7610379366004610ec7565b3480156104a657600080fd5b506102e76104b5366004610f11565b6107b1565b6103ea6104c8366004610c31565b6107da565b3480156104d957600080fd5b506102e76104e8366004610f46565b61080d565b3480156104f957600080fd5b506102e7610508366004610fc4565b610945565b34801561051957600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b61032461054f366004610daa565b610974565b34801561056057600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561059457600080fd5b506102e76105a3366004610ffc565b6109aa565b3480156105b457600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e857600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561061c57600080fd5b506103ea6109db565b61064e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050565b60008061067e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50935093915050565b6106b07f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050505050565b6106e27f0000000000000000000000000000000000000000000000000000000000000000610a69565b5050505050565b60006107147f0000000000000000000000000000000000000000000000000000000000000000610a69565b50949350505050565b60006107487f0000000000000000000000000000000000000000000000000000000000000000610a69565b50919050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050565b60006107a77f0000000000000000000000000000000000000000000000000000000000000000610a69565b5095945050505050565b6107777f0000000000000000000000000000000000000000000000000000000000000000610a69565b60006108057f0000000000000000000000000000000000000000000000000000000000000000610a69565b509392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108426109db565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108eb919061105b565b600060405180830381855af49150503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50915091508161093d57805160208201fd5b805160208201f35b61096e7f0000000000000000000000000000000000000000000000000000000000000000610a69565b50505050565b6000806109a07f0000000000000000000000000000000000000000000000000000000000000000610a69565b5094509492505050565b6109d37f0000000000000000000000000000000000000000000000000000000000000000610a69565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6060600080836001600160a01b03166000366040516108eb9291905b8183823760009101908152919050565b805160208201516001600160e01b03198082169291906004831015610ac45780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610afd578181015183820152602001610ae5565b50506000910152565b600060208284031215610b1857600080fd5b815167ffffffffffffffff80821115610b3057600080fd5b818401915084601f830112610b4457600080fd5b815181811115610b5657610b56610acc565b604051601f8201601f19908116603f01168101908382118183101715610b7e57610b7e610acc565b81604052828152876020848701011115610b9757600080fd5b610ba8836020830160208801610ae2565b979650505050505050565b6001600160a01b0381168114610bc857600080fd5b50565b600060208284031215610bdd57600080fd5b8135610be881610bb3565b9392505050565b80358015158114610bff57600080fd5b919050565b600060208284031215610c1657600080fd5b610be882610bef565b60006060828403121561074857600080fd5b600080600060608486031215610c4657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610c6b57600080fd5b610c7786828701610c1f565b9150509250925092565b60008083601f840112610c9357600080fd5b50813567ffffffffffffffff811115610cab57600080fd5b6020830191508360208260051b8501011115610cc657600080fd5b9250929050565b60008060008060008060808789031215610ce657600080fd5b8635610cf181610bb3565b95506020870135610d0181610bb3565b9450604087013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8a838b01610c81565b90965094506060890135915080821115610d4357600080fd5b50610d5089828a01610c81565b979a9699509497509295939492505050565b60008060008060808587031215610d7857600080fd5b843593506020850135610d8a81610bb3565b92506040850135610d9a81610bb3565b9396929550929360600135925050565b60008060008060808587031215610dc057600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610dec57600080fd5b610df887828801610c1f565b91505092959194509250565b600060208284031215610e1657600080fd5b813567ffffffffffffffff811115610e2d57600080fd5b610e3984828501610c1f565b949350505050565b60008060408385031215610e5457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610e7b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610eae57600080fd5b610eba88828901610c1f565b9150509295509295909350565b60008060008060808587031215610edd57600080fd5b843593506020850135610eef81610bb3565b9250604085013591506060850135610f0681610bb3565b939692955090935050565b60008060408385031215610f2457600080fd5b8235610f2f81610bb3565b9150610f3d60208401610bef565b90509250929050565b600080600080600080600060e0888a031215610f6157600080fd5b8735610f6c81610bb3565b96506020880135610f7c81610bb3565b9550610f8a60408901610bef565b945060608801359350608088013560ff81168114610fa757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215610fd957600080fd5b833592506020840135610feb81610bb3565b929592945050506040919091013590565b600080600080600060a0868803121561101457600080fd5b85359450602086013561102681610bb3565b9350604086013561103681610bb3565b925060608601359150608086013561104d81610bb3565b809150509295509295909350565b6000825161106d818460208701610ae2565b919091019291505056fea2646970667358221220eb1a085770637531af177673072793237168b30477e799ecbbe34a4b582495d564736f6c63430008160033a26469706673582212206b807b4b1e3e2326d0241be1b938f86222eb76e30f7e5e44dd3e3aef711cf38964736f6c63430008160033608060405234801561001057600080fd5b506143ac806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b613ebf806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162003ebf38038062003ebf8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613a596200046660003960008181610d890152612396015260008181610d5a0152612359015260008181610c3401528181610eb901528181610f4901528181610fd901528181611069015281816116840152818161171c015281816118e501528181611f1001528181611fe6015261213d01526000610e21015260008181610dfb0152612549015260008181610dd50152612523015260008181610daf01526124fd01526000611176015260006111500152600061112a01526000611104015260008181610e93015261256f015260008181610e470152818161130b01526128ff015260008181610e6d0152612b8e01526000818161061301528181610d2b01528181611e810152818161261f0152818161264b01528181612ada0152612b5f01526000818161074301528181610cfc01526112a40152613a596000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c806360246c8811610130578063bd85b039116100b8578063cf210e651161007c578063cf210e65146104e6578063d8165743146104f9578063e44808bc1461050e578063e985e9c514610521578063fba560081461053457600080fd5b8063bd85b03914610490578063becee9c3146104a3578063c55dae63146104c3578063c69e16ad146104cb578063c6e6f592146104d357600080fd5b80639cd241af116100ff5780639cd241af14610431578063a22cb46514610444578063ab033ea914610457578063b0d9658014610468578063b88fed9f1461047d57600080fd5b806360246c88146103ef5780637180c8ca146104045780637ecebe0014610416578063950c5d031461042957600080fd5b806320fc4881116101be5780633e691db9116101825780633e691db91461038b57806346fbf68e1461039e5780634e41a1fb146103c15780634ed2d6ac146103d457806354fd4d50146103e757600080fd5b806320fc4881146102f057806321ff32a914610335578063313ce567146103565780633656eec2146103705780633a98ef391461038357600080fd5b806306fdde031161020557806306fdde031461028f5780630a4e14931461029757806314e5f07b146102b757806317fad7fc146102ca5780631c0f12b6146102dd57600080fd5b8062ad800c1461023657806301681a621461025f57806302329a291461027457806304baa00b14610287575b600080fd5b610249610244366004612ddf565b610563565b6040516102569190612e48565b60405180910390f35b61027261026d366004612e70565b61059a565b005b610272610282366004612e9b565b6105a3565b6102496105ac565b6102496105ee565b61029f610605565b6040516001600160a01b039091168152602001610256565b6102726102c5366004612ec7565b610645565b6102726102d8366004612fa2565b610661565b6102726102eb366004613037565b610677565b6103036102fe366004612ddf565b61068a565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610256565b61034861034336600461307f565b6106f6565b604051908152602001610256565b61035e61073c565b60405160ff9091168152602001610256565b61034861037e3660046130c1565b6107d7565b610348610810565b6103486103993660046130f1565b61082f565b6103b16103ac366004612e70565b61083a565b6040519015158152602001610256565b6102496103cf366004612ddf565b61085a565b6102726103e236600461312c565b610868565b6102496108b6565b6103f76108eb565b6040516102569190613176565b610272610412366004613217565b5050565b610348610424366004612e70565b610bfa565b61029f610c26565b61027261043f366004613245565b610c66565b610272610452366004613217565b610c77565b610272610465366004612e70565b50565b610470610ce3565b604051610256919061327d565b61034861048b366004612ddf565b6111ab565b61034861049e366004612ddf565b6111b9565b6104b66104b13660046133a3565b6111db565b60405161025691906133e5565b61029f611296565b6103486112d6565b6103486104e1366004612ddf565b6112f0565b6103486104f4366004612ddf565b6112fe565b610501611335565b6040516102569190613429565b61027261051c36600461353a565b611441565b6103b161052f366004613599565b611489565b61053c6114cd565b6040805182516001600160801b039081168252602093840151169281019290925201610256565b60606105956105718361152c565b6040516020016105819190612e48565b604051602081830303815290604052611654565b919050565b61046581611678565b610465816118e3565b60606105eb60405180604001604052806011815260200170455243343632364879706572647269766560781b8152506040516020016105819190612e48565b90565b60606105eb600160405160200161058191906135c7565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201526000916105eb9101610581565b6106568989898989898989896119fd565b505050505050505050565b61066f868686868686611bf4565b505050505050565b6106848484848433611ca8565b50505050565b604080516060810182526000808252602082018190529181019190915261059560086000848152602001908152602001600020604051602001610581919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b6000838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107359101610581565b9392505050565b60006105eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190613678565b6040805160ff909216602083015201610581565b6000828152600a602090815260408083206001600160a01b038516845282528083205481519283015261080a9101610581565b92915050565b60006105eb61081d611e69565b60405160200161058191815260200190565b600061080a82611ef9565b600061059561084883612138565b60408051911515602083015201610581565b60606105956105718361221d565b836108728161231b565b6001600160a01b0316336001600160a01b0316146108a357604051632aab8bd360e01b815260040160405180910390fd5b6108af858585856123d8565b5050505050565b60606105eb60405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105819190612e48565b610964604051806101e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061096e612445565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109d991906136c1565b6109e391906136d4565b905060008215610af55773__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e55929190613a36565b6040805180830381865af4158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e959190613aac565b91509150611eb3611ea582611377565b611eae90613ad0565b612a78565b925082611ec95760009650505050505050611371565b611ed282611a50565b60078054600090611eed9084906001600160801b03166138ed565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f1a81611a50565b60078054601090611f3c908490600160801b90046001600160801b03166138ed565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f9987612c10565b6040518263ffffffff1660e01b8152600401611fb59190613aec565b6040805180830381865af4158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190613afb565b915091508061200b575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161207191613709565b61207b91906138ba565b90508060000361209357506000958695509350505050565b60008087116120a35760006120ae565b6120ae84888461258f565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156120e2576120e2613b2b565b6040519080825280601f01601f19166020018201604052801561210c576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561212d578692505b828152826000602083013e90999098509650505050505050565b6000806121526105ca565b905080831161216257600061216c565b61216c81846138ba565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612822565b600080806121b96121b188670de0b6b3a76400006138ba565b899087612d4a565b905086156121fb576121cb888861257a565b91506121ec8a8a846121e58a670de0b6b3a76400006138ba565b8989612d70565b92506121f88382613709565b90505b9750975097945050505050565b600061222661221f84670de0b6b3a76400006138ba565b839061257a565b6115de90670de0b6b3a76400006138ba565b60008061226f85612247611a18565b6122519190613709565b600254610ff2908790600160801b90046001600160801b03166138ba565b909210949350505050565b60008080806122d187866122ca8b6122c461229d8c670de0b6b3a76400006138ba565b7f00000000000000000000000000000000000000000000000000000000000000009061257a565b9061257a565b9190612d4a565b93506122fd847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061231e61231689670de0b6b3a76400006138ba565b8a9088612d4a565b905061234a817f000000000000000000000000000000000000000000000000000000000000000061257a565b9350612376847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123809084613709565b915050945094509450949050565b600080600080600080888810156123fd5786156123b3576123b08d898b61258f565b9c505b6123be8c898b61258f565b9b506123c98b611377565b6123d28d611377565b6123dc919061371c565b90506123e98b898b61258f565b9a506123f68a898b61258f565b995061241c565b6124068b611377565b61240f8d611377565b612419919061371c565b90505b9b9c9a9b999a975050505050505050565b60008260000361243e5750846124ce565b81156124915761246f6124518487613709565b61245b85876115e5565b612465888a6115e5565b611d149190613709565b9050600061247d8588611a7a565b90508082101561248b578091505b506124ce565b8285036124a0575060006124ce565b6124cb6124ad84876138ba565b6124b7858761257a565b6124c1888a6115e5565b611d1491906138ba565b90505b95945050505050565b600060016001607f1b03198212806124f5575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612521846000612d93565b61252c846000612d93565b612536919061371c565b905060008113156125525761254b8186613709565b9450612571565b60008112156125715761256481613ad0565b61256e90866138ba565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612d4a565b60008260001904841183021582026125a657600080fd5b5091020490565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612da9565b604051635d043b2960e11b8152600481018590526001600160a01b0384811660248301523060448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af1158015612653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100819190613b41565b6126ab6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612dd9565b50505050565b600080806126d26126ca88670de0b6b3a76400006138ba565b89908761258f565b905086156121fb576126e488886115e5565b91506121ec8a8a846126fe8a670de0b6b3a76400006138ba565b8989612e30565b6000806127128484612e41565b90925090508061272457612724611444565b5092915050565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613b41565b6000816000036127b15750670de0b6b3a7640000611371565b826000036127c157506000611371565b60006127cc83611377565b905060006127e16127dc86611377565b612e80565b90508181026127f8670de0b6b3a764000082613b5a565b9050612803816130a6565b9695505050505050565b60006115de83670de0b6b3a764000084612d4a565b60006115de83670de0b6b3a76400008461258f565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b600354600090819061287c906001600160801b03168461280d565b90506128a87f000000000000000000000000000000000000000000000000000000000000000082613709565b6002546001600160801b03161115611a89576002547f0000000000000000000000000000000000000000000000000000000000000000906128f39083906001600160801b03166138ba565b6115de91906138ba565b6129056135e1565b60008061291184612c10565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161294c9190613aec565b6040805180830381865af4158015612968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298c9190613afb565b93509050826129a1575060009150612a709050565b60006129c86129c38461016001518561014001516115e590919063ffffffff16565b611377565b6129e86129c385610120015186610100015161257a90919063ffffffff16565b6129f2919061371c565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b559190613b88565b935093509350935080612b715750600098975050505050505050565b868414612ba257612b8184611a50565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bd357612bb2836124d7565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c0157612be382611a50565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612c18613633565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612d10911661323b565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612d429290041661323b565b905292915050565b6000826000190484118302158202612d6157600080fd5b50910281810615159190040190565b600080612d818888888888886132b1565b909250905080611d4157611d41611444565b6000818313612da257816115de565b5090919050565b6040516363737ac960e11b8152600481018290526000906001600160a01b0384169063c6e6f59290602401612757565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612e2b908490613392565b505050565b600080612d818888888888886133fa565b600080600083612e5086611377565b612e5a919061371c565b90506000811215612e72576000809250925050612e79565b9150600190505b9250929050565b6000808213612ea25760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612f259084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136130c157506000919050565b680755bf798b4a1bf1e582126130ea576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061280374029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061324f6105ca565b613259919061392a565b9050808311613269576000613273565b61327381846138ba565b91506115de6132aa670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061392a565b8390612822565b60008060006132c389898888886134ba565b9050868810156132da576000809250925050613387565b96869003966132e98887612798565b975087811015613300576000809250925050613387565b87810361330e818688612d4a565b9050670de0b6b3a764000081106133425761333b613334670de0b6b3a76400008961280d565b8290612798565b905061335a565b613357613334670de0b6b3a764000089612822565b90505b613364818661280d565b90508981101561337c57600080935093505050613387565b899003925060019150505b965096945050505050565b60006133a76001600160a01b038416836134e9565b905080516000141580156133cc5750808060200190518101906133ca9190613bbe565b155b15612e2b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b600080600061340c89898888886134ba565b905061341c86611a4a898b613709565b975087811015613433576000809250925050613387565b878103613441818688612d4a565b9050670de0b6b3a7640000811061346e57613467613334670de0b6b3a76400008961280d565b9050613486565b613483613334670de0b6b3a764000089612822565b90505b613490818661280d565b9050808a10156134a857600080935093505050613387565b90980398600198509650505050505050565b60006134c68585612798565b6134df6134d786611a4a868b61257a565b859085612d4a565b6124cb9190613709565b60606115de8383600084600080856001600160a01b0316848660405161350f9190613bdb565b60006040518083038185875af1925050503d806000811461354c576040519150601f19603f3d011682016040523d82523d6000602084013e613551565b606091505b50915091506128038683836060826135715761356c826135b8565b6115de565b815115801561358857506001600160a01b0384163b155b156135b157604051639996b31560e01b81526001600160a01b03851660048201526024016133f1565b50806115de565b8051156135c85780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806135f5613633565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600080608085870312156136aa57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156136d657600080fd5b8501606081880312156136e857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611371576113716136f3565b8181036000831280158383131683831282161715612724576127246136f3565b6001600160a01b03811681146105af57600080fd5b60006020828403121561376357600080fd5b81356115de8161373c565b80151581146105af57600080fd5b60006020828403121561378e57600080fd5b81356115de8161376e565b6000808335601e198436030181126137b057600080fd5b83018035915067ffffffffffffffff8211156137cb57600080fd5b602001915036819003821315612e7957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c0820152600061384360e0830184866137e0565b9a9950505050505050505050565b8082018281126000831280158216821582161715613871576138716136f3565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a082015260006138ad60c0830184866137e0565b9998505050505050505050565b81810381811115611371576113716136f3565b6001600160701b03818116838216019080821115612724576127246136f3565b6001600160801b03818116838216019080821115612724576127246136f3565b60006020828403121561391f57600080fd5b81516115de8161373c565b8082028115828204841417611371576113716136f3565b6001600160801b03828116828216039080821115612724576127246136f3565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715611371576113716136f3565b634e487b7160e01b600052601260045260246000fd5b6000826139b3576139b361398e565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613a4a8285516139b8565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613abf57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ae557613ae56136f3565b5060000390565b610180810161137182846139b8565b60008060408385031215613b0e57600080fd5b825191506020830151613b208161376e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613b5357600080fd5b5051919050565b600082613b6957613b6961398e565b600160ff1b821460001984141615613b8357613b836136f3565b500590565b60008060008060808587031215613b9e57600080fd5b84519350602085015192506040850151915060608501516136e88161376e565b600060208284031215613bd057600080fd5b81516115de8161376e565b6000825160005b81811015613bfc5760208186018101518583015201613be2565b50600092019182525091905056fea26469706673582212201b73e58470df05647285f1015de2e1dc71968edb26bb39f47c400b4d8319456d64736f6c63430008160033a2646970667358221220a14528f6b7a0676ae6286ee2ed1252d932f8dc4bd1702c7abd2f1f089f9746b364736f6c63430008160033608060405234801561001057600080fd5b50614873806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b614386806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b5060405162004386380380620043868339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613ec7620004bf60003960005050600050506000610c4101526000505060008181610100015281816103100152612e1e0152600081816114d801528181611d3601528181611d990152818161254b01528181612a0301528181612a3f01528181612c370152612df80152600081816107ef01528181610da101528181610de301528181610ed50152818161134b015281816113aa0152612dd201526000611955015260008181611a7b0152818161266c015281816126e50152612f380152600081816109b301528181610e560152818161144501528181611a4f01526126b9015260008181610e35015281816126380152612ef401526000818161081001528181610d7f01528181610e0401528181610ef601528181611329015281816113cb0152612e440152600081816101de015281816103a8015281816108eb01526135650152600081816106a9015281816107290152818161079f0152818161086b01526108a30152600081816116a30152818161171d015281816117af01526125b801526000818161167601526116d70152613ec76000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c36600461391b565b61006d565b6040805192835260208301919091520160405180910390f35b61004161006836600461391b565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a461052a565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610554565b6100de83610575565b6000806100eb88866105ae565b909250905060006100fc8383610683565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106a1565b905061017a8184600460016106d2565b50600080600061018a8787610d50565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613990565b909155506101d99050844283610f32565b6102037f000000000000000000000000000000000000000000000000000000000000000085613990565b98506102118389888c611070565b600061021e60018b61120a565b90506102378161023160208e018e6139b8565b8b61123f565b8d8a8a898e8561024a60208301836139b8565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661028760408801602089016139e3565b8961029560408a018a613a00565b6040516102a89796959493929190613a70565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d461052a565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610554565b61030e83610575565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b60006103596112e7565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106a1565b9050600061039f6103956106a1565b84600460016106d2565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613990565b90506000806000806103e08e89886112fa565b60098054949850929650909450925083916000906103ff908490613990565b909155506104109050874283610f32565b50600061041e84898d611480565b9050808d10156104415760405163c972651760e01b815260040160405180910390fd5b61044b818c6105ae565b508e905061045b81858b896114b2565b600061046860028861120a565b90508c6104828261047c60208401846139b8565b8561123f565b858b868461049360208601866139b8565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d060408b0160208c016139e3565b6104e4896104de8a8d613ab1565b90610683565b8d6104f260408e018e613a00565b604051610506989796959493929190613ac4565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361054d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b341561057357604051631574f9f360e01b815260040160405180910390fd5b565b600061058460208301836139b8565b6001600160a01b0316036105ab5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b816000806105c260408501602086016139e3565b156105e7576105dd856105d86040870187613a00565b611666565b90935090506105ff565b50346105ff856105fa6040870187613a00565b6117a2565b6106076112e7565b9150801561067a57604051600090339083908381818185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106988383670de0b6b3a76400006117dc565b90505b92915050565b60006106cd427f00000000000000000000000000000000000000000000000000000000000000006117fa565b905090565b600084815260086020526040812060018101546001600160801b03161515806106fa57504286115b1561071357600101546001600160801b03169050610d48565b60008060006107206106a1565b9050600061074e7f00000000000000000000000000000000000000000000000000000000000000008b613990565b90505b818110156107c4576000818152600860205260409020600101546001600160801b0316801561079c576000828152600860205260409020549094506001600160801b031692506107c4565b507f000000000000000000000000000000000000000000000000000000000000000001610751565b83600003610837578893506108346107da611810565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b92505b5061084183611851565b6001850180546001600160801b0319166001600160801b03929092169190911790556108976108907f00000000000000000000000000000000000000000000000000000000000000008b613ab1565b8a84610f32565b6108d5896108cf6108c87f000000000000000000000000000000000000000000000000000000000000000083613990565b429061187f565b84610f32565b6108de88611894565b50600090506008816109107f00000000000000000000000000000000000000000000000000000000000000008d613ab1565b815260208101919091526040016000908120600101546001600160801b0316915061093c60028c61120a565b6000818152600b60205260408120549192508c8c8315610a82576001925060008061096b86898d866000611a38565b9150915080600960008282546109819190613990565b9091555061099d90508660008461099781611b07565b88611b31565b6109a78183613990565b91506109d786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611cab565b91506109eb6109e68385610683565b611cf5565b60068054600290610a0c9084906201000090046001600160701b0316613b0c565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a3982611851565b60068054601090610a5b908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610a8f60018461120a565b6000818152600b60205260409020549091508015610b9e5760019450600080610abc838b8f886001611a38565b915091508060096000828254610ad29190613990565b90915550610aee905083600084610ae881611b07565b8a611d1f565b610af88183613ab1565b9150610b076109e68387610683565b60068054600290610b289084906201000090046001600160701b0316613b0c565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b5582611851565b60068054601090610b77908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bd857610bca610bb087611b07565b610bb983611b07565b610bc39190613b4c565b6000611f10565b8e610bd58482611f4f565b50505b6000610be384612149565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613b6c565b90506001600160a01b03811615610d3657610d335a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612295565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610d60611810565b600254909150610dc5908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000612320565b600254909450610e28908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b9150610e7f8785610e7a857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061234c565b6123b1565b15610e8c57610e8c6123f3565b610e988785888561240c565b91965094509250670de0b6b3a7640000610f1a610eb58784613990565b600254610ed3908890600160801b90046001600160801b0316613ab1565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b1115610f2857610f286123f3565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610f5e5750505050565b6000848152600860205260408120546001600160801b031690819003610fb857610f8783611851565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611036565b611009611004670de0b6b3a7640000610fd18886613ab1565b610fdb9190613b89565b85670de0b6b3a7640000610fef878a613ab1565b610ff99190613b89565b859291906001612458565b611851565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61103f84611851565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110b26110048261109c670de0b6b3a764000086613b89565b6005546001600160801b03169190886001612458565b600580546001600160801b0319166001600160801b03929092169190911790556110db85611851565b600280546000906110f69084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061112384611851565b60028054601090611145908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061117284611851565b61117c9082613b2c565b600380546001600160801b03808416600160801b029116179055905060006111a383612500565b90506111c1816111b287611b07565b6111bc9084613bc0565b611f10565b6111ca84612544565b6111d6576111d66123f3565b60006111e1856125a4565b90508061120157604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b038211156112345760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290611271908490613990565b90915550506000838152600b602052604081208054839290611294908490613990565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60006106cd670de0b6b3a76400006125b1565b600080600080600061130a611810565b60025490915061136f908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006125dd565b93508761137c85896125fe565b111561138a5761138a6123f3565b60025460009081906113ef908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b93506114058a670de0b6b3a7640000868c612613565b5091935090915061141890508183613ab1565b6114229087613ab1565b95508861146f816114698d611437868c613ab1565b8d6114428782612721565b877f0000000000000000000000000000000000000000000000000000000000000000612737565b906125fe565b975090945050505093509350935093565b600061149260408301602084016139e3565b1561149e5750826114ab565b6114a8848461275c565b90505b9392505050565b6002546001600160801b0316838110156114ce576114ce6123f3565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611506908390600f0b612771565b1015611514576115146123f3565b60045461155e9061100490600160801b90046001600160801b0316611541670de0b6b3a764000086613b89565b600554600160801b90046001600160801b03169190896001612458565b600580546001600160801b03928316600160801b02921691909117905561158481611851565b600280546001600160801b0319166001600160801b03929092169190911790556115ad85611851565b600280546010906115cf908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506115fc85611851565b6004805460109061161e908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061164d83612500565b90506111c18161165c88611b07565b6111bc9084613b4c565b60008061169e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088612797565b6116fe7f00000000000000000000000000000000000000000000000000000000000000006116cd876001613990565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612804565b604051636e553f6560e01b8152600481018690523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af115801561176e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117929190613be8565b925060009150505b935093915050565b6117d76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612797565b505050565b60008260001904841183021582026117f357600080fd5b5091020490565b60006118068284613c17565b6106989084613ab1565b6002546004546000916106cd916001600160801b0390911690600f0b612771565b6000611848826118428588886117dc565b90612894565b95945050505050565b60006001600160801b0382111561187b57604051630f0af95160e11b815260040160405180910390fd5b5090565b600081831161188e5782610698565b50919050565b60065460009081906118b7908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611a335760006118e18383613ab1565b90506118f061100482866128ff565b60068054601090611912908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061194b858361275c90919063ffffffff16565b90506000611979827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050806009600082825461198d9190613990565b9091555061199d90508183613ab1565b91506119a882611851565b600280546000906119c39084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506119f082612914565b60048054600090611a05908490600f0b613c2b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611a45878561275c565b91506000611a73837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611a9f817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611ac257611ab18282613ab1565b611abb9084613ab1565b9250611ad9565b611acc8282613ab1565b611ad69084613990565b92505b86861015611afc57611aec8387896117dc565b9250611af98287896117dc565b91505b509550959350505050565b60006001600160ff1b0382111561187b5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611b7a61100482611b5d670de0b6b3a764000086613b89565b600554600160801b90046001600160801b031691908a6000612458565b600580546001600160801b03928316600160801b029216919091179055611ba086611851565b611baa9082613ba0565b600480546001600160801b03928316600160801b029216919091179055611bd084611851565b60028054600090611beb9084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c188361293e565b60048054600090611c2d908490600f0b613c2b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611c5d85611851565b60028054601090611c7f908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611cc384611cbd8a888a6117dc565b9061275c565b9050611cd08884866117dc565b611cda9082613990565b905086811115611cea5786810391505b509695505050505050565b60006001600160701b0382111561187b5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611d6157507f0000000000000000000000000000000000000000000000000000000000000000611d5f8583613ab1565b105b15611d6e57611d6e6123f3565b6004549084900390600f0b611d838482613b4c565b905083611d8f86611b07565b138015611dc457507f0000000000000000000000000000000000000000000000000000000000000000611dc28383612771565b105b15611dd157611dd16123f3565b600354600160801b90046001600160801b0316611e1361100482611dfd670de0b6b3a764000088613b89565b6005546001600160801b031691908c6000612458565b600580546001600160801b0319166001600160801b0392909216919091179055611e3d8882613ab1565b9050611e4881611851565b600380546001600160801b03928316600160801b029216919091179055611e6e83611851565b600280546001600160801b0319166001600160801b0392909216919091179055611e978261293e565b600480546001600160801b0319166001600160801b0392909216919091179055611ec087611851565b60028054601090611ee2908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f2b90611004906001600160801b0316848461297a565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611f9a916001600160801b031690613ab1565b905080600003611fae57600191505061069b565b6000611fb9856129e1565b905080600003611fce5760019250505061069b565b600080611fdc838589612a7d565b9150915080611ff257600094505050505061069b565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161202e929190613cd6565b6040805180830381865af415801561204a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206e9190613d4c565b9150915061208c61207e82611b07565b61208790613d70565b612bf1565b9250826120a2576000965050505050505061069b565b6120ab82611851565b600780546000906120c69084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120f381611851565b60078054601090612115908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61217287612d89565b6040518263ffffffff1660e01b815260040161218e9190613d8c565b6040805180830381865af41580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce9190613d9b565b91509150806121e4575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161224a91613990565b6122549190613ab1565b90508060000361226c57506000958695509350505050565b600080871161227c576000612287565b6122878488846117dc565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156122bb576122bb613dcb565b6040519080825280601f01601f1916602001820160405280156122e5576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612306578692505b828152826000602083013e90999098509650505050505050565b600061234187878761233a88670de0b6b3a7640000613ab1565b8787612ec3565b979650505050505050565b60006114a861238d61236684670de0b6b3a7640000613ab1565b611469670de0b6b3a764000061237c818a6128ff565b6123869190613ab1565b87906125fe565b61239f90670de0b6b3a7640000613990565b611cbd84670de0b6b3a7640000613ab1565b6000806123e8856123c0611810565b6123ca9190613990565b600254610ed3908790600160801b90046001600160801b0316613ab1565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061241f898789612ee6565b909250905061242e8289613ab1565b9750600061243d82888a6117dc565b9050612449818b613ab1565b9a989950979650505050505050565b600082600003612469575084611848565b81156124bc5761249a61247c8487613990565b6124868587610683565b612490888a610683565b611cbd9190613990565b905060006124a8858861187f565b9050808210156124b6578091505b50611848565b8285036124cb57506000611848565b6124f66124d88487613ab1565b6124e285876125fe565b6124ec888a610683565b611cbd9190613ab1565b9695505050505050565b6000612528600b600061251460028661120a565b815260200190815260200160002054611b07565b61253a600b600061251460018761120a565b61069b9190613b4c565b60006125707f0000000000000000000000000000000000000000000000000000000000000000836125fe565b60035461258691906001600160801b0316613990565b60025461259c906001600160801b031684610683565b101592915050565b600061069b826004611f4f565b600061069b7f000000000000000000000000000000000000000000000000000000000000000083612f66565b60006123418787876125f788670de0b6b3a7640000613ab1565b8787612fd2565b60006106988383670de0b6b3a7640000612fe3565b6000808080612664878661265d8b6114696126368c670de0b6b3a7640000613ab1565b7f0000000000000000000000000000000000000000000000000000000000000000906125fe565b9190612fe3565b9350612690847f0000000000000000000000000000000000000000000000000000000000000000610683565b915060006126b16126a989670de0b6b3a7640000613ab1565b8a9088612fe3565b90506126dd817f00000000000000000000000000000000000000000000000000000000000000006125fe565b9350612709847f0000000000000000000000000000000000000000000000000000000000000000610683565b6127139084613990565b915050945094509450949050565b60008183116127305781610698565b5090919050565b60008061274f846127498a888a612fe3565b906128ff565b9050611cd0888486612fe3565b600061069883670de0b6b3a7640000846117dc565b60008061277e8484613009565b909250905080612790576127906123f3565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526127fe9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613045565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261285584826130ad565b6127fe576040516001600160a01b0384811660248301526000604483015261288a91869182169063095ea7b3906064016127cc565b6127fe8482613045565b6000816000036128ad5750670de0b6b3a764000061069b565b826000036128bd5750600061069b565b60006128c883611b07565b905060006128dd6128d886611b07565b613150565b90508181026128f4670de0b6b3a764000082613de1565b90506124f681613376565b600061069883670de0b6b3a764000084612fe3565b600060016001607f1b0382111561187b5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b031982128061295c575060016001607f1b0382135b1561187b5760405163a5353be560e01b815260040160405180910390fd5b60008061298884600061350b565b61299384600061350b565b61299d9190613b4c565b905060008113156129b9576129b28186613990565b94506129d8565b60008112156129d8576129cb81613d70565b6129d59086613ab1565b94505b50929392505050565b60035460009081906129fc906001600160801b0316846128ff565b9050612a287f000000000000000000000000000000000000000000000000000000000000000082613990565b6002546001600160801b0316111561188e576002547f000000000000000000000000000000000000000000000000000000000000000090612a739083906001600160801b0316613ab1565b6114ab9190613ab1565b612a85613868565b600080612a9184612d89565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612acc9190613d8c565b6040805180830381865af4158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190613d9b565b9350905082612b2157506000915061179a9050565b6000612b48612b4384610160015185610140015161068390919063ffffffff16565b611b07565b612b68612b438561012001518661010001516125fe90919063ffffffff16565b612b729190613b4c565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104769084906004016139e1565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b791906139f0565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b918591016139e1565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906139f0565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613950565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613a1e565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d919061393d565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f6020850185613a1e565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613a49565b866107ca60408c018c613a66565b6040516107dd9796959493929190613aad565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613b01565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612459929190613c62565b6040805180830381865af4158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613cd8565b915091506124b76124a9826117c5565b6124b290613cfc565b612a5d565b9250826124cd576000965050505050505061144c565b6124d68261193c565b600780546000906124f19084906001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061251e8161193c565b60078054601090612540908490600160801b90046001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61259d8761168b565b6040518263ffffffff1660e01b81526004016125b991906139e1565b6040805180830381865af41580156125d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f99190613d18565b915091508061260f575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126759161393d565b61267f9190613950565b90508060000361269757506000958695509350505050565b60008087116126a75760006126b2565b6126b2848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126e6576126e6613d48565b6040519080825280601f01601f191660200182016040528015612710576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612731578692505b828152826000602083013e9093509150505b9550959350505050565b60008060008361275c866117c5565b6127669190613b86565b9050600081121561277e576000809250925050610d57565b946001945092505050565b600080600061279b8888888888613094565b905060006127c6670de0b6b3a76400006127b58888612e4a565b6127bf919061393d565b8390611837565b9050670de0b6b3a764000081106127fa576127f36127ec670de0b6b3a764000089611837565b8290612c0e565b9050612812565b61280f6127ec670de0b6b3a764000089612e4a565b90505b61281c8186611837565b90508881101561283457600080935093505050612743565b97909703976001975095505050505050565b600080600061285889898888886130c3565b9050612872866119b361286b8a8d61393d565b879061210b565b985061287f858a86611819565b985088811015612896576000809250925050611654565b888103670de0b6b3a764000081106128c4576128bd6127ec670de0b6b3a764000089612e4a565b90506128dc565b6128d96127ec670de0b6b3a764000089611837565b90505b808910156128f257600080935093505050611654565b90970398600198509650505050505050565b60008060008060006129178987896130e8565b90925090506129268289613950565b9750600061293582888a611819565b9050612941818b613950565b9a989950979650505050505050565b60008061295e84600061316e565b61296984600061316e565b6129739190613b86565b9050600081131561298f57612988818661393d565b94506129ae565b60008112156129ae576129a181613cfc565b6129ab9086613950565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129df57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a02610d5e565b612a0c9190613b01565b9050808311612a1c576000612a26565b612a268184613950565b91506100916127bf670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b01565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613d5e565b935093509350935080612b565750600098975050505050505050565b868414612b8757612b668461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb857612b9783611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be657612bc88261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c275750670de0b6b3a764000061144c565b82600003612c375750600061144c565b6000612c42836117c5565b90506000612c57612c52866117c5565b613184565b9050818102612c6e670de0b6b3a764000082613d9f565b9050612c79816133aa565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612cea9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061353f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d4184826135a7565b612cea576040516001600160a01b03848116602483015260006044830152612d7691869182169063095ea7b390606401612cb8565b612cea848261353f565b600061144c7f00000000000000000000000000000000000000000000000000000000000000008361364a565b600082600003612dbd575084610078565b8115612e1057612dee612dd0848761393d565b612dda858761210b565b612de4888a61210b565b611685919061393d565b90506000612dfc8588611c96565b905080821015612e0a578091505b50610078565b828503612e1f57506000610078565b610075612e2c8487613950565b612e3685876129b7565b612e40888a61210b565b6116859190613950565b600061009183670de0b6b3a7640000846129c8565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612ea4906001600160801b031684612e4a565b9050612ed07f00000000000000000000000000000000000000000000000000000000000000008261393d565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f1b9083906001600160801b0316613950565b6100919190613950565b612f2d61380f565b600080612f398461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f7491906139e1565b6040805180830381865af4158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb49190613d18565b9350905082612fc9575060009150611aed9050565b6000612feb61161684610160015185610140015161210b90919063ffffffff16565b61300b6116168561012001518661010001516129b790919063ffffffff16565b6130159190613b86565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130a08585612c0e565b6130b96130b1866119b3868b61210b565b859085611819565b610075919061393d565b60006130cf8585612c0e565b6130b96130e0866119b3868b6129b7565b8590856129c8565b6000806131388561313285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613128818c612e4a565b6131329190613950565b906129b7565b9150613164827f000000000000000000000000000000000000000000000000000000000000000061210b565b9050935093915050565b600081831361317d5781610091565b5090919050565b60008082136131a65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132299084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133c557506000919050565b680755bf798b4a1bf1e582126133ee576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c7974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006135546001600160a01b038416836136b6565b905080516000141580156135795750808060200190518101906135779190613dcd565b155b15611b2a57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516135c49190613dea565b6000604051808303816000865af19150503d8060008114613601576040519150601f19603f3d011682016040523d82523d6000602084013e613606565b606091505b50915091508180156136305750805115806136305750808060200190518101906136309190613dcd565b80156100785750505050506001600160a01b03163b151590565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009191906139f0565b60606100918383600084600080856001600160a01b031684866040516136dc9190613dea565b60006040518083038185875af1925050503d8060008114613719576040519150601f19603f3d011682016040523d82523d6000602084013e61371e565b606091505b5091509150612c7986838360608261373e5761373982613785565b610091565b815115801561375557506001600160a01b0384163b155b1561377e57604051639996b31560e01b81526001600160a01b038516600482015260240161359e565b5080610091565b8051156137955780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806138236137ae565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561388b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156138be57600080fd5b6138ca88828901613861565b9150509295509295909350565b6000806000606084860312156138ec57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561391157600080fd5b61391d86828701613861565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c613927565b8181038181111561144c5761144c613927565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c8284613963565b600060208284031215613a0257600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b600060208284031215613a3057600080fd5b813561009181613a09565b8015158114610c3a57600080fd5b600060208284031215613a5b57600080fd5b813561009181613a3b565b6000808335601e19843603018112613a7d57600080fd5b83018035915067ffffffffffffffff821115613a9857600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c613927565b600080600060608486031215613b2d57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561193557611935613927565b6001600160801b0381811683821601908082111561193557611935613927565b818103600083128015838313168383128216171561193557611935613927565b600060208284031215613bb857600080fd5b815161009181613a09565b8082018281126000831280158216821582161715613be357613be3613927565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613c1057613c10613beb565b500690565b6001600160801b0382811682821603908082111561193557611935613927565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c613927565b60006102a082019050613c76828551613963565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613ceb57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d1157613d11613927565b5060000390565b60008060408385031215613d2b57600080fd5b825191506020830151613d3d81613a3b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d7457600080fd5b8451935060208501519250604085015191506060850151613d9481613a3b565b939692955090935050565b600082613dae57613dae613beb565b600160ff1b821460001984141615613dc857613dc8613927565b500590565b600060208284031215613ddf57600080fd5b815161009181613a3b565b6000825160005b81811015613e0b5760208186018101518583015201613df1565b50600092019182525091905056fea26469706673582212205d3868cdd879d843240afe9b100adac45513a8ccb979bbb1bae5fb59005cc27f64736f6c63430008160033a2646970667358221220ce600b888b405c1dba37a29af16389ee4ff2229e89ba62d42a4a6156c7c1531a64736f6c63430008160033608060405234801561001057600080fd5b506139d1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c98b3c614610030575b600080fd5b61004361003e36600461022a565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60408051336020820152908101829052600090606001604051602081830303815290604052805190602001208585604051610099906100ce565b6100a4929190610386565b8190604051809103906000f59050801580156100c4573d6000803e3d6000fd5b5095945050505050565b6134e4806104b883390190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715610115576101156100db565b60405290565b80356001600160a01b038116811461013257600080fd5b919050565b60006080828403121561014957600080fd5b6040516080810181811067ffffffffffffffff8211171561016c5761016c6100db565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f8301126101ae57600080fd5b813567ffffffffffffffff808211156101c9576101c96100db565b604051601f8301601f19908116603f011681019082821181831017156101f1576101f16100db565b8160405283815286602085880101111561020a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036102c081121561024257600080fd5b6102608082121561025257600080fd5b61025a6100f1565b91506102658761011b565b82526102736020880161011b565b60208301526102846040880161011b565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102ed81890161011b565b908301526101806102ff88820161011b565b908301526101a061031188820161011b565b908301526101c061032388820161011b565b908301526101e061033689898301610137565b818401525081955061034981880161011b565b9450505061028085013567ffffffffffffffff81111561036857600080fd5b6103748782880161019d565b949793965093946102a0013593505050565b82516001600160a01b03168152610280810160208401516103b260208401826001600160a01b03169052565b5060408401516103cd60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161043f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe6102806040523480156200001257600080fd5b50604051620034e4380380620034e48339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516130cc62000418600039600050506000505060006109c10152600050506000818161026d0152611f850152600081816117cb0152818161182e01528181611b6a01528181611ba601528181611d9e0152611f5f01526000818161056f0152611f39015260006113a0015260006114fb01526000818161073301526114cf015260005050600081816105900152611fab01526000818161066b01526124550152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600081816110db015281816122e70152818161233b01526123b70152600050506130cc6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612b2a565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612b81565b6100b5565b005b610059610095366004612b2a565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612bb8565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612be3565b61017160408c018c612c00565b60405161018396959493929190612c70565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612cc0565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612bb8565b88610ee8565b60006103066102fd6020870187612bb8565b88848989610ad0565b90945090506103158188612cea565b9250600061032283610f88565b5090506103326020870187612bb8565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612be3565b8a888e80604001906103829190612c00565b604051610396989796959493929190612cfd565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612bb8565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611100565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612d45565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61111d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061113e565b92505b506105c18361115e565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612cea565b8a8461118c565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612d45565b42906112ca565b8461118c565b61065e886112df565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612cea565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611483565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d8660006114b8565b9150915080600960008282546107019190612d45565b9091555061071d90508660008461071781611587565b886115b1565b6107278183612d45565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061172b565b915061076b6107668385611775565b61178a565b6006805460029061078c9084906201000090046001600160701b0316612d58565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261115e565b600680546010906107db908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611483565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f8860016114b8565b9150915080600960008282546108529190612d45565b9091555061086e90508360008461086881611587565b8a6117b4565b6108788183612cea565b91506108876107668387611775565b600680546002906108a89084906201000090046001600160701b0316612d58565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261115e565b600680546010906108f7908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611587565b61093983611587565b6109439190612d98565b60006119a5565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612db8565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119e4565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611a6f565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611a7c565b9050610b568361115e565b610b609083612dd5565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161115e565b60078054601090610bab908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611a9a565b9350610be68684611b33565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612cea565b905080600003610c72576001915050610e08565b6000610c7d85611b48565b905080600003610c9257600192505050610e08565b600080610ca0838589611be4565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612e73565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612ee9565b91509150610d50610d4282611587565b610d4b90612f0d565b611d58565b925082610d665760009650505050505050610e08565b610d6f8261115e565b60078054600090610d8a9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161115e565b60078054601090610dd9908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612cea565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612d45565b90915550506000838152600b602052604081208054839290610f3d908490612d45565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611ef0565b6040518263ffffffff1660e01b8152600401610fcd9190612f29565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612f38565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612d45565b6110939190612cea565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611a7c565b976001975095505050505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000008361202a565b600061110c8284612cc0565b6111169084612cea565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612097565b60006111558261114f858888611a7c565b906120bd565b95945050505050565b60006001600160801b0382111561118857604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036111b85750505050565b6000848152600860205260408120546001600160801b031690819003611212576111e18361115e565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611290565b61126361125e670de0b6b3a764000061122b8886612cea565b6112359190612f68565b85670de0b6b3a7640000611249878a612cea565b6112539190612f68565b859291906001612132565b61115e565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112998461115e565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116112d95782611116565b50919050565b6006546000908190611302908490600160801b90046001600160801b0316611775565b6006546201000090046001600160701b0316925090508181111561147e57600061132c8383612cea565b905061133b61125e82866121d0565b6006805460109061135d908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061139685836121e590919063ffffffff16565b905060006113c4827f0000000000000000000000000000000000000000000000000000000000000000611775565b905080600960008282546113d89190612d45565b909155506113e890508183612cea565b91506113f38261115e565b6002805460009061140e9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061143b826121fa565b60048054600090611450908490600f0b612f7f565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114ad5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806114c587856121e5565b915060006114f3837f0000000000000000000000000000000000000000000000000000000000000000611775565b905061151f817f0000000000000000000000000000000000000000000000000000000000000000611775565b91508315611542576115318282612cea565b61153b9084612cea565b9250611559565b61154c8282612cea565b6115569084612d45565b92505b8686101561157c5761156c838789611a7c565b9250611579828789611a7c565b91505b509550959350505050565b60006001600160ff1b038211156111885760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115fa61125e826115dd670de0b6b3a764000086612f68565b600554600160801b90046001600160801b031691908a6000612132565b600580546001600160801b03928316600160801b0292169190911790556116208661115e565b61162a9082612dd5565b600480546001600160801b03928316600160801b0292169190911790556116508461115e565b6002805460009061166b9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061169883612224565b600480546000906116ad908490600f0b612f7f565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116dd8561115e565b600280546010906116ff908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117438461173d8a888a611a7c565b906121e5565b9050611750888486611a7c565b61175a9082612d45565b90508681111561176a5786810391505b509695505050505050565b60006111168383670de0b6b3a7640000611a7c565b60006001600160701b038211156111885760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117f657507f00000000000000000000000000000000000000000000000000000000000000006117f48583612cea565b105b1561180357611803612260565b6004549084900390600f0b6118188482612d98565b90508361182486611587565b13801561185957507f00000000000000000000000000000000000000000000000000000000000000006118578383612097565b105b1561186657611866612260565b600354600160801b90046001600160801b03166118a861125e82611892670de0b6b3a764000088612f68565b6005546001600160801b031691908c6000612132565b600580546001600160801b0319166001600160801b03929092169190911790556118d28882612cea565b90506118dd8161115e565b600380546001600160801b03928316600160801b0292169190911790556119038361115e565b600280546001600160801b0319166001600160801b039290921691909117905561192c82612224565b600480546001600160801b0319166001600160801b03929092169190911790556119558761115e565b60028054601090611977908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119c09061125e906001600160801b03168484612279565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a0a57611a0a612fac565b6040519080825280601f01601f191660200182016040528015611a34576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611a55578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611a9357600080fd5b5091020490565b600080611aa78585611775565b9050611ab2816122e0565b945084600003611ac6576000915050611116565b849150611ad96040840160208501612be3565b15611b0857611b0185611aef6020860186612bb8565b611afc6040870187612c00565b61230c565b9150611b2b565b611b2b85611b196020860186612bb8565b611b266040870187612c00565b6123aa565b509392505050565b60006111168383670de0b6b3a76400006123e4565b6003546000908190611b63906001600160801b0316846121d0565b9050611b8f7f000000000000000000000000000000000000000000000000000000000000000082612d45565b6002546001600160801b031611156112d9576002547f000000000000000000000000000000000000000000000000000000000000000090611bda9083906001600160801b0316612cea565b6111169190612cea565b611bec612a77565b600080611bf884611ef0565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c339190612f29565b6040805180830381865af4158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190612f38565b9350905082611c885750600091506100ad9050565b6000611caf611caa84610160015185610140015161177590919063ffffffff16565b611587565b611ccf611caa856101200151866101000151611b3390919063ffffffff16565b611cd99190612d98565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e55929190613a36565b6040805180830381865af4158015611e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e959190613aac565b91509150611eb3611ea582611377565b611eae90613ad0565b612a78565b925082611ec95760009650505050505050611371565b611ed282611a50565b60078054600090611eed9084906001600160801b03166138ed565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f1a81611a50565b60078054601090611f3c908490600160801b90046001600160801b03166138ed565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f9987612c10565b6040518263ffffffff1660e01b8152600401611fb59190613aec565b6040805180830381865af4158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff59190613afb565b915091508061200b575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161207191613709565b61207b91906138ba565b90508060000361209357506000958695509350505050565b60008087116120a35760006120ae565b6120ae84888461258f565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156120e2576120e2613b2b565b6040519080825280601f01601f19166020018201604052801561210c576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561212d578692505b828152826000602083013e90999098509650505050505050565b6000806121526105ca565b905080831161216257600061216c565b61216c81846138ba565b91506115de827f0000000000000000000000000000000000000000000000000000000000000000612822565b600080806121b96121b188670de0b6b3a76400006138ba565b899087612d4a565b905086156121fb576121cb888861257a565b91506121ec8a8a846121e58a670de0b6b3a76400006138ba565b8989612d70565b92506121f88382613709565b90505b9750975097945050505050565b600061222661221f84670de0b6b3a76400006138ba565b839061257a565b6115de90670de0b6b3a76400006138ba565b60008061226f85612247611a18565b6122519190613709565b600254610ff2908790600160801b90046001600160801b03166138ba565b909210949350505050565b60008080806122d187866122ca8b6122c461229d8c670de0b6b3a76400006138ba565b7f00000000000000000000000000000000000000000000000000000000000000009061257a565b9061257a565b9190612d4a565b93506122fd847f00000000000000000000000000000000000000000000000000000000000000006115e5565b9150600061231e61231689670de0b6b3a76400006138ba565b8a9088612d4a565b905061234a817f000000000000000000000000000000000000000000000000000000000000000061257a565b9350612376847f00000000000000000000000000000000000000000000000000000000000000006115e5565b6123809084613709565b915050945094509450949050565b600080600080600080888810156123fd5786156123b3576123b08d898b61258f565b9c505b6123be8c898b61258f565b9b506123c98b611377565b6123d28d611377565b6123dc919061371c565b90506123e98b898b61258f565b9a506123f68a898b61258f565b995061241c565b6124068b611377565b61240f8d611377565b612419919061371c565b90505b9b9c9a9b999a975050505050505050565b60008260000361243e5750846124ce565b81156124915761246f6124518487613709565b61245b85876115e5565b612465888a6115e5565b611d149190613709565b9050600061247d8588611a7a565b90508082101561248b578091505b506124ce565b8285036124a0575060006124ce565b6124cb6124ad84876138ba565b6124b7858761257a565b6124c1888a6115e5565b611d1491906138ba565b90505b95945050505050565b600060016001607f1b03198212806124f5575060016001607f1b0382135b156113a15760405163a5353be560e01b815260040160405180910390fd5b600080612521846000612d93565b61252c846000612d93565b612536919061371c565b905060008113156125525761254b8186613709565b9450612571565b60008112156125715761256481613ad0565b61256e90866138ba565b94505b50929392505050565b60006115de8383670de0b6b3a7640000612d4a565b60008260001904841183021582026125a657600080fd5b5091020490565b60006113717f000000000000000000000000000000000000000000000000000000000000000083612da9565b604051635d043b2960e11b8152600481018590526001600160a01b0384811660248301523060448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303816000875af1158015612653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100819190613b41565b6126ab6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612dd9565b50505050565b600080806126d26126ca88670de0b6b3a76400006138ba565b89908761258f565b905086156121fb576126e488886115e5565b91506121ec8a8a846126fe8a670de0b6b3a76400006138ba565b8989612e30565b6000806127128484612e41565b90925090508061272457612724611444565b5092915050565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a906024015b602060405180830381865afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613b41565b6000816000036127b15750670de0b6b3a7640000611371565b826000036127c157506000611371565b60006127cc83611377565b905060006127e16127dc86611377565b612e80565b90508181026127f8670de0b6b3a764000082613b5a565b9050612803816130a6565b9695505050505050565b60006115de83670de0b6b3a764000084612d4a565b60006115de83670de0b6b3a76400008461258f565b600060016001607f1b038211156113a15760405163a5353be560e01b815260040160405180910390fd5b600354600090819061287c906001600160801b03168461280d565b90506128a87f000000000000000000000000000000000000000000000000000000000000000082613709565b6002546001600160801b03161115611a89576002547f0000000000000000000000000000000000000000000000000000000000000000906128f39083906001600160801b03166138ba565b6115de91906138ba565b6129056135e1565b60008061291184612c10565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161294c9190613aec565b6040805180830381865af4158015612968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298c9190613afb565b93509050826129a1575060009150612a709050565b60006129c86129c38461016001518561014001516115e590919063ffffffff16565b611377565b6129e86129c385610120015186610100015161257a90919063ffffffff16565b6129f2919061371c565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b559190613b88565b935093509350935080612b715750600098975050505050505050565b868414612ba257612b8184611a50565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bd357612bb2836124d7565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c0157612be382611a50565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612c18613633565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612d10911661323b565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612d429290041661323b565b905292915050565b6000826000190484118302158202612d6157600080fd5b50910281810615159190040190565b600080612d818888888888886132b1565b909250905080611d4157611d41611444565b6000818313612da257816115de565b5090919050565b6040516363737ac960e11b8152600481018290526000906001600160a01b0384169063c6e6f59290602401612757565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612e2b908490613392565b505050565b600080612d818888888888886133fa565b600080600083612e5086611377565b612e5a919061371c565b90506000811215612e72576000809250925050612e79565b9150600190505b9250929050565b6000808213612ea25760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612f259084901c611377565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136130c157506000919050565b680755bf798b4a1bf1e582126130ea576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061280374029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611377565b600080670de0b6b3a764000061324f6105ca565b613259919061392a565b9050808311613269576000613273565b61327381846138ba565b91506115de6132aa670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061392a565b8390612822565b60008060006132c389898888886134ba565b9050868810156132da576000809250925050613387565b96869003966132e98887612798565b975087811015613300576000809250925050613387565b87810361330e818688612d4a565b9050670de0b6b3a764000081106133425761333b613334670de0b6b3a76400008961280d565b8290612798565b905061335a565b613357613334670de0b6b3a764000089612822565b90505b613364818661280d565b90508981101561337c57600080935093505050613387565b899003925060019150505b965096945050505050565b60006133a76001600160a01b038416836134e9565b905080516000141580156133cc5750808060200190518101906133ca9190613bbe565b155b15612e2b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b600080600061340c89898888886134ba565b905061341c86611a4a898b613709565b975087811015613433576000809250925050613387565b878103613441818688612d4a565b9050670de0b6b3a7640000811061346e57613467613334670de0b6b3a76400008961280d565b9050613486565b613483613334670de0b6b3a764000089612822565b90505b613490818661280d565b9050808a10156134a857600080935093505050613387565b90980398600198509650505050505050565b60006134c68585612798565b6134df6134d786611a4a868b61257a565b859085612d4a565b6124cb9190613709565b60606115de8383600084600080856001600160a01b0316848660405161350f9190613bdb565b60006040518083038185875af1925050503d806000811461354c576040519150601f19603f3d011682016040523d82523d6000602084013e613551565b606091505b50915091506128038683836060826135715761356c826135b8565b6115de565b815115801561358857506001600160a01b0384163b155b156135b157604051639996b31560e01b81526001600160a01b03851660048201526024016133f1565b50806115de565b8051156135c85780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806135f5613633565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080600080608085870312156136aa57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156136d657600080fd5b8501606081880312156136e857600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611371576113716136f3565b8181036000831280158383131683831282161715612724576127246136f3565b6001600160a01b03811681146105af57600080fd5b60006020828403121561376357600080fd5b81356115de8161373c565b80151581146105af57600080fd5b60006020828403121561378e57600080fd5b81356115de8161376e565b6000808335601e198436030181126137b057600080fd5b83018035915067ffffffffffffffff8211156137cb57600080fd5b602001915036819003821315612e7957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c0820152600061384360e0830184866137e0565b9a9950505050505050505050565b8082018281126000831280158216821582161715613871576138716136f3565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a082015260006138ad60c0830184866137e0565b9998505050505050505050565b81810381811115611371576113716136f3565b6001600160701b03818116838216019080821115612724576127246136f3565b6001600160801b03818116838216019080821115612724576127246136f3565b60006020828403121561391f57600080fd5b81516115de8161373c565b8082028115828204841417611371576113716136f3565b6001600160801b03828116828216039080821115612724576127246136f3565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715611371576113716136f3565b634e487b7160e01b600052601260045260246000fd5b6000826139b3576139b361398e565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613a4a8285516139b8565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613abf57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613ae557613ae56136f3565b5060000390565b610180810161137182846139b8565b60008060408385031215613b0e57600080fd5b825191506020830151613b208161376e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613b5357600080fd5b5051919050565b600082613b6957613b6961398e565b600160ff1b821460001984141615613b8357613b836136f3565b500590565b60008060008060808587031215613b9e57600080fd5b84519350602085015192506040850151915060608501516136e88161376e565b600060208284031215613bd057600080fd5b81516115de8161376e565b6000825160005b81811015613bfc5760208186018101518583015201613be2565b50600092019182525091905056fea26469706673582212201b73e58470df05647285f1015de2e1dc71968edb26bb39f47c400b4d8319456d64736f6c634300081600336102806040523480156200001257600080fd5b5060405162004386380380620043868339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613ec7620004bf60003960005050600050506000610c4101526000505060008181610100015281816103100152612e1e0152600081816114d801528181611d3601528181611d990152818161254b01528181612a0301528181612a3f01528181612c370152612df80152600081816107ef01528181610da101528181610de301528181610ed50152818161134b015281816113aa0152612dd201526000611955015260008181611a7b0152818161266c015281816126e50152612f380152600081816109b301528181610e560152818161144501528181611a4f01526126b9015260008181610e35015281816126380152612ef401526000818161081001528181610d7f01528181610e0401528181610ef601528181611329015281816113cb0152612e440152600081816101de015281816103a8015281816108eb01526135650152600081816106a9015281816107290152818161079f0152818161086b01526108a30152600081816116a30152818161171d015281816117af01526125b801526000818161167601526116d70152613ec76000f3fe6080604052600436106100295760003560e01c8063cba2e58d1461002e578063dbbe80701461005a575b600080fd5b61004161003c36600461391b565b61006d565b6040805192835260208301919091520160405180910390f35b61004161006836600461391b565b61008a565b60008061007c86868686610099565b915091505b94509492505050565b60008061007c868686866102c9565b6000806100a461052a565b600654610100900460ff16156100cd576040516321081abf60e01b815260040160405180910390fd5b6100d5610554565b6100de83610575565b6000806100eb88866105ae565b909250905060006100fc8383610683565b90507f000000000000000000000000000000000000000000000000000000000000000081101561013f5760405163211ddda360e11b815260040160405180910390fd5b86821015610160576040516342af972b60e01b815260040160405180910390fd5b600061016a6106a1565b905061017a8184600460016106d2565b50600080600061018a8787610d50565b919a5091945090925090508b8810156101b65760405163c972651760e01b815260040160405180910390fd5b81600960008282546101c89190613990565b909155506101d99050844283610f32565b6102037f000000000000000000000000000000000000000000000000000000000000000085613990565b98506102118389888c611070565b600061021e60018b61120a565b90506102378161023160208e018e6139b8565b8b61123f565b8d8a8a898e8561024a60208301836139b8565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661028760408801602089016139e3565b8961029560408a018a613a00565b6040516102a89796959493929190613a70565b60405180910390a350909b5050505050505050505050506100816001600055565b6000806102d461052a565b600654610100900460ff16156102fd576040516321081abf60e01b815260040160405180910390fd5b610305610554565b61030e83610575565b7f000000000000000000000000000000000000000000000000000000000000000086101561034f5760405163211ddda360e11b815260040160405180910390fd5b60006103596112e7565b90508481101561037c576040516342af972b60e01b815260040160405180910390fd5b60006103866106a1565b9050600061039f6103956106a1565b84600460016106d2565b905060006103cd7f000000000000000000000000000000000000000000000000000000000000000084613990565b90506000806000806103e08e89886112fa565b60098054949850929650909450925083916000906103ff908490613990565b909155506104109050874283610f32565b50600061041e84898d611480565b9050808d10156104415760405163c972651760e01b815260040160405180910390fd5b61044b818c6105ae565b508e905061045b81858b896114b2565b600061046860028861120a565b90508c6104828261047c60208401846139b8565b8561123f565b858b868461049360208601866139b8565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d060408b0160208c016139e3565b6104e4896104de8a8d613ab1565b90610683565b8d6104f260408e018e613a00565b604051610506989796959493929190613ac4565b60405180910390a350989d50939b5050505050505050505050506100816001600055565b60026000540361054d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b341561057357604051631574f9f360e01b815260040160405180910390fd5b565b600061058460208301836139b8565b6001600160a01b0316036105ab5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b816000806105c260408501602086016139e3565b156105e7576105dd856105d86040870187613a00565b611666565b90935090506105ff565b50346105ff856105fa6040870187613a00565b6117a2565b6106076112e7565b9150801561067a57604051600090339083908381818185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b60006106988383670de0b6b3a76400006117dc565b90505b92915050565b60006106cd427f00000000000000000000000000000000000000000000000000000000000000006117fa565b905090565b600084815260086020526040812060018101546001600160801b03161515806106fa57504286115b1561071357600101546001600160801b03169050610d48565b60008060006107206106a1565b9050600061074e7f00000000000000000000000000000000000000000000000000000000000000008b613990565b90505b818110156107c4576000818152600860205260409020600101546001600160801b0316801561079c576000828152600860205260409020549094506001600160801b031692506107c4565b507f000000000000000000000000000000000000000000000000000000000000000001610751565b83600003610837578893506108346107da611810565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b92505b5061084183611851565b6001850180546001600160801b0319166001600160801b03929092169190911790556108976108907f00000000000000000000000000000000000000000000000000000000000000008b613ab1565b8a84610f32565b6108d5896108cf6108c87f000000000000000000000000000000000000000000000000000000000000000083613990565b429061187f565b84610f32565b6108de88611894565b50600090506008816109107f00000000000000000000000000000000000000000000000000000000000000008d613ab1565b815260208101919091526040016000908120600101546001600160801b0316915061093c60028c61120a565b6000818152600b60205260408120549192508c8c8315610a82576001925060008061096b86898d866000611a38565b9150915080600960008282546109819190613990565b9091555061099d90508660008461099781611b07565b88611b31565b6109a78183613990565b91506109d786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611cab565b91506109eb6109e68385610683565b611cf5565b60068054600290610a0c9084906201000090046001600160701b0316613b0c565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a3982611851565b60068054601090610a5b908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b6000610a8f60018461120a565b6000818152600b60205260409020549091508015610b9e5760019450600080610abc838b8f886001611a38565b915091508060096000828254610ad29190613990565b90915550610aee905083600084610ae881611b07565b8a611d1f565b610af88183613ab1565b9150610b076109e68387610683565b60068054600290610b289084906201000090046001600160701b0316613b0c565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b5582611851565b60068054601090610b77908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bd857610bca610bb087611b07565b610bb983611b07565b610bc39190613b4c565b6000611f10565b8e610bd58482611f4f565b50505b6000610be384612149565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613b6c565b90506001600160a01b03811615610d3657610d335a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612295565b50505b509b9d50505050505050505050505050505b949350505050565b6000806000806000610d60611810565b600254909150610dc5908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000612320565b600254909450610e28908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b9150610e7f8785610e7a857f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061234c565b6123b1565b15610e8c57610e8c6123f3565b610e988785888561240c565b91965094509250670de0b6b3a7640000610f1a610eb58784613990565b600254610ed3908890600160801b90046001600160801b0316613ab1565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b1115610f2857610f286123f3565b5092959194509250565b600083815260086020526040902054600160801b90046001600160801b0316808303610f5e5750505050565b6000848152600860205260408120546001600160801b031690819003610fb857610f8783611851565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611036565b611009611004670de0b6b3a7640000610fd18886613ab1565b610fdb9190613b89565b85670de0b6b3a7640000610fef878a613ab1565b610ff99190613b89565b859291906001612458565b611851565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61103f84611851565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110b26110048261109c670de0b6b3a764000086613b89565b6005546001600160801b03169190886001612458565b600580546001600160801b0319166001600160801b03929092169190911790556110db85611851565b600280546000906110f69084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061112384611851565b60028054601090611145908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061117284611851565b61117c9082613b2c565b600380546001600160801b03808416600160801b029116179055905060006111a383612500565b90506111c1816111b287611b07565b6111bc9084613bc0565b611f10565b6111ca84612544565b6111d6576111d66123f3565b60006111e1856125a4565b90508061120157604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b60006001600160f81b038211156112345760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290611271908490613990565b90915550506000838152600b602052604081208054839290611294908490613990565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60006106cd670de0b6b3a76400006125b1565b600080600080600061130a611810565b60025490915061136f908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f00000000000000000000000000000000000000000000000000000000000000006125dd565b93508761137c85896125fe565b111561138a5761138a6123f3565b60025460009081906113ef908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611831565b93506114058a670de0b6b3a7640000868c612613565b5091935090915061141890508183613ab1565b6114229087613ab1565b95508861146f816114698d611437868c613ab1565b8d6114428782612721565b877f0000000000000000000000000000000000000000000000000000000000000000612737565b906125fe565b975090945050505093509350935093565b600061149260408301602084016139e3565b1561149e5750826114ab565b6114a8848461275c565b90505b9392505050565b6002546001600160801b0316838110156114ce576114ce6123f3565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611506908390600f0b612771565b1015611514576115146123f3565b60045461155e9061100490600160801b90046001600160801b0316611541670de0b6b3a764000086613b89565b600554600160801b90046001600160801b03169190896001612458565b600580546001600160801b03928316600160801b02921691909117905561158481611851565b600280546001600160801b0319166001600160801b03929092169190911790556115ad85611851565b600280546010906115cf908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506115fc85611851565b6004805460109061161e908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061164d83612500565b90506111c18161165c88611b07565b6111bc9084613b4c565b60008061169e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088612797565b6116fe7f00000000000000000000000000000000000000000000000000000000000000006116cd876001613990565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612804565b604051636e553f6560e01b8152600481018690523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af115801561176e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117929190613be8565b925060009150505b935093915050565b6117d76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612797565b505050565b60008260001904841183021582026117f357600080fd5b5091020490565b60006118068284613c17565b6106989084613ab1565b6002546004546000916106cd916001600160801b0390911690600f0b612771565b6000611848826118428588886117dc565b90612894565b95945050505050565b60006001600160801b0382111561187b57604051630f0af95160e11b815260040160405180910390fd5b5090565b600081831161188e5782610698565b50919050565b60065460009081906118b7908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611a335760006118e18383613ab1565b90506118f061100482866128ff565b60068054601090611912908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061194b858361275c90919063ffffffff16565b90506000611979827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050806009600082825461198d9190613990565b9091555061199d90508183613ab1565b91506119a882611851565b600280546000906119c39084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506119f082612914565b60048054600090611a05908490600f0b613c2b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b600080611a45878561275c565b91506000611a73837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611a9f817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611ac257611ab18282613ab1565b611abb9084613ab1565b9250611ad9565b611acc8282613ab1565b611ad69084613990565b92505b86861015611afc57611aec8387896117dc565b9250611af98287896117dc565b91505b509550959350505050565b60006001600160ff1b0382111561187b5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611b7a61100482611b5d670de0b6b3a764000086613b89565b600554600160801b90046001600160801b031691908a6000612458565b600580546001600160801b03928316600160801b029216919091179055611ba086611851565b611baa9082613ba0565b600480546001600160801b03928316600160801b029216919091179055611bd084611851565b60028054600090611beb9084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c188361293e565b60048054600090611c2d908490600f0b613c2b565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611c5d85611851565b60028054601090611c7f908490600160801b90046001600160801b0316613ba0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b600080611cc384611cbd8a888a6117dc565b9061275c565b9050611cd08884866117dc565b611cda9082613990565b905086811115611cea5786810391505b509695505050505050565b60006001600160701b0382111561187b5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611d6157507f0000000000000000000000000000000000000000000000000000000000000000611d5f8583613ab1565b105b15611d6e57611d6e6123f3565b6004549084900390600f0b611d838482613b4c565b905083611d8f86611b07565b138015611dc457507f0000000000000000000000000000000000000000000000000000000000000000611dc28383612771565b105b15611dd157611dd16123f3565b600354600160801b90046001600160801b0316611e1361100482611dfd670de0b6b3a764000088613b89565b6005546001600160801b031691908c6000612458565b600580546001600160801b0319166001600160801b0392909216919091179055611e3d8882613ab1565b9050611e4881611851565b600380546001600160801b03928316600160801b029216919091179055611e6e83611851565b600280546001600160801b0319166001600160801b0392909216919091179055611e978261293e565b600480546001600160801b0319166001600160801b0392909216919091179055611ec087611851565b60028054601090611ee2908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f2b90611004906001600160801b0316848461297a565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611f9a916001600160801b031690613ab1565b905080600003611fae57600191505061069b565b6000611fb9856129e1565b905080600003611fce5760019250505061069b565b600080611fdc838589612a7d565b9150915080611ff257600094505050505061069b565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161202e929190613cd6565b6040805180830381865af415801561204a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206e9190613d4c565b9150915061208c61207e82611b07565b61208790613d70565b612bf1565b9250826120a2576000965050505050505061069b565b6120ab82611851565b600780546000906120c69084906001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120f381611851565b60078054601090612115908490600160801b90046001600160801b0316613b2c565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61217287612d89565b6040518263ffffffff1660e01b815260040161218e9190613d8c565b6040805180830381865af41580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce9190613d9b565b91509150806121e4575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161224a91613990565b6122549190613ab1565b90508060000361226c57506000958695509350505050565b600080871161227c576000612287565b6122878488846117dc565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156122bb576122bb613dcb565b6040519080825280601f01601f1916602001820160405280156122e5576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612306578692505b828152826000602083013e90999098509650505050505050565b600061234187878761233a88670de0b6b3a7640000613ab1565b8787612ec3565b979650505050505050565b60006114a861238d61236684670de0b6b3a7640000613ab1565b611469670de0b6b3a764000061237c818a6128ff565b6123869190613ab1565b87906125fe565b61239f90670de0b6b3a7640000613990565b611cbd84670de0b6b3a7640000613ab1565b6000806123e8856123c0611810565b6123ca9190613990565b600254610ed3908790600160801b90046001600160801b0316613ab1565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600080600080600061241f898789612ee6565b909250905061242e8289613ab1565b9750600061243d82888a6117dc565b9050612449818b613ab1565b9a989950979650505050505050565b600082600003612469575084611848565b81156124bc5761249a61247c8487613990565b6124868587610683565b612490888a610683565b611cbd9190613990565b905060006124a8858861187f565b9050808210156124b6578091505b50611848565b8285036124cb57506000611848565b6124f66124d88487613ab1565b6124e285876125fe565b6124ec888a610683565b611cbd9190613ab1565b9695505050505050565b6000612528600b600061251460028661120a565b815260200190815260200160002054611b07565b61253a600b600061251460018761120a565b61069b9190613b4c565b60006125707f0000000000000000000000000000000000000000000000000000000000000000836125fe565b60035461258691906001600160801b0316613990565b60025461259c906001600160801b031684610683565b101592915050565b600061069b826004611f4f565b600061069b7f000000000000000000000000000000000000000000000000000000000000000083612f66565b60006123418787876125f788670de0b6b3a7640000613ab1565b8787612fd2565b60006106988383670de0b6b3a7640000612fe3565b6000808080612664878661265d8b6114696126368c670de0b6b3a7640000613ab1565b7f0000000000000000000000000000000000000000000000000000000000000000906125fe565b9190612fe3565b9350612690847f0000000000000000000000000000000000000000000000000000000000000000610683565b915060006126b16126a989670de0b6b3a7640000613ab1565b8a9088612fe3565b90506126dd817f00000000000000000000000000000000000000000000000000000000000000006125fe565b9350612709847f0000000000000000000000000000000000000000000000000000000000000000610683565b6127139084613990565b915050945094509450949050565b60008183116127305781610698565b5090919050565b60008061274f846127498a888a612fe3565b906128ff565b9050611cd0888486612fe3565b600061069883670de0b6b3a7640000846117dc565b60008061277e8484613009565b909250905080612790576127906123f3565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526127fe9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613045565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261285584826130ad565b6127fe576040516001600160a01b0384811660248301526000604483015261288a91869182169063095ea7b3906064016127cc565b6127fe8482613045565b6000816000036128ad5750670de0b6b3a764000061069b565b826000036128bd5750600061069b565b60006128c883611b07565b905060006128dd6128d886611b07565b613150565b90508181026128f4670de0b6b3a764000082613de1565b90506124f681613376565b600061069883670de0b6b3a764000084612fe3565b600060016001607f1b0382111561187b5760405163a5353be560e01b815260040160405180910390fd5b600060016001607f1b031982128061295c575060016001607f1b0382135b1561187b5760405163a5353be560e01b815260040160405180910390fd5b60008061298884600061350b565b61299384600061350b565b61299d9190613b4c565b905060008113156129b9576129b28186613990565b94506129d8565b60008112156129d8576129cb81613d70565b6129d59086613ab1565b94505b50929392505050565b60035460009081906129fc906001600160801b0316846128ff565b9050612a287f000000000000000000000000000000000000000000000000000000000000000082613990565b6002546001600160801b0316111561188e576002547f000000000000000000000000000000000000000000000000000000000000000090612a739083906001600160801b0316613ab1565b6114ab9190613ab1565b612a85613868565b600080612a9184612d89565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612acc9190613d8c565b6040805180830381865af4158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190613d9b565b9350905082612b2157506000915061179a9050565b6000612b48612b4384610160015185610140015161068390919063ffffffff16565b611b07565b612b68612b438561012001518661010001516125fe90919063ffffffff16565b612b729190613b4c565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cce9190613e0f565b935093509350935080612cea5750600098975050505050505050565b868414612d1b57612cfa84611851565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612d4c57612d2b8361293e565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612d7a57612d5c82611851565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612d916138ba565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612e89911661351a565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612ebb9290041661351a565b905292915050565b600080612ed4888888888888613590565b909250905080611cea57611cea6123f3565b600080612f308561146985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f26818c6128ff565b6114699190613ab1565b9150612f5c827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015612fae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190613be8565b600080612ed4888888888888613658565b6000826000190484118302158202612ffa57600080fd5b50910281810615159190040190565b60008060008361301886611b07565b6130229190613b4c565b9050600081121561303a57600080925092505061067c565b946001945092505050565b600061305a6001600160a01b03841683613718565b9050805160001415801561307f57508080602001905181019061307d9190613e45565b155b156117d757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516130ca9190613e62565b6000604051808303816000865af19150503d8060008114613107576040519150601f19603f3d011682016040523d82523d6000602084013e61310c565b606091505b50915091508180156131365750805115806131365750808060200190518101906131369190613e45565b80156118485750505050506001600160a01b03163b151590565b60008082136131725760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131f59084901c611b07565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e19821361339157506000919050565b680755bf798b4a1bf1e582126133ba576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906124f674029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b07565b60008183136127305781610698565b600080670de0b6b3a764000061352e6106a1565b6135389190613b89565b9050808311613548576000613552565b6135528184613ab1565b91506114ab613589670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b89565b839061275c565b60008060006135a28989888888613726565b90506135bc866118426135b58a8d613990565b8790610683565b98506135c9858a866117dc565b9850888110156135e057600080925092505061364d565b888103670de0b6b3a764000081106136155761360e613607670de0b6b3a7640000896128ff565b8290612894565b905061362d565b61362a613607670de0b6b3a76400008961275c565b90505b808910156136435760008093509350505061364d565b8803925060019150505b965096945050505050565b600080600061366a8989888888613726565b905061367a86611842898b613990565b97508781101561369157600080925092505061364d565b87810361369f818688612fe3565b9050670de0b6b3a764000081106136cc576136c5613607670de0b6b3a7640000896128ff565b90506136e4565b6136e1613607670de0b6b3a76400008961275c565b90505b6136ee81866128ff565b9050808a10156137065760008093509350505061364d565b90980398600198509650505050505050565b606061069883836000613755565b60006137328585612894565b61374b61374386611842868b6125fe565b859085612fe3565b6124f69190613990565b60608147101561377a5760405163cd78605960e01b81523060048201526024016130a4565b600080856001600160a01b031684866040516137969190613e62565b60006040518083038185875af1925050503d80600081146137d3576040519150601f19603f3d011682016040523d82523d6000602084013e6137d8565b606091505b50915091506124f68683836060826137f8576137f38261383f565b6114ab565b815115801561380f57506001600160a01b0384163b155b1561383857604051639996b31560e01b81526001600160a01b03851660048201526024016130a4565b50806114ab565b80511561384f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610120016040528061387c6138ba565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806000806080858703121561393157600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561395d57600080fd5b85016060818803121561396f57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069b5761069b61397a565b6001600160a01b03811681146105ab57600080fd5b6000602082840312156139ca57600080fd5b81356114ab816139a3565b80151581146105ab57600080fd5b6000602082840312156139f557600080fd5b81356114ab816139d5565b6000808335601e19843603018112613a1757600080fd5b83018035915067ffffffffffffffff821115613a3257600080fd5b60200191503681900382131561067c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201526000613aa460c083018486613a47565b9998505050505050505050565b8181038181111561069b5761069b61397a565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201526000613afe60e083018486613a47565b9a9950505050505050505050565b6001600160701b038181168382160190808211156127905761279061397a565b6001600160801b038181168382160190808211156127905761279061397a565b81810360008312801583831316838312821617156127905761279061397a565b600060208284031215613b7e57600080fd5b81516114ab816139a3565b808202811582820484141761069b5761069b61397a565b6001600160801b038281168282160390808211156127905761279061397a565b8082018281126000831280158216821582161715613be057613be061397a565b505092915050565b600060208284031215613bfa57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082613c2657613c26613c01565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069b5761069b61397a565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b60006102a082019050613cea828551613c58565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613d5f57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d8557613d8561397a565b5060000390565b610180810161069b8284613c58565b60008060408385031215613dae57600080fd5b825191506020830151613dc0816139d5565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082613df057613df0613c01565b600160ff1b821460001984141615613e0a57613e0a61397a565b500590565b60008060008060808587031215613e2557600080fd5b845193506020850151925060408501519150606085015161396f816139d5565b600060208284031215613e5757600080fd5b81516114ab816139d5565b6000825160005b81811015613e835760208186018101518583015201613e69565b50600092019182525091905056fea2646970667358221220847b8a9438e5006811c86481f4fdc09a3aef88e0c62c14b1953a9e46b652df7c64736f6c634300081600336102806040523480156200001257600080fd5b506040516200431e3803806200431e8339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e4f620004cf600039600050506000505060006112f901526000818161030301528181610332015261035f01526000818160de015281816105a9015261172001526000818161085601528181610941015281816109d401528181610add015281816115f1015281816116fa01528181612161015281816121c401528181612aa301528181612eab0152612ee701526000818161013f015281816108c601528181610ea7015281816114b5015281816115190152818161156001526116d401526000611d66015260008181611ec1015261314001526000818161106b0152611e95015260006130f60152600081816101810152818161091901528181610ec801528181611485015281816114e901528181611581015261174601526000818161016001528181610238015281816102d8015281816106f3015281816108f301528181610fa30152612a3901526000818161029701528181610d6601528181610de101528181610e5701528181610f230152610f5b0152600081816119f601528181611a7001528181611b020152612d870152600081816119c90152611a2a0152613e4f6000f3fe6080604052600436106100295760003560e01c80634c2ac1d91461002e57806377d05ff414610053575b600080fd5b61004161003c366004613873565b610066565b60405190815260200160405180910390f35b6100416100613660046138d7565b610081565b60006100758686868686610098565b90505b95945050505050565b600061008e848484610800565b90505b9392505050565b60006100a2610bb9565b600654610100900460ff16156100cb576040516321081abf60e01b815260040160405180910390fd5b6100d3610be3565b6100dc82610c04565b7f000000000000000000000000000000000000000000000000000000000000000086101561011d5760405163211ddda360e11b815260040160405180910390fd5b60006101a561012a610c3d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c63565b9050848110806101b457508381115b156101d257604051633b61151160e11b815260040160405180910390fd5b6000806101df8986610c89565b9150915060006101ed610d5e565b90506101fd818360046001610d8a565b506002546004546003546000928392610267926001600160801b0380841693600f9390930b92600160801b900481169189911661026261025d7f00000000000000000000000000000000000000000000000000000000000000008b61393d565b611408565b611452565b915091508061028957604051630552b01360e31b815260040160405180910390fd5b8b60006102fc6008826102bc7f000000000000000000000000000000000000000000000000000000000000000089613950565b81526020810191909152604001600020546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061165f565b90506103287f00000000000000000000000000000000000000000000000000000000000000008261393d565b88118061038757507f00000000000000000000000000000000000000000000000000000000000000008111801561038757506103847f000000000000000000000000000000000000000000000000000000000000000082613950565b88105b156103a557604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103f1916001600160801b0390911690613950565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061042c90839061393d565b9050600080600061043c8a61168b565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104769084906004016139e1565b602060405180830381865af4158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b791906139f0565b91506104ca6104c58c6117c5565b6117f3565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161052b918591016139e1565b602060405180830381865af4158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906139f0565b92508183101561058f5760405163184d952160e11b815260040160405180910390fd5b6105a5848361059e8187613950565b9190611819565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105e85760405163211ddda360e11b815260040160405180910390fd5b508f6105f4868e611837565b10156106135760405163c972651760e01b815260040160405180910390fd5b61063160008e600001602081019061062b9190613a1e565b8e61184c565b61063a896118f4565b95508561065a57604051638bdf918d60e01b815260040160405180910390fd5b600088905060008d9050368f905060008c9050600061071d600260000160009054906101000a90046001600160801b03166001600160801b03166002800160009054906101000a9004600f0b600f0b600260000160109054906101000a90046001600160801b03166001600160801b031685600260010160009054906101000a90046001600160801b03166001600160801b03166102627f00000000000000000000000000000000000000000000000000000000000000008c61025d919061393d565b9b5090508a158061073757506107348c6000611901565b81125b1561075557604051630552b01360e31b815260040160405180910390fd5b6000881561076d5761076887848b611819565b610770565b60005b905061077f6020850185613a1e565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d866107bc60408a0160208b01613a49565b866107ca60408c018c613a66565b6040516107dd9796959493929190613aad565b60405180910390a250505050505050505050505050505050506100786001600055565b600061080a610bb9565b610812610be3565b61081b82610c04565b60065460ff161561083f57604051637983c05160e01b815260040160405180910390fd5b60008061084c8685610c89565b909250905061087c7f00000000000000000000000000000000000000000000000000000000000000006002613b01565b82101561089c57604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393506000908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612459929190613c62565b6040805180830381865af4158015612475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124999190613cd8565b915091506124b76124a9826117c5565b6124b290613cfc565b612a5d565b9250826124cd576000965050505050505061144c565b6124d68261193c565b600780546000906124f19084906001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061251e8161193c565b60078054601090612540908490600160801b90046001600160801b0316613b66565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61259d8761168b565b6040518263ffffffff1660e01b81526004016125b991906139e1565b6040805180830381865af41580156125d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f99190613d18565b915091508061260f575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916126759161393d565b61267f9190613950565b90508060000361269757506000958695509350505050565b60008087116126a75760006126b2565b6126b2848884611819565b976001975095505050505050565b6000606060008060008661ffff1667ffffffffffffffff8111156126e6576126e6613d48565b6040519080825280601f01601f191660200182016040528015612710576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612731578692505b828152826000602083013e9093509150505b9550959350505050565b60008060008361275c866117c5565b6127669190613b86565b9050600081121561277e576000809250925050610d57565b946001945092505050565b600080600061279b8888888888613094565b905060006127c6670de0b6b3a76400006127b58888612e4a565b6127bf919061393d565b8390611837565b9050670de0b6b3a764000081106127fa576127f36127ec670de0b6b3a764000089611837565b8290612c0e565b9050612812565b61280f6127ec670de0b6b3a764000089612e4a565b90505b61281c8186611837565b90508881101561283457600080935093505050612743565b97909703976001975095505050505050565b600080600061285889898888886130c3565b9050612872866119b361286b8a8d61393d565b879061210b565b985061287f858a86611819565b985088811015612896576000809250925050611654565b888103670de0b6b3a764000081106128c4576128bd6127ec670de0b6b3a764000089612e4a565b90506128dc565b6128d96127ec670de0b6b3a764000089611837565b90505b808910156128f257600080935093505050611654565b90970398600198509650505050505050565b60008060008060006129178987896130e8565b90925090506129268289613950565b9750600061293582888a611819565b9050612941818b613950565b9a989950979650505050505050565b60008061295e84600061316e565b61296984600061316e565b6129739190613b86565b9050600081131561298f57612988818661393d565b94506129ae565b60008112156129ae576129a181613cfc565b6129ab9086613950565b94505b50929392505050565b60006100918383670de0b6b3a76400005b60008260001904841183021582026129df57600080fd5b50910281810615159190040190565b600080670de0b6b3a7640000612a02610d5e565b612a0c9190613b01565b9050808311612a1c576000612a26565b612a268184613950565b91506100916127bf670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b01565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3a9190613d5e565b935093509350935080612b565750600098975050505050505050565b868414612b8757612b668461193c565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612bb857612b9783611966565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612be657612bc88261193c565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b600081600003612c275750670de0b6b3a764000061144c565b82600003612c375750600061144c565b6000612c42836117c5565b90506000612c57612c52866117c5565b613184565b9050818102612c6e670de0b6b3a764000082613d9f565b9050612c79816133aa565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612cea9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061353f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612d4184826135a7565b612cea576040516001600160a01b03848116602483015260006044830152612d7691869182169063095ea7b390606401612cb8565b612cea848261353f565b600061144c7f00000000000000000000000000000000000000000000000000000000000000008361364a565b600082600003612dbd575084610078565b8115612e1057612dee612dd0848761393d565b612dda858761210b565b612de4888a61210b565b611685919061393d565b90506000612dfc8588611c96565b905080821015612e0a578091505b50610078565b828503612e1f57506000610078565b610075612e2c8487613950565b612e3685876129b7565b612e40888a61210b565b6116859190613950565b600061009183670de0b6b3a7640000846129c8565b600060016001607f1b038211156117ef5760405163a5353be560e01b815260040160405180910390fd5b6003546000908190612ea4906001600160801b031684612e4a565b9050612ed07f00000000000000000000000000000000000000000000000000000000000000008261393d565b6002546001600160801b03161115611910576002547f000000000000000000000000000000000000000000000000000000000000000090612f1b9083906001600160801b0316613950565b6100919190613950565b612f2d61380f565b600080612f398461168b565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612f7491906139e1565b6040805180830381865af4158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb49190613d18565b9350905082612fc9575060009150611aed9050565b6000612feb61161684610160015185610140015161210b90919063ffffffff16565b61300b6116168561012001518661010001516129b790919063ffffffff16565b6130159190613b86565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b60006130a08585612c0e565b6130b96130b1866119b3868b61210b565b859085611819565b610075919061393d565b60006130cf8585612c0e565b6130b96130e0866119b3868b6129b7565b8590856129c8565b6000806131388561313285817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613128818c612e4a565b6131329190613950565b906129b7565b9150613164827f000000000000000000000000000000000000000000000000000000000000000061210b565b9050935093915050565b600081831361317d5781610091565b5090919050565b60008082136131a65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906132299084901c6117c5565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e1982136133c557506000919050565b680755bf798b4a1bf1e582126133ee576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612c7974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117c5565b60006135546001600160a01b038416836136b6565b905080516000141580156135795750808060200190518101906135779190613dcd565b155b15611b2a57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6000806000846001600160a01b0316846040516135c49190613dea565b6000604051808303816000865af19150503d8060008114613601576040519150601f19603f3d011682016040523d82523d6000602084013e613606565b606091505b50915091508180156136305750805115806136305750808060200190518101906136309190613dcd565b80156100785750505050506001600160a01b03163b151590565b6040516303d1689d60e11b8152600481018290526000906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009191906139f0565b60606100918383600084600080856001600160a01b031684866040516136dc9190613dea565b60006040518083038185875af1925050503d8060008114613719576040519150601f19603f3d011682016040523d82523d6000602084013e61371e565b606091505b5091509150612c7986838360608261373e5761373982613785565b610091565b815115801561375557506001600160a01b0384163b155b1561377e57604051639996b31560e01b81526001600160a01b038516600482015260240161359e565b5080610091565b8051156137955780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518061012001604052806138236137ae565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006060828403121561191057600080fd5b600080600080600060a0868803121561388b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156138be57600080fd5b6138ca88828901613861565b9150509295509295909350565b6000806000606084860312156138ec57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561391157600080fd5b61391d86828701613861565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561144c5761144c613927565b8181038181111561144c5761144c613927565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144c8284613963565b600060208284031215613a0257600080fd5b5051919050565b6001600160a01b0381168114610c3a57600080fd5b600060208284031215613a3057600080fd5b813561009181613a09565b8015158114610c3a57600080fd5b600060208284031215613a5b57600080fd5b813561009181613a3b565b6000808335601e19843603018112613a7d57600080fd5b83018035915067ffffffffffffffff821115613a9857600080fd5b602001915036819003821315610d5757600080fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144c5761144c613927565b600080600060608486031215613b2d57600080fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561193557611935613927565b6001600160801b0381811683821601908082111561193557611935613927565b818103600083128015838313168383128216171561193557611935613927565b600060208284031215613bb857600080fd5b815161009181613a09565b8082018281126000831280158216821582161715613be357613be3613927565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613c1057613c10613beb565b500690565b6001600160801b0382811682821603908082111561193557611935613927565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144c5761144c613927565b60006102a082019050613c76828551613963565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b60008060408385031215613ceb57600080fd5b505080516020909101519092909150565b6000600160ff1b8201613d1157613d11613927565b5060000390565b60008060408385031215613d2b57600080fd5b825191506020830151613d3d81613a3b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613d7457600080fd5b8451935060208501519250604085015191506060850151613d9481613a3b565b939692955090935050565b600082613dae57613dae613beb565b600160ff1b821460001984141615613dc857613dc8613927565b500590565b600060208284031215613ddf57600080fd5b815161009181613a3b565b6000825160005b81811015613e0b5760208186018101518583015201613df1565b50600092019182525091905056fea26469706673582212205d3868cdd879d843240afe9b100adac45513a8ccb979bbb1bae5fb59005cc27f64736f6c634300081600336102806040523480156200001257600080fd5b50604051620034e4380380620034e48339810160408190526200003591620001ae565b600160005581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002eb565b60405161020081016001600160401b03811182821017156200011657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200013457600080fd5b919050565b6000608082840312156200014c57600080fd5b604051608081016001600160401b03811182821017156200017d57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600080828403610280811215620001c457600080fd5b61026080821215620001d557600080fd5b620001df620000e4565b9150620001ec856200011c565b8252620001fc602086016200011c565b60208301526200020f604086016200011c565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200027a8187016200011c565b908301526101806200028e8682016200011c565b908301526101a0620002a28682016200011c565b908301526101c0620002b68682016200011c565b908301526101e0620002cb8787830162000139565b8184015250819350620002e08186016200011c565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516130cc62000418600039600050506000505060006109c10152600050506000818161026d0152611f850152600081816117cb0152818161182e01528181611b6a01528181611ba601528181611d9e0152611f5f01526000818161056f0152611f39015260006113a0015260006114fb01526000818161073301526114cf015260005050600081816105900152611fab01526000818161066b01526124550152600081816101ed0152818161042e015281816104a90152818161051f015281816105eb01526106230152600081816110db015281816122e70152818161233b01526123b70152600050506130cc6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063074a6de914610046578063414f826d14610072578063cbc1343414610087575b600080fd5b610059610054366004612b2a565b61009a565b6040805192835260208301919091520160405180910390f35b610085610080366004612b81565b6100b5565b005b610059610095366004612b2a565b6100c3565b6000806100a88585856100d1565b915091505b935093915050565b6100bf8282610196565b5050565b6000806100a8858585610257565b6000806100dc6103ab565b6100e5836103d5565b60006100ef61040e565b90506101066100fc610426565b8260046001610452565b506101143387838888610ad0565b90935091506101266020850185612bb8565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561016460408b0160208c01612be3565b61017160408c018c612c00565b60405161018396959493929190612c70565b60405180910390a3506100ad6001600055565b61019e6103ab565b60006101a861040e565b6000848152600860205260409020600101549091506001600160801b0316156101dc576101d58183610c13565b505061024d565b60006101e6610426565b90506102127f000000000000000000000000000000000000000000000000000000000000000085612cc0565b15158061021e57508381105b1561023c5760405163ecd29e8160e01b815260040160405180910390fd5b6102498483856000610452565b5050505b6100bf6001600055565b6000806102626103ab565b61026b836103d5565b7f00000000000000000000000000000000000000000000000000000000000000008510156102ac5760405163211ddda360e11b815260040160405180910390fd5b60006102b661040e565b90506102c36100fc610426565b506102d060003388610e0e565b6102eb600360f81b6102e56020870187612bb8565b88610ee8565b60006103066102fd6020870187612bb8565b88848989610ad0565b90945090506103158188612cea565b9250600061032283610f88565b5090506103326020870187612bb8565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761037060408d0160208e01612be3565b8a888e80604001906103829190612c00565b604051610396989796959493929190612cfd565b60405180910390a35050506100ad6001600055565b6002600054036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006103e46020830183612bb8565b6001600160a01b03160361040b5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6000610421670de0b6b3a76400006110d4565b905090565b6000610421427f0000000000000000000000000000000000000000000000000000000000000000611100565b600084815260086020526040812060018101546001600160801b031615158061047a57504286115b1561049357600101546001600160801b03169050610ac8565b60008060006104a0610426565b905060006104ce7f00000000000000000000000000000000000000000000000000000000000000008b612d45565b90505b81811015610544576000818152600860205260409020600101546001600160801b0316801561051c576000828152600860205260409020549094506001600160801b03169250610544565b507f0000000000000000000000000000000000000000000000000000000000000000016104d1565b836000036105b7578893506105b461055a61111d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061113e565b92505b506105c18361115e565b6001850180546001600160801b0319166001600160801b03929092169190911790556106176106107f00000000000000000000000000000000000000000000000000000000000000008b612cea565b8a8461118c565b6106558961064f6106487f000000000000000000000000000000000000000000000000000000000000000083612d45565b42906112ca565b8461118c565b61065e886112df565b50600090506008816106907f00000000000000000000000000000000000000000000000000000000000000008d612cea565b815260208101919091526040016000908120600101546001600160801b031691506106bc60028c611483565b6000818152600b60205260408120549192508c8c831561080257600192506000806106eb86898d8660006114b8565b9150915080600960008282546107019190612d45565b9091555061071d90508660008461071781611587565b886115b1565b6107278183612d45565b915061075786838a8e877f000000000000000000000000000000000000000000000000000000000000000061172b565b915061076b6107668385611775565b61178a565b6006805460029061078c9084906201000090046001600160701b0316612d58565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506107b98261115e565b600680546010906107db908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b600061080f600184611483565b6000818152600b6020526040902054909150801561091e576001945060008061083c838b8f8860016114b8565b9150915080600960008282546108529190612d45565b9091555061086e90508360008461086881611587565b8a6117b4565b6108788183612cea565b91506108876107668387611775565b600680546002906108a89084906201000090046001600160701b0316612d58565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108d58261115e565b600680546010906108f7908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156109585761094a61093087611587565b61093983611587565b6109439190612d98565b60006119a5565b8e6109558482610c13565b50505b600061096384610f88565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a260008f905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612db8565b90506001600160a01b03811615610ab657610ab35a604051336024820152604481018a90528415156064820152600090819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119e4565b50505b509b9d50505050505050505050505050505b949350505050565b600080610adc85611a6f565b505060075485906001600160801b031680821115610b0157806001600160801b031691505b81600003610b16576000809250925050610c09565b610b25600360f81b8984610e0e565b600754600090610b4b9084906001600160801b03600160801b9091048116908516611a7c565b9050610b568361115e565b610b609083612dd5565b600780546001600160801b0319166001600160801b0392909216919091179055610b898161115e565b60078054601090610bab908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610bda818887611a9a565b9350610be68684611b33565b841015610c065760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b6000908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c5e916001600160801b031690612cea565b905080600003610c72576001915050610e08565b6000610c7d85611b48565b905080600003610c9257600192505050610e08565b600080610ca0838589611be4565b9150915080610cb6576000945050505050610e08565b60008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cf2929190612e73565b6040805180830381865af4158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190612ee9565b91509150610d50610d4282611587565b610d4b90612f0d565b611d58565b925082610d665760009650505050505050610e08565b610d6f8261115e565b60078054600090610d8a9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610db78161115e565b60078054601090610dd9908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b6000838152600a602090815260408083206001600160a01b0386168452909152902054811115610e5157604051631e9acf1760e31b815260040160405180910390fd5b6000838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e94908490612cea565b909155505060408051848152602081018390526000916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6000838152600a602090815260408083206001600160a01b038616845290915281208054839290610f1a908490612d45565b90915550506000838152600b602052604081208054839290610f3d908490612d45565b909155505060408051848152602081018390526001600160a01b0384169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610edb565b60008060008073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610fb187611ef0565b6040518263ffffffff1660e01b8152600401610fcd9190612f29565b6040805180830381865af4158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612f38565b9150915080611023575060009485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435460008080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161108991612d45565b6110939190612cea565b9050806000036110ab57506000958695509350505050565b60008087116110bb5760006110c6565b6110c6848884611a7c565b976001975095505050505050565b6000610e087f00000000000000000000000000000000000000000000000000000000000000008361202a565b600061110c8284612cc0565b6111169084612cea565b9392505050565b600254600454600091610421916001600160801b0390911690600f0b612097565b60006111558261114f858888611a7c565b906120bd565b95945050505050565b60006001600160801b0382111561118857604051630f0af95160e11b815260040160405180910390fd5b5090565b600083815260086020526040902054600160801b90046001600160801b03168083036111b85750505050565b6000848152600860205260408120546001600160801b031690819003611212576111e18361115e565b600086815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611290565b61126361125e670de0b6b3a764000061122b8886612cea565b6112359190612f68565b85670de0b6b3a7640000611249878a612cea565b6112539190612f68565b859291906001612132565b61115e565b600086815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b6112998461115e565b60009586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b60008183116112d95782611116565b50919050565b6006546000908190611302908490600160801b90046001600160801b0316611775565b6006546201000090046001600160701b0316925090508181111561147e57600061132c8383612cea565b905061133b61125e82866121d0565b6006805460109061135d908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061139685836121e590919063ffffffff16565b905060006113c4827f0000000000000000000000000000000000000000000000000000000000000000611775565b905080600960008282546113d89190612d45565b909155506113e890508183612cea565b91506113f38261115e565b6002805460009061140e9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061143b826121fa565b60048054600090611450908490600f0b612f7f565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b60006001600160f81b038211156114ad5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b6000806114c587856121e5565b915060006114f3837f0000000000000000000000000000000000000000000000000000000000000000611775565b905061151f817f0000000000000000000000000000000000000000000000000000000000000000611775565b91508315611542576115318282612cea565b61153b9084612cea565b9250611559565b61154c8282612cea565b6115569084612d45565b92505b8686101561157c5761156c838789611a7c565b9250611579828789611a7c565b91505b509550959350505050565b60006001600160ff1b038211156111885760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115fa61125e826115dd670de0b6b3a764000086612f68565b600554600160801b90046001600160801b031691908a6000612132565b600580546001600160801b03928316600160801b0292169190911790556116208661115e565b61162a9082612dd5565b600480546001600160801b03928316600160801b0292169190911790556116508461115e565b6002805460009061166b9084906001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061169883612224565b600480546000906116ad908490600f0b612f7f565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116dd8561115e565b600280546010906116ff908490600160801b90046001600160801b0316612dd5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6000806117438461173d8a888a611a7c565b906121e5565b9050611750888486611a7c565b61175a9082612d45565b90508681111561176a5786810391505b509695505050505050565b60006111168383670de0b6b3a7640000611a7c565b60006001600160701b038211156111885760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117f657507f00000000000000000000000000000000000000000000000000000000000000006117f48583612cea565b105b1561180357611803612260565b6004549084900390600f0b6118188482612d98565b90508361182486611587565b13801561185957507f00000000000000000000000000000000000000000000000000000000000000006118578383612097565b105b1561186657611866612260565b600354600160801b90046001600160801b03166118a861125e82611892670de0b6b3a764000088612f68565b6005546001600160801b031691908c6000612132565b600580546001600160801b0319166001600160801b03929092169190911790556118d28882612cea565b90506118dd8161115e565b600380546001600160801b03928316600160801b0292169190911790556119038361115e565b600280546001600160801b0319166001600160801b039290921691909117905561192c82612224565b600480546001600160801b0319166001600160801b03929092169190911790556119558761115e565b60028054601090611977908490600160801b90046001600160801b0316612d78565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119c09061125e906001600160801b03168484612279565b600380546001600160801b0319166001600160801b03929092169190911790555050565b6000606060008060008661ffff1667ffffffffffffffff811115611a0a57611a0a612fac565b6040519080825280601f01601f191660200182016040528015611a34576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115611a55578692505b828152826000602083013e90999098509650505050505050565b6000610e08826004610c13565b6000826000190484118302158202611a9357600080fd5b5091020490565b600080611aa78585611775565b9050611ab2816122e0565b945084600003611ac6576000915050611116565b849150611ad96040840160208501612be3565b15611b0857611b0185611aef6020860186612bb8565b611afc6040870187612c00565b61230c565b9150611b2b565b611b2b85611b196020860186612bb8565b611b266040870187612c00565b6123aa565b509392505050565b60006111168383670de0b6b3a76400006123e4565b6003546000908190611b63906001600160801b0316846121d0565b9050611b8f7f000000000000000000000000000000000000000000000000000000000000000082612d45565b6002546001600160801b031611156112d9576002547f000000000000000000000000000000000000000000000000000000000000000090611bda9083906001600160801b0316612cea565b6111169190612cea565b611bec612a77565b600080611bf884611ef0565b9050600073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c339190612f29565b6040805180830381865af4158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190612f38565b9350905082611c885750600091506100ad9050565b6000611caf611caa84610160015185610140015161177590919063ffffffff16565b611587565b611ccf611caa856101200151866101000151611b3390919063ffffffff16565b611cd99190612d98565b604080516101208101825285815260208082019590955260008052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f000000000000000000000000000000000000000000000000000000000000000060648301526084820185905260009391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ERC4626HyperdriveTestContractFunctions(erc4626hyperdrivetest_abi, self.w3, address)  # type: ignore
        self.events = ERC4626HyperdriveTestContractEvents(erc4626hyperdrivetest_abi, self.w3, address)  # type: ignore
        self.errors = ERC4626HyperdriveTestContractErrors()

    events: ERC4626HyperdriveTestContractEvents

    errors: ERC4626HyperdriveTestContractErrors = (
        ERC4626HyperdriveTestContractErrors()
    )

    functions: ERC4626HyperdriveTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC4626HyperdriveTestContractFunctions(
            erc4626hyperdrivetest_abi, w3, None
        )
        contract.errors = ERC4626HyperdriveTestContractErrors()

        return contract
