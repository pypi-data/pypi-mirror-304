workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_PIPELINE_SOURCE == 'schedule'

build:
  image: node:18-slim
  stage: build
  needs: []
  before_script:
    - npm ci
  script:
    - npm run build
  artifacts:
    paths:
      - dist/index.js

jest_tast:
  image: node:18-slim
  stage: test
  script:
    - npm install
    - npm test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' 

test_dist_updated:
  image: node:18-slim
  stage: test
  needs:
    - job: build
      artifacts: true
  before_script:
    - apt-get update -y
    - apt-get install git -y 
  script:
   - git diff --exit-code dist/index.js
  artifacts:
    paths:
      - dist/index.js
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' 

test_routine_old_1_1_340:
  image: node:18-slim
  stage: test
  needs:
    - job: build
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' 
  before_script:
    - npm i -g pyright@1.1.339
    - npm install -g json-diff
  script:
   - pyright tests/example.py --outputjson > report_raw.json || a=$? # ignore error code, we want it to fail
   - node ./dist/index.js --src report_raw.json --output report.json --base_path .
   - cp ./tests/report.json report_processed.json
   - json-diff -s ./tests/report.json report.json
  artifacts:
    paths:
      - report_raw.json
      - report.json
    reports:
      codequality: ./report.json 


test_routine:
  image: node:18-slim
  stage: test
  needs:
    - job: build
      artifacts: true
  before_script:
    - npm i -g pyright
    - npm install -g json-diff
  script:
   - pyright tests/example.py --outputjson > report_raw.json || a=$? # ignore error code, we want it to fail
   - node ./dist/index.js --src report_raw.json --output report.json --base_path .
   - cp ./tests/report.json report_processed.json
   - json-diff -s ./tests/report.json report.json
  artifacts:
    paths:
      - report_raw.json
      - report.json
    reports:
      codequality: ./report.json 
