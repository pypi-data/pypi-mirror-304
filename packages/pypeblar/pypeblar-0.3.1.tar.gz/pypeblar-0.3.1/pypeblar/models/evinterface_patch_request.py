# coding: utf-8

"""
    Peblar local REST API

    # General This document contains the specification of the WLAC local REST API. This API for local networks is supported by Peblar products from firmware versions 1.6 and onwards. Before the API can be accessed, it is required to be enabled in the advanced settings page of the chargers web interface. The endpoints described below can be reached via http://\\<local_ip\\>/api/wlac/v1/\\<endpoint_name\\> for example http://10.11.12.13/api/wlac/v1/evinterface. <br><br> <img src=\"./images/api_enable.png\"/> <br> 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class EvinterfacePatchRequest(BaseModel):
    """
    EvinterfacePatchRequest
    """
    charge_current_limit: Optional[StrictInt] = Field(default=None, alias="ChargeCurrentLimit", description="The maximum current per phase indicated towards the EV in milliAmpere by this API. Note that other factors can cause an even lower limit (e.g. thermal or dynamic load balancing). ")
    force1_phase: Optional[StrictBool] = Field(default=None, alias="Force1Phase", description="Use only 1 phase for charging on the next charging cycle (if supported). If charging is already ongoing, a switch-over from 3 to 1 phase is done automatically by the charger. ")
    __properties = ["ChargeCurrentLimit", "Force1Phase"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EvinterfacePatchRequest:
        """Create an instance of EvinterfacePatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EvinterfacePatchRequest:
        """Create an instance of EvinterfacePatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EvinterfacePatchRequest.parse_obj(obj)

        _obj = EvinterfacePatchRequest.parse_obj({
            "charge_current_limit": obj.get("ChargeCurrentLimit"),
            "force1_phase": obj.get("Force1Phase")
        })
        return _obj


