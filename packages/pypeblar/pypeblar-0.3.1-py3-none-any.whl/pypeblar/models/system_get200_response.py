# coding: utf-8

"""
    Peblar local REST API

    # General This document contains the specification of the WLAC local REST API. This API for local networks is supported by Peblar products from firmware versions 1.6 and onwards. Before the API can be accessed, it is required to be enabled in the advanced settings page of the chargers web interface. The endpoints described below can be reached via http://\\<local_ip\\>/api/wlac/v1/\\<endpoint_name\\> for example http://10.11.12.13/api/wlac/v1/evinterface. <br><br> <img src=\"./images/api_enable.png\"/> <br> 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class SystemGet200Response(BaseModel):
    """
    SystemGet200Response
    """
    product_pn: Optional[StrictStr] = Field(default=None, alias="ProductPn", description="The product number.")
    product_sn: Optional[StrictStr] = Field(default=None, alias="ProductSn", description="The product serial number.")
    firmware_version: Optional[StrictStr] = Field(default=None, alias="FirmwareVersion", description="Firmware version identifier.")
    wlan_signal_strength: Optional[StrictInt] = Field(default=None, alias="WlanSignalStrength", description="WLAN signal strength in dBm. If the device is not connected to WLAN, null is returned.")
    cellular_signal_strength: Optional[StrictInt] = Field(default=None, alias="CellularSignalStrength", description="Cellular signal strength in dBm. If the device is not connected to a cellular network, null is returned.")
    uptime: Optional[StrictInt] = Field(default=None, alias="Uptime", description="Uptime of the charger since last boot in seconds.")
    phase_count: Optional[StrictInt] = Field(default=None, alias="PhaseCount", description="The amount of physical connected phases either limited by hardware or configured during installation.")
    force1_phase_allowed: Optional[StrictBool] = Field(default=None, alias="Force1PhaseAllowed", description="Defines if the charger supports charging with only 1 phase while it is a 3 phase charger. Returns false for single phase charger or 4-pole relays based chargers.")
    active_error_codes: Optional[conlist(StrictInt)] = Field(default=None, alias="ActiveErrorCodes", description="An integer array with active error codes.")
    active_warning_codes: Optional[conlist(StrictInt)] = Field(default=None, alias="ActiveWarningCodes", description="An integer array with active warning codes.")
    __properties = ["ProductPn", "ProductSn", "FirmwareVersion", "WlanSignalStrength", "CellularSignalStrength", "Uptime", "PhaseCount", "Force1PhaseAllowed", "ActiveErrorCodes", "ActiveWarningCodes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemGet200Response:
        """Create an instance of SystemGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemGet200Response:
        """Create an instance of SystemGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemGet200Response.parse_obj(obj)

        _obj = SystemGet200Response.parse_obj({
            "product_pn": obj.get("ProductPn"),
            "product_sn": obj.get("ProductSn"),
            "firmware_version": obj.get("FirmwareVersion"),
            "wlan_signal_strength": obj.get("WlanSignalStrength"),
            "cellular_signal_strength": obj.get("CellularSignalStrength"),
            "uptime": obj.get("Uptime"),
            "phase_count": obj.get("PhaseCount"),
            "force1_phase_allowed": obj.get("Force1PhaseAllowed"),
            "active_error_codes": obj.get("ActiveErrorCodes"),
            "active_warning_codes": obj.get("ActiveWarningCodes")
        })
        return _obj


