# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .open_ai_function_parameters import OpenAiFunctionParameters
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OpenAiFunction(UniversalBaseModel):
    name: str = pydantic.Field()
    """
    This is the the name of the function to be called.
    
    Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    """

    description: typing.Optional[str] = None
    parameters: typing.Optional[OpenAiFunctionParameters] = pydantic.Field(default=None)
    """
    These are the parameters the functions accepts, described as a JSON Schema object.
    
    See the [OpenAI guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format.
    
    Omitting parameters defines a function with an empty parameter list.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
