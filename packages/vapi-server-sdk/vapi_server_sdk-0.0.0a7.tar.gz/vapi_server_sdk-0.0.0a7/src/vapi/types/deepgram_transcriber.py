# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .deepgram_transcriber_model import DeepgramTranscriberModel
from .deepgram_transcriber_language import DeepgramTranscriberLanguage
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DeepgramTranscriber(UniversalBaseModel):
    provider: typing.Literal["deepgram"] = pydantic.Field(default="deepgram")
    """
    This is the transcription provider that will be used.
    """

    model: typing.Optional[DeepgramTranscriberModel] = pydantic.Field(default=None)
    """
    This is the Deepgram model that will be used. A list of models can be found here: https://developers.deepgram.com/docs/models-languages-overview
    """

    language: typing.Optional[DeepgramTranscriberLanguage] = pydantic.Field(default=None)
    """
    This is the language that will be set for the transcription. The list of languages Deepgram supports can be found here: https://developers.deepgram.com/docs/models-languages-overview
    """

    smart_format: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="smartFormat")] = (
        pydantic.Field(default=None)
    )
    """
    This will be use smart format option provided by Deepgram. It's default disabled because it can sometimes format numbers as times but it's getting better.
    """

    language_detection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="languageDetectionEnabled")
    ] = pydantic.Field(default=None)
    """
    This enables or disables language detection. If true, swaps transcribers to detected language automatically. Defaults to false.
    """

    keywords: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    These keywords are passed to the transcription model to help it pick up use-case specific words. Anything that may not be a common word, like your company name, should be added here.
    """

    endpointing: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timeout after which Deepgram will send transcription on user silence. You can read in-depth documentation here: https://developers.deepgram.com/docs/endpointing.
    
    Here are the most important bits:
    
    - Defaults to 10. This is recommended for most use cases to optimize for latency.
    - 10 can cause some missing transcriptions since because of the shorter context. This mostly happens for one-word utterances. For those uses cases, it's recommended to try 300. It will add a bit of latency but the quality and reliability of the experience will be better.
    - If neither 10 nor 300 work, contact support@vapi.ai and we'll find another solution.
    
    @default 10
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
