[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.9"
name = "sparql-llm"
description = "Reusable components and complete chat system to improve Large Language Models (LLMs) capabilities when generating SPARQL queries for a given set of endpoints, using Retrieval-Augmented Generation (RAG) and SPARQL query validation from the endpoint schema."
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
maintainers = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "SPARQL",
    "LLM",
    "Expasy",
    "KGQA",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]

dependencies = [
    "requests",
    "rdflib",
    "bs4",
    "langchain",
    "langchain-core",
    "curies-rs >=0.1.3",
]


[project.optional-dependencies]
chat = [
    "fastapi",
    "pydantic >=2.0.0",
    "pydantic-settings",
    "openai",
    "qdrant_client",
    "fastembed",
]
test = [
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "pyright",
    "pip-tools",
    "SPARQLWrapper",
    "ipykernel",
    "python-dotenv",
    "pandas",
    # "oxrdflib",
    # "langchain-community",
    # "jupyter",
    # "ipywidgets",
    # "tqdm",
]
gpu = [
    "onnxruntime-gpu",
    "fastembed-gpu",
]


[project.urls]
Homepage = "https://github.com/sib-swiss/sparql-llm"
Documentation = "https://github.com/sib-swiss/sparql-llm"
History = "https://github.com/sib-swiss/sparql-llm/releases"
Tracker = "https://github.com/sib-swiss/sparql-llm/issues"
Source = "https://github.com/sib-swiss/sparql-llm"

# Required for onnxruntime-gpu on CUDA 12
[tool.hatch.envs.default.env-vars]
PIP_EXTRA_INDEX_URL = "https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
    "chat",
]
post-install-commands = []

[tool.hatch.envs.default.scripts]
fmt = [
    "ruff format",
    "ruff check --fix",
]
test = [
    "fmt",
    # "mypy",
    # "pyright",
    "pytest {args}",
]
cov = [
    "fmt",
    "pytest --cov-report html {args}",
]
cov-check = [
    "python -c 'import webbrowser; webbrowser.open(\"http://0.0.0.0:3000\")'",
    "python -m http.server 3000 --directory ./htmlcov",
]
compile = "pip-compile -o requirements.txt pyproject.toml"


## TOOLS
[tool.hatch.version]
path = "src/sparql_llm/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/sparql_llm"]

# If you need to import packages from git URLs:
# [tool.hatch.metadata]
# allow-direct-references = true


[tool.mypy]
files = ["src/"]
strict = true
implicit_reexport = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_any_generics = true

# TODO: Use mypy or pyright for static type checking? Mypy is slow
# But pyright does not recognize the type of the curies Converter ("unknown import symbol"), while mypy does.
# So I guess pyright is garbage, I don't have time to fix all their bs, they should be better, classic microsoft
# https://microsoft.github.io/pyright/#/configuration?id=sample-pyprojecttoml-file


[tool.pytest.ini_options]
addopts = [
    "-vvv",           # Verbose level 3
    "--durations=10", # Show 10 slowest tests durations
    "--cov=src",
    "--color=yes",
    "--cov-report=term-missing",
]

# https://github.com/astral-sh/ruff#configuration
[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [
    "notebooks",
    "**/__init__.py",
]

[tool.ruff.lint]
select = [
    "I",     # isort
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    # "FBT",   # flake8-boolean-trap
    "F",     # pyflakes
    "UP",    # pyupgrade
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    # "PLR",   # pylint refactor Magic value used in comparison, consider replacing 400 with a constant variable
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
ignore = [
    "E501", # line too long
    "C901", # too complex
    "T201", # do not use print
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["I", "F401"] # module imported but unused
# Tests can use magic values, assertions, and relative imports:
"tests/**/*" = ["PLR2004", "S101", "S105", "TID252"]