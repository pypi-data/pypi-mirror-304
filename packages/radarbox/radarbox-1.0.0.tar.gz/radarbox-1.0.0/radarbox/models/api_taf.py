# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from radarbox.models.api_coordinates import ApiCoordinates
from radarbox.models.api_taf_forecast import ApiTafForecast
from typing import Optional, Set
from typing_extensions import Self

class ApiTaf(BaseModel):
    """
    Weather forecast Information provided by airports to serve the surrounding air traffic. TAF reports are updated several times throughout the day to ensure that pilots have access to the most up-to-date information as possible
    """ # noqa: E501
    issue_time: Optional[datetime] = Field(default=None, alias="issueTime")
    bulletin_time: Optional[datetime] = Field(default=None, alias="bulletinTime")
    valid_from: Optional[datetime] = Field(default=None, alias="validFrom")
    valid_until: Optional[datetime] = Field(default=None, alias="validUntil")
    coordinates: Optional[ApiCoordinates] = None
    elevation: Optional[StrictInt] = None
    forecast: Optional[List[ApiTafForecast]] = None
    __properties: ClassVar[List[str]] = ["issueTime", "bulletinTime", "validFrom", "validUntil", "coordinates", "elevation", "forecast"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiTaf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in forecast (list)
        _items = []
        if self.forecast:
            for _item_forecast in self.forecast:
                if _item_forecast:
                    _items.append(_item_forecast.to_dict())
            _dict['forecast'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiTaf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issueTime": obj.get("issueTime"),
            "bulletinTime": obj.get("bulletinTime"),
            "validFrom": obj.get("validFrom"),
            "validUntil": obj.get("validUntil"),
            "coordinates": ApiCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "elevation": obj.get("elevation"),
            "forecast": [ApiTafForecast.from_dict(_item) for _item in obj["forecast"]] if obj.get("forecast") is not None else None
        })
        return _obj


