# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from radarbox.models.api_runway import ApiRunway
from radarbox.models.api_runway_in_use import ApiRunwayInUse
from radarbox.models.coordinates import Coordinates
from typing import Optional, Set
from typing_extensions import Self

class ApiAirport(BaseModel):
    """
    ApiAirport
    """ # noqa: E501
    icao_code: Optional[StrictStr] = Field(default=None, alias="icaoCode")
    iata_code: Optional[StrictStr] = Field(default=None, alias="iataCode")
    name: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    main_airport: Optional[StrictBool] = Field(default=None, alias="mainAirport")
    country: Optional[StrictStr] = None
    country_iso2: Optional[StrictStr] = Field(default=None, alias="countryIso2")
    country_iso3: Optional[StrictStr] = Field(default=None, alias="countryIso3")
    elevation: Optional[StrictInt] = None
    coordinates: Optional[Coordinates] = None
    runways: Optional[List[ApiRunway]] = None
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    takeoff_active_runways: Optional[List[ApiRunwayInUse]] = Field(default=None, alias="takeoffActiveRunways")
    landing_active_runways: Optional[List[ApiRunwayInUse]] = Field(default=None, alias="landingActiveRunways")
    __properties: ClassVar[List[str]] = ["icaoCode", "iataCode", "name", "city", "state", "mainAirport", "country", "countryIso2", "countryIso3", "elevation", "coordinates", "runways", "timeZone", "takeoffActiveRunways", "landingActiveRunways"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiAirport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runways (list)
        _items = []
        if self.runways:
            for _item_runways in self.runways:
                if _item_runways:
                    _items.append(_item_runways.to_dict())
            _dict['runways'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in takeoff_active_runways (list)
        _items = []
        if self.takeoff_active_runways:
            for _item_takeoff_active_runways in self.takeoff_active_runways:
                if _item_takeoff_active_runways:
                    _items.append(_item_takeoff_active_runways.to_dict())
            _dict['takeoffActiveRunways'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in landing_active_runways (list)
        _items = []
        if self.landing_active_runways:
            for _item_landing_active_runways in self.landing_active_runways:
                if _item_landing_active_runways:
                    _items.append(_item_landing_active_runways.to_dict())
            _dict['landingActiveRunways'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiAirport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "icaoCode": obj.get("icaoCode"),
            "iataCode": obj.get("iataCode"),
            "name": obj.get("name"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "mainAirport": obj.get("mainAirport"),
            "country": obj.get("country"),
            "countryIso2": obj.get("countryIso2"),
            "countryIso3": obj.get("countryIso3"),
            "elevation": obj.get("elevation"),
            "coordinates": Coordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "runways": [ApiRunway.from_dict(_item) for _item in obj["runways"]] if obj.get("runways") is not None else None,
            "timeZone": obj.get("timeZone"),
            "takeoffActiveRunways": [ApiRunwayInUse.from_dict(_item) for _item in obj["takeoffActiveRunways"]] if obj.get("takeoffActiveRunways") is not None else None,
            "landingActiveRunways": [ApiRunwayInUse.from_dict(_item) for _item in obj["landingActiveRunways"]] if obj.get("landingActiveRunways") is not None else None
        })
        return _obj


