# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from radarbox.models.api_trail import ApiTrail
from typing import Optional, Set
from typing_extensions import Self

class ApiFlight(BaseModel):
    """
    ApiFlight
    """ # noqa: E501
    callsign: Optional[StrictStr] = None
    flight_number_iata: Optional[StrictStr] = Field(default=None, alias="flightNumberIata")
    flight_number_icao: Optional[StrictStr] = Field(default=None, alias="flightNumberIcao")
    aircraft_registration: Optional[StrictStr] = Field(default=None, alias="aircraftRegistration")
    aircraft_mode_s: Optional[StrictStr] = Field(default=None, alias="aircraftModeS")
    aircraft_type: Optional[StrictStr] = Field(default=None, alias="aircraftType")
    aircraft_classes: Optional[List[StrictStr]] = Field(default=None, alias="aircraftClasses")
    aircraft_type_description: Optional[StrictStr] = Field(default=None, alias="aircraftTypeDescription")
    airline_iata: Optional[StrictStr] = Field(default=None, alias="airlineIata")
    airline_icao: Optional[StrictStr] = Field(default=None, alias="airlineIcao")
    airline_name: Optional[StrictStr] = Field(default=None, alias="airlineName")
    dep_airport_icao: Optional[StrictStr] = Field(default=None, alias="depAirportIcao")
    dep_airport_iata: Optional[StrictStr] = Field(default=None, alias="depAirportIata")
    dep_airport_name: Optional[StrictStr] = Field(default=None, alias="depAirportName")
    dep_airport_city: Optional[StrictStr] = Field(default=None, alias="depAirportCity")
    dep_airport_state: Optional[StrictStr] = Field(default=None, alias="depAirportState")
    dep_airport_country: Optional[StrictStr] = Field(default=None, alias="depAirportCountry")
    dep_airport_country_iso2: Optional[StrictStr] = Field(default=None, alias="depAirportCountryIso2")
    dep_airport_country_iso3: Optional[StrictStr] = Field(default=None, alias="depAirportCountryIso3")
    dep_airport_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="depAirportLatitude")
    dep_airport_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="depAirportLongitude")
    dep_airport_tz: Optional[StrictStr] = Field(default=None, alias="depAirportTz")
    dep_airport_tz_diff_utc: Optional[StrictStr] = Field(default=None, alias="depAirportTzDiffUTC")
    scheduled_departure: Optional[datetime] = Field(default=None, alias="scheduledDeparture")
    estimated_departure: Optional[datetime] = Field(default=None, alias="estimatedDeparture")
    estimated_takeoff: Optional[datetime] = Field(default=None, alias="estimatedTakeoff")
    actual_departure: Optional[datetime] = Field(default=None, alias="actualDeparture")
    actual_takeoff: Optional[datetime] = Field(default=None, alias="actualTakeoff")
    calculated_takeoff: Optional[datetime] = Field(default=None, alias="calculatedTakeoff")
    div_airport_icao: Optional[StrictStr] = Field(default=None, alias="divAirportIcao")
    div_airport_iata: Optional[StrictStr] = Field(default=None, alias="divAirportIata")
    div_airport_name: Optional[StrictStr] = Field(default=None, alias="divAirportName")
    div_airport_city: Optional[StrictStr] = Field(default=None, alias="divAirportCity")
    div_airport_state: Optional[StrictStr] = Field(default=None, alias="divAirportState")
    div_airport_country: Optional[StrictStr] = Field(default=None, alias="divAirportCountry")
    div_airport_country_iso2: Optional[StrictStr] = Field(default=None, alias="divAirportCountryIso2")
    div_airport_country_iso3: Optional[StrictStr] = Field(default=None, alias="divAirportCountryIso3")
    div_airport_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="divAirportLatitude")
    div_airport_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="divAirportLongitude")
    div_airport_tz: Optional[StrictStr] = Field(default=None, alias="divAirportTz")
    div_airport_tz_diff_utc: Optional[StrictStr] = Field(default=None, alias="divAirportTzDiffUTC")
    arr_airport_icao: Optional[StrictStr] = Field(default=None, alias="arrAirportIcao")
    arr_airport_iata: Optional[StrictStr] = Field(default=None, alias="arrAirportIata")
    arr_airport_name: Optional[StrictStr] = Field(default=None, alias="arrAirportName")
    arr_airport_city: Optional[StrictStr] = Field(default=None, alias="arrAirportCity")
    arr_airport_state: Optional[StrictStr] = Field(default=None, alias="arrAirportState")
    arr_airport_country: Optional[StrictStr] = Field(default=None, alias="arrAirportCountry")
    arr_airport_country_iso2: Optional[StrictStr] = Field(default=None, alias="arrAirportCountryIso2")
    arr_airport_country_iso3: Optional[StrictStr] = Field(default=None, alias="arrAirportCountryIso3")
    arr_airport_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="arrAirportLatitude")
    arr_airport_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="arrAirportLongitude")
    arr_airport_tz: Optional[StrictStr] = Field(default=None, alias="arrAirportTz")
    arr_airport_tz_diff_utc: Optional[StrictStr] = Field(default=None, alias="arrAirportTzDiffUTC")
    scheduled_arrival: Optional[datetime] = Field(default=None, alias="scheduledArrival")
    estimated_arrival: Optional[datetime] = Field(default=None, alias="estimatedArrival")
    estimated_landing: Optional[datetime] = Field(default=None, alias="estimatedLanding")
    actual_arrival: Optional[datetime] = Field(default=None, alias="actualArrival")
    actual_landing: Optional[datetime] = Field(default=None, alias="actualLanding")
    calculated_landing: Optional[datetime] = Field(default=None, alias="calculatedLanding")
    departure_status: Optional[StrictStr] = Field(default=None, description="Description of the possible values - CX: cancelled; DY: delayed; EY: early; OT: on time; NS: no status", alias="departureStatus")
    departure_delay_reason: Optional[StrictStr] = Field(default=None, description="Description of the possible values - 1: Airline internal; 2: Airline internal; 3: Airline Controlled Delay; 4: Downline Delay; 5: Other; 6: None; 9: Scheduled ground time less than declared minimum ground time; 11: Late check-in - acceptance after deadline; 12: Late check-in - congestion in check-in area; 13: Check-in error - congestion in check-in area; 14: Oversales - booking errors; 15: Boarding - discrepancies and paging missing checked-in passenger; 16: Commercial publicity/passenger convenience - VIP, press, ground meals and missing personal items; 17: Catering order - late or incorrect order given to supplier; 18: Baggage processing - sorting etc.; 21: Documentation - errors etc; 22: Late positioning; 23: Late acceptance; 24: Inadequate packing; 25: Oversales - booking errors; 26: Late preparation in warehouse; 27: Documentation packing - etc; 28: Late positioning; 29: Late acceptance; 31: Aircraft documentation late/inaccurate - weight and balance general declaration pax manifest etc; 32: Loading/unloading - bulky special load cabin load lack of loading staff; 33: Loading equipment - lack of or breakdown e.g. container pallet loader lack of staff; 34: Servicing equipment - lack of or breakdown lack of staff e.g. steps; 35: Aircraft cleaning; 36: Fuelling/defuelling - fuel supplier; 37: Catering - late delivery or loading; 38: Uld - lack of or serviceability; 39: Technical equipment - lack of or breakdown lack of staff e.g. pushback; 41: Aircraft defects; 42: Scheduled maintenance - late release; 43: Non-scheduled; 44: Spares and maintenance; 45: Aog spares - to be carried to another station; 46: Aircraft change - for technical reasons; 47: Standby aircraft - lack of planned standby aircraft for technical reasons; 48: Scheduled cabin configuration/version adjustments; 51: Damage during flight operations - bird or lightning strike, turbulence, heavy or overweight landing, collision during taxiing; 52: Damage during ground operations - collisions (other than during taxiing), loading/off-loading damage, contamination, towing, extreme weather conditions; 55: Departure control; 56: Cargo preparation; 57: Flight plans; 61: Flight plan - late completion or change of flight documentation; 62: Operational requirements - fuel load alteration; 63: Late crew procedures - other than connection and standby (flight deck or entire crew); 64: Flight desk crew shortage - sickness, awaiting standby, flight time limitations, crew meals, valid visa, health documents, etc; 65: Flight deck crew special request - not within operational requirements; 66: Late cabin crew boarding or departure procedures - other than connection and standby; 67: Cabin crew shortage - sickness, awaiting standby, flight time limitations, crew meals, valid visa, health documents, etc; 68: Cabin crew error or special request - not within operational requirements; 69: Captain request for security check - extraordinary; 71: Departure station; 72: Destination station; 73: En route or alternate; 75: De-icing of aircraft - Removal of ice and/or snow frost prevention equipment; 76: Removal of snow ice water and sand from airport; 77: Ground handling impaired by adverse weather conditions; 81: ATFM due to ATC en-route demand/capacity - standard demand/capacity problems; 82: ATFM due to ATC staff / equipment en-route - reduced capacity caused by industrial action or staff shortage or equipment failure, extraordinary demand due to capacity reduction in neighbouring area; 83: ATFM due to restriction at destination airport - airport and/or runway closed due to obstruction, industrial action, staff shortage, political unrest, noise abatement, night curfew, special flights; 84: ATFM due to weather at destination; 85: Mandatory security; 86: Immigration customs health; 87: Airport facilities - parking stands, ramp congestion, lighting, buildings, gate limitations, etc; 88: Restrictions at airport of destination - airport and/or runway closed due to obstruction, industrial action, staff shortage, political unrest, noise abatement, night curfew, special flights; 89: Restrictions at airport of departure with or without ATFM restrictions - incl. Air Traf. Svcs, startup/pushbk, apt and/or runwy closed due to obstruction/weather, industl. actn, staff shortage, political unrest, noise abatement, night curfew, special flts; 91: Load connection - awaiting load from another flight; 92: Through check-in error - passenger and baggage; 93: Aircraft rotation - late arrival of aircraft from another flight or previous sector; 94: Cabin crew rotation - awaiting cabin crew from another flight; 95: Crew rotation - awaiting crew from another flight (flight desk or entire crew); 96: Operational control - rerouting diversion consolidation aircraft change for reason other than technical; 97: Industrial action with own airline; 98: Industrial action outside own airline - excluding A.T.S.; 99: This code shall be used only when it is clear that a reason cannot be matched to any other code", alias="departureDelayReason")
    departure_delay_detail: Optional[StrictStr] = Field(default=None, description="Description of the possible values - ARVS: No delays posted; CNCL: Cancelled flight; CXCL: Cancelled; DCSN: Check with airline; DPTS: No delays posted; EOFF: Estimated Wheels Up/Airborne; EON: Estimated Wheels Down/Touchdown; ETA: Estimated time of arrival; ETD: Estimated time of departure; IN: Arrived in the gate; LX: Cancelled leg; NA: Not Available; NO: No-op; OFF: Departed off the ground; ON: Arrived on the ground; OUT: Departed out of the gate; RFA: Return from Airborne; RTR: Return to Ramp; SCHD: Schedule Change", alias="departureDelayDetail")
    departure_gate: Optional[StrictStr] = Field(default=None, alias="departureGate")
    departure_terminal: Optional[StrictStr] = Field(default=None, alias="departureTerminal")
    arrival_status: Optional[StrictStr] = Field(default=None, description="Description of the possible values - CX: cancelled; DY: delayed; EY: early; OT: on time; NS: no status", alias="arrivalStatus")
    arrival_delay_reason: Optional[StrictStr] = Field(default=None, description="Description of the possible values - 1: Airline internal; 2: Airline internal; 3: Airline Controlled Delay; 4: Downline Delay; 5: Other; 6: None; 9: Scheduled ground time less than declared minimum ground time; 11: Late check-in - acceptance after deadline; 12: Late check-in - congestion in check-in area; 13: Check-in error - congestion in check-in area; 14: Oversales - booking errors; 15: Boarding - discrepancies and paging missing checked-in passenger; 16: Commercial publicity/passenger convenience - VIP, press, ground meals and missing personal items; 17: Catering order - late or incorrect order given to supplier; 18: Baggage processing - sorting etc.; 21: Documentation - errors etc; 22: Late positioning; 23: Late acceptance; 24: Inadequate packing; 25: Oversales - booking errors; 26: Late preparation in warehouse; 27: Documentation packing - etc; 28: Late positioning; 29: Late acceptance; 31: Aircraft documentation late/inaccurate - weight and balance general declaration pax manifest etc; 32: Loading/unloading - bulky special load cabin load lack of loading staff; 33: Loading equipment - lack of or breakdown e.g. container pallet loader lack of staff; 34: Servicing equipment - lack of or breakdown lack of staff e.g. steps; 35: Aircraft cleaning; 36: Fuelling/defuelling - fuel supplier; 37: Catering - late delivery or loading; 38: Uld - lack of or serviceability; 39: Technical equipment - lack of or breakdown lack of staff e.g. pushback; 41: Aircraft defects; 42: Scheduled maintenance - late release; 43: Non-scheduled; 44: Spares and maintenance; 45: Aog spares - to be carried to another station; 46: Aircraft change - for technical reasons; 47: Standby aircraft - lack of planned standby aircraft for technical reasons; 48: Scheduled cabin configuration/version adjustments; 51: Damage during flight operations - bird or lightning strike, turbulence, heavy or overweight landing, collision during taxiing; 52: Damage during ground operations - collisions (other than during taxiing), loading/off-loading damage, contamination, towing, extreme weather conditions; 55: Departure control; 56: Cargo preparation; 57: Flight plans; 61: Flight plan - late completion or change of flight documentation; 62: Operational requirements - fuel load alteration; 63: Late crew procedures - other than connection and standby (flight deck or entire crew); 64: Flight desk crew shortage - sickness, awaiting standby, flight time limitations, crew meals, valid visa, health documents, etc; 65: Flight deck crew special request - not within operational requirements; 66: Late cabin crew boarding or departure procedures - other than connection and standby; 67: Cabin crew shortage - sickness, awaiting standby, flight time limitations, crew meals, valid visa, health documents, etc; 68: Cabin crew error or special request - not within operational requirements; 69: Captain request for security check - extraordinary; 71: Departure station; 72: Destination station; 73: En route or alternate; 75: De-icing of aircraft - Removal of ice and/or snow frost prevention equipment; 76: Removal of snow ice water and sand from airport; 77: Ground handling impaired by adverse weather conditions; 81: ATFM due to ATC en-route demand/capacity - standard demand/capacity problems; 82: ATFM due to ATC staff / equipment en-route - reduced capacity caused by industrial action or staff shortage or equipment failure, extraordinary demand due to capacity reduction in neighbouring area; 83: ATFM due to restriction at destination airport - airport and/or runway closed due to obstruction, industrial action, staff shortage, political unrest, noise abatement, night curfew, special flights; 84: ATFM due to weather at destination; 85: Mandatory security; 86: Immigration customs health; 87: Airport facilities - parking stands, ramp congestion, lighting, buildings, gate limitations, etc; 88: Restrictions at airport of destination - airport and/or runway closed due to obstruction, industrial action, staff shortage, political unrest, noise abatement, night curfew, special flights; 89: Restrictions at airport of departure with or without ATFM restrictions - incl. Air Traf. Svcs, startup/pushbk, apt and/or runwy closed due to obstruction/weather, industl. actn, staff shortage, political unrest, noise abatement, night curfew, special flts; 91: Load connection - awaiting load from another flight; 92: Through check-in error - passenger and baggage; 93: Aircraft rotation - late arrival of aircraft from another flight or previous sector; 94: Cabin crew rotation - awaiting cabin crew from another flight; 95: Crew rotation - awaiting crew from another flight (flight desk or entire crew); 96: Operational control - rerouting diversion consolidation aircraft change for reason other than technical; 97: Industrial action with own airline; 98: Industrial action outside own airline - excluding A.T.S.; 99: This code shall be used only when it is clear that a reason cannot be matched to any other code", alias="arrivalDelayReason")
    arrival_delay_detail: Optional[StrictStr] = Field(default=None, description="Description of the possible values - ARVS: No delays posted; CNCL: Cancelled flight; CXCL: Cancelled; DCSN: Check with airline; DPTS: No delays posted; EOFF: Estimated Wheels Up/Airborne; EON: Estimated Wheels Down/Touchdown; ETA: Estimated time of arrival; ETD: Estimated time of departure; IN: Arrived in the gate; LX: Cancelled leg; NA: Not Available; NO: No-op; OFF: Departed off the ground; ON: Arrived on the ground; OUT: Departed out of the gate; RFA: Return from Airborne; RTR: Return to Ramp; SCHD: Schedule Change", alias="arrivalDelayDetail")
    arrival_gate: Optional[StrictStr] = Field(default=None, alias="arrivalGate")
    arrival_terminal: Optional[StrictStr] = Field(default=None, alias="arrivalTerminal")
    arrival_baggage_claim: Optional[StrictStr] = Field(default=None, alias="arrivalBaggageClaim")
    ground_speed: Optional[StrictInt] = Field(default=None, alias="groundSpeed")
    heading: Optional[StrictInt] = None
    altitude: Optional[StrictInt] = None
    vertical_rate: Optional[StrictInt] = Field(default=None, alias="verticalRate")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    squawk_code: Optional[StrictInt] = Field(default=None, alias="squawkCode")
    source: Optional[StrictStr] = None
    created: Optional[datetime] = None
    updated: Optional[datetime] = None
    positions: Optional[List[ApiTrail]] = None
    flight_url: Optional[StrictStr] = Field(default=None, alias="flightUrl")
    flight_kml: Optional[StrictStr] = Field(default=None, alias="flightKml")
    flight_csv: Optional[StrictStr] = Field(default=None, alias="flightCSV")
    flight_geo_json: Optional[StrictStr] = Field(default=None, alias="flightGeoJSON")
    icao_route: Optional[StrictStr] = Field(default=None, alias="icaoRoute")
    codeshares: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["callsign", "flightNumberIata", "flightNumberIcao", "aircraftRegistration", "aircraftModeS", "aircraftType", "aircraftClasses", "aircraftTypeDescription", "airlineIata", "airlineIcao", "airlineName", "depAirportIcao", "depAirportIata", "depAirportName", "depAirportCity", "depAirportState", "depAirportCountry", "depAirportCountryIso2", "depAirportCountryIso3", "depAirportLatitude", "depAirportLongitude", "depAirportTz", "depAirportTzDiffUTC", "scheduledDeparture", "estimatedDeparture", "estimatedTakeoff", "actualDeparture", "actualTakeoff", "calculatedTakeoff", "divAirportIcao", "divAirportIata", "divAirportName", "divAirportCity", "divAirportState", "divAirportCountry", "divAirportCountryIso2", "divAirportCountryIso3", "divAirportLatitude", "divAirportLongitude", "divAirportTz", "divAirportTzDiffUTC", "arrAirportIcao", "arrAirportIata", "arrAirportName", "arrAirportCity", "arrAirportState", "arrAirportCountry", "arrAirportCountryIso2", "arrAirportCountryIso3", "arrAirportLatitude", "arrAirportLongitude", "arrAirportTz", "arrAirportTzDiffUTC", "scheduledArrival", "estimatedArrival", "estimatedLanding", "actualArrival", "actualLanding", "calculatedLanding", "departureStatus", "departureDelayReason", "departureDelayDetail", "departureGate", "departureTerminal", "arrivalStatus", "arrivalDelayReason", "arrivalDelayDetail", "arrivalGate", "arrivalTerminal", "arrivalBaggageClaim", "groundSpeed", "heading", "altitude", "verticalRate", "latitude", "longitude", "squawkCode", "source", "created", "updated", "positions", "flightUrl", "flightKml", "flightCSV", "flightGeoJSON", "icaoRoute", "codeshares", "status"]

    @field_validator('departure_status')
    def departure_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CX', 'DY', 'EY', 'OT', 'NS']):
            raise ValueError("must be one of enum values ('CX', 'DY', 'EY', 'OT', 'NS')")
        return value

    @field_validator('departure_delay_reason')
    def departure_delay_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1', '2', '3', '4', '5', '6', '9', '11', '12', '13', '14', '15', '16', '17', '18', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '51', '52', '55', '56', '57', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99']):
            raise ValueError("must be one of enum values ('1', '2', '3', '4', '5', '6', '9', '11', '12', '13', '14', '15', '16', '17', '18', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '51', '52', '55', '56', '57', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99')")
        return value

    @field_validator('departure_delay_detail')
    def departure_delay_detail_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARVS', 'CNCL', 'CXCL', 'DCSN', 'DPTS', 'EOFF', 'EON', 'ETA', 'ETD', 'IN', 'LX', 'NA', 'NO', 'OFF', 'ON', 'OUT', 'RFA', 'RTR', 'SCHD']):
            raise ValueError("must be one of enum values ('ARVS', 'CNCL', 'CXCL', 'DCSN', 'DPTS', 'EOFF', 'EON', 'ETA', 'ETD', 'IN', 'LX', 'NA', 'NO', 'OFF', 'ON', 'OUT', 'RFA', 'RTR', 'SCHD')")
        return value

    @field_validator('arrival_status')
    def arrival_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CX', 'DY', 'EY', 'OT', 'NS']):
            raise ValueError("must be one of enum values ('CX', 'DY', 'EY', 'OT', 'NS')")
        return value

    @field_validator('arrival_delay_reason')
    def arrival_delay_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1', '2', '3', '4', '5', '6', '9', '11', '12', '13', '14', '15', '16', '17', '18', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '51', '52', '55', '56', '57', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99']):
            raise ValueError("must be one of enum values ('1', '2', '3', '4', '5', '6', '9', '11', '12', '13', '14', '15', '16', '17', '18', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '51', '52', '55', '56', '57', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99')")
        return value

    @field_validator('arrival_delay_detail')
    def arrival_delay_detail_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARVS', 'CNCL', 'CXCL', 'DCSN', 'DPTS', 'EOFF', 'EON', 'ETA', 'ETD', 'IN', 'LX', 'NA', 'NO', 'OFF', 'ON', 'OUT', 'RFA', 'RTR', 'SCHD']):
            raise ValueError("must be one of enum values ('ARVS', 'CNCL', 'CXCL', 'DCSN', 'DPTS', 'EOFF', 'EON', 'ETA', 'ETD', 'IN', 'LX', 'NA', 'NO', 'OFF', 'ON', 'OUT', 'RFA', 'RTR', 'SCHD')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_FLIGHT', 'CANCELLED', 'SCHEDULED', 'LANDED', 'ON_GROUND', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('IN_FLIGHT', 'CANCELLED', 'SCHEDULED', 'LANDED', 'ON_GROUND', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiFlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item_positions in self.positions:
                if _item_positions:
                    _items.append(_item_positions.to_dict())
            _dict['positions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiFlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callsign": obj.get("callsign"),
            "flightNumberIata": obj.get("flightNumberIata"),
            "flightNumberIcao": obj.get("flightNumberIcao"),
            "aircraftRegistration": obj.get("aircraftRegistration"),
            "aircraftModeS": obj.get("aircraftModeS"),
            "aircraftType": obj.get("aircraftType"),
            "aircraftClasses": obj.get("aircraftClasses"),
            "aircraftTypeDescription": obj.get("aircraftTypeDescription"),
            "airlineIata": obj.get("airlineIata"),
            "airlineIcao": obj.get("airlineIcao"),
            "airlineName": obj.get("airlineName"),
            "depAirportIcao": obj.get("depAirportIcao"),
            "depAirportIata": obj.get("depAirportIata"),
            "depAirportName": obj.get("depAirportName"),
            "depAirportCity": obj.get("depAirportCity"),
            "depAirportState": obj.get("depAirportState"),
            "depAirportCountry": obj.get("depAirportCountry"),
            "depAirportCountryIso2": obj.get("depAirportCountryIso2"),
            "depAirportCountryIso3": obj.get("depAirportCountryIso3"),
            "depAirportLatitude": obj.get("depAirportLatitude"),
            "depAirportLongitude": obj.get("depAirportLongitude"),
            "depAirportTz": obj.get("depAirportTz"),
            "depAirportTzDiffUTC": obj.get("depAirportTzDiffUTC"),
            "scheduledDeparture": obj.get("scheduledDeparture"),
            "estimatedDeparture": obj.get("estimatedDeparture"),
            "estimatedTakeoff": obj.get("estimatedTakeoff"),
            "actualDeparture": obj.get("actualDeparture"),
            "actualTakeoff": obj.get("actualTakeoff"),
            "calculatedTakeoff": obj.get("calculatedTakeoff"),
            "divAirportIcao": obj.get("divAirportIcao"),
            "divAirportIata": obj.get("divAirportIata"),
            "divAirportName": obj.get("divAirportName"),
            "divAirportCity": obj.get("divAirportCity"),
            "divAirportState": obj.get("divAirportState"),
            "divAirportCountry": obj.get("divAirportCountry"),
            "divAirportCountryIso2": obj.get("divAirportCountryIso2"),
            "divAirportCountryIso3": obj.get("divAirportCountryIso3"),
            "divAirportLatitude": obj.get("divAirportLatitude"),
            "divAirportLongitude": obj.get("divAirportLongitude"),
            "divAirportTz": obj.get("divAirportTz"),
            "divAirportTzDiffUTC": obj.get("divAirportTzDiffUTC"),
            "arrAirportIcao": obj.get("arrAirportIcao"),
            "arrAirportIata": obj.get("arrAirportIata"),
            "arrAirportName": obj.get("arrAirportName"),
            "arrAirportCity": obj.get("arrAirportCity"),
            "arrAirportState": obj.get("arrAirportState"),
            "arrAirportCountry": obj.get("arrAirportCountry"),
            "arrAirportCountryIso2": obj.get("arrAirportCountryIso2"),
            "arrAirportCountryIso3": obj.get("arrAirportCountryIso3"),
            "arrAirportLatitude": obj.get("arrAirportLatitude"),
            "arrAirportLongitude": obj.get("arrAirportLongitude"),
            "arrAirportTz": obj.get("arrAirportTz"),
            "arrAirportTzDiffUTC": obj.get("arrAirportTzDiffUTC"),
            "scheduledArrival": obj.get("scheduledArrival"),
            "estimatedArrival": obj.get("estimatedArrival"),
            "estimatedLanding": obj.get("estimatedLanding"),
            "actualArrival": obj.get("actualArrival"),
            "actualLanding": obj.get("actualLanding"),
            "calculatedLanding": obj.get("calculatedLanding"),
            "departureStatus": obj.get("departureStatus"),
            "departureDelayReason": obj.get("departureDelayReason"),
            "departureDelayDetail": obj.get("departureDelayDetail"),
            "departureGate": obj.get("departureGate"),
            "departureTerminal": obj.get("departureTerminal"),
            "arrivalStatus": obj.get("arrivalStatus"),
            "arrivalDelayReason": obj.get("arrivalDelayReason"),
            "arrivalDelayDetail": obj.get("arrivalDelayDetail"),
            "arrivalGate": obj.get("arrivalGate"),
            "arrivalTerminal": obj.get("arrivalTerminal"),
            "arrivalBaggageClaim": obj.get("arrivalBaggageClaim"),
            "groundSpeed": obj.get("groundSpeed"),
            "heading": obj.get("heading"),
            "altitude": obj.get("altitude"),
            "verticalRate": obj.get("verticalRate"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "squawkCode": obj.get("squawkCode"),
            "source": obj.get("source"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "positions": [ApiTrail.from_dict(_item) for _item in obj["positions"]] if obj.get("positions") is not None else None,
            "flightUrl": obj.get("flightUrl"),
            "flightKml": obj.get("flightKml"),
            "flightCSV": obj.get("flightCSV"),
            "flightGeoJSON": obj.get("flightGeoJSON"),
            "icaoRoute": obj.get("icaoRoute"),
            "codeshares": obj.get("codeshares"),
            "status": obj.get("status")
        })
        return _obj


