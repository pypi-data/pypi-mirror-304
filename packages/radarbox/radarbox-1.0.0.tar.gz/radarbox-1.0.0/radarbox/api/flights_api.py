# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from radarbox.models.flights_query import FlightsQuery
from radarbox.models.flights_response import FlightsResponse
from radarbox.models.geo_search_query import GeoSearchQuery
from radarbox.models.rt_aircraft_position_query import RtAircraftPositionQuery
from radarbox.models.scheduled_flights_response import ScheduledFlightsResponse

from radarbox.api_client import ApiClient, RequestSerialized
from radarbox.api_response import ApiResponse
from radarbox.rest import RESTResponseType


class FlightsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def aircraft_position(
        self,
        authorization: Optional[StrictStr] = None,
        rt_aircraft_position_query: Optional[RtAircraftPositionQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlightsResponse:
        """Get live flights 

        Use this endpoint if your goal is to get real time information for live flights, either if you are looking for a specific geographical location or particular aircraft/airline/airport.

        :param authorization:
        :type authorization: str
        :param rt_aircraft_position_query:
        :type rt_aircraft_position_query: RtAircraftPositionQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aircraft_position_serialize(
            authorization=authorization,
            rt_aircraft_position_query=rt_aircraft_position_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def aircraft_position_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        rt_aircraft_position_query: Optional[RtAircraftPositionQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlightsResponse]:
        """Get live flights 

        Use this endpoint if your goal is to get real time information for live flights, either if you are looking for a specific geographical location or particular aircraft/airline/airport.

        :param authorization:
        :type authorization: str
        :param rt_aircraft_position_query:
        :type rt_aircraft_position_query: RtAircraftPositionQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aircraft_position_serialize(
            authorization=authorization,
            rt_aircraft_position_query=rt_aircraft_position_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def aircraft_position_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        rt_aircraft_position_query: Optional[RtAircraftPositionQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get live flights 

        Use this endpoint if your goal is to get real time information for live flights, either if you are looking for a specific geographical location or particular aircraft/airline/airport.

        :param authorization:
        :type authorization: str
        :param rt_aircraft_position_query:
        :type rt_aircraft_position_query: RtAircraftPositionQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aircraft_position_serialize(
            authorization=authorization,
            rt_aircraft_position_query=rt_aircraft_position_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _aircraft_position_serialize(
        self,
        authorization,
        rt_aircraft_position_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if rt_aircraft_position_query is not None:
            _body_params = rt_aircraft_position_query


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/flights/live',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def geosearch(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        geo_search_query: Optional[GeoSearchQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlightsResponse:
        """Search flights by geographical area

        Use this endpoint if you are interested in knowing which flights have flown over a particular geographical area at a given point in time

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param geo_search_query:
        :type geo_search_query: GeoSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geosearch_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            geo_search_query=geo_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def geosearch_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        geo_search_query: Optional[GeoSearchQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlightsResponse]:
        """Search flights by geographical area

        Use this endpoint if you are interested in knowing which flights have flown over a particular geographical area at a given point in time

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param geo_search_query:
        :type geo_search_query: GeoSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geosearch_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            geo_search_query=geo_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def geosearch_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        geo_search_query: Optional[GeoSearchQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search flights by geographical area

        Use this endpoint if you are interested in knowing which flights have flown over a particular geographical area at a given point in time

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param geo_search_query:
        :type geo_search_query: GeoSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geosearch_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            geo_search_query=geo_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _geosearch_serialize(
        self,
        authorization,
        page,
        page_size,
        geo_search_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if geo_search_query is not None:
            _body_params = geo_search_query


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/flights/geosearch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_scheduled_flights(
        self,
        authorization: Optional[StrictStr] = None,
        flight_id: Annotated[Optional[StrictStr], Field(description="Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)")] = None,
        from_airport: Annotated[Optional[StrictStr], Field(description="Request only flights departing from this airport (IATA/ICAO)")] = None,
        to_airport: Annotated[Optional[StrictStr], Field(description="Request only flights arriving to this airport (IATA/ICAO)")] = None,
        airline: Annotated[Optional[StrictStr], Field(description="Request only flights for this airline")] = None,
        departure_from_date: Annotated[Optional[datetime], Field(description="Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        departure_to_date: Annotated[Optional[datetime], Field(description="Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_from_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_to_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScheduledFlightsResponse:
        """Get scheduled flights

        Use this endpoint if you want to know schedules of future flights

        :param authorization:
        :type authorization: str
        :param flight_id: Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)
        :type flight_id: str
        :param from_airport: Request only flights departing from this airport (IATA/ICAO)
        :type from_airport: str
        :param to_airport: Request only flights arriving to this airport (IATA/ICAO)
        :type to_airport: str
        :param airline: Request only flights for this airline
        :type airline: str
        :param departure_from_date: Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_from_date: datetime
        :param departure_to_date: Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_to_date: datetime
        :param arrival_from_date: Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_from_date: datetime
        :param arrival_to_date: Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_to_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scheduled_flights_serialize(
            authorization=authorization,
            flight_id=flight_id,
            from_airport=from_airport,
            to_airport=to_airport,
            airline=airline,
            departure_from_date=departure_from_date,
            departure_to_date=departure_to_date,
            arrival_from_date=arrival_from_date,
            arrival_to_date=arrival_to_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScheduledFlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_scheduled_flights_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        flight_id: Annotated[Optional[StrictStr], Field(description="Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)")] = None,
        from_airport: Annotated[Optional[StrictStr], Field(description="Request only flights departing from this airport (IATA/ICAO)")] = None,
        to_airport: Annotated[Optional[StrictStr], Field(description="Request only flights arriving to this airport (IATA/ICAO)")] = None,
        airline: Annotated[Optional[StrictStr], Field(description="Request only flights for this airline")] = None,
        departure_from_date: Annotated[Optional[datetime], Field(description="Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        departure_to_date: Annotated[Optional[datetime], Field(description="Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_from_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_to_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScheduledFlightsResponse]:
        """Get scheduled flights

        Use this endpoint if you want to know schedules of future flights

        :param authorization:
        :type authorization: str
        :param flight_id: Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)
        :type flight_id: str
        :param from_airport: Request only flights departing from this airport (IATA/ICAO)
        :type from_airport: str
        :param to_airport: Request only flights arriving to this airport (IATA/ICAO)
        :type to_airport: str
        :param airline: Request only flights for this airline
        :type airline: str
        :param departure_from_date: Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_from_date: datetime
        :param departure_to_date: Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_to_date: datetime
        :param arrival_from_date: Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_from_date: datetime
        :param arrival_to_date: Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_to_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scheduled_flights_serialize(
            authorization=authorization,
            flight_id=flight_id,
            from_airport=from_airport,
            to_airport=to_airport,
            airline=airline,
            departure_from_date=departure_from_date,
            departure_to_date=departure_to_date,
            arrival_from_date=arrival_from_date,
            arrival_to_date=arrival_to_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScheduledFlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_scheduled_flights_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        flight_id: Annotated[Optional[StrictStr], Field(description="Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)")] = None,
        from_airport: Annotated[Optional[StrictStr], Field(description="Request only flights departing from this airport (IATA/ICAO)")] = None,
        to_airport: Annotated[Optional[StrictStr], Field(description="Request only flights arriving to this airport (IATA/ICAO)")] = None,
        airline: Annotated[Optional[StrictStr], Field(description="Request only flights for this airline")] = None,
        departure_from_date: Annotated[Optional[datetime], Field(description="Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        departure_to_date: Annotated[Optional[datetime], Field(description="Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_from_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        arrival_to_date: Annotated[Optional[datetime], Field(description="Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get scheduled flights

        Use this endpoint if you want to know schedules of future flights

        :param authorization:
        :type authorization: str
        :param flight_id: Flight ID/Number (IATA) - partial entries can be used (e.g. AA3*)
        :type flight_id: str
        :param from_airport: Request only flights departing from this airport (IATA/ICAO)
        :type from_airport: str
        :param to_airport: Request only flights arriving to this airport (IATA/ICAO)
        :type to_airport: str
        :param airline: Request only flights for this airline
        :type airline: str
        :param departure_from_date: Request only flights that depart from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_from_date: datetime
        :param departure_to_date: Request only flights that depart until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type departure_to_date: datetime
        :param arrival_from_date: Request only flights that arrive from this date onwards (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_from_date: datetime
        :param arrival_to_date: Request only flights that arrive until this date (format yyyy-MM-dd'T'HH:mm:ss'Z')
        :type arrival_to_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scheduled_flights_serialize(
            authorization=authorization,
            flight_id=flight_id,
            from_airport=from_airport,
            to_airport=to_airport,
            airline=airline,
            departure_from_date=departure_from_date,
            departure_to_date=departure_to_date,
            arrival_from_date=arrival_from_date,
            arrival_to_date=arrival_to_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScheduledFlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_scheduled_flights_serialize(
        self,
        authorization,
        flight_id,
        from_airport,
        to_airport,
        airline,
        departure_from_date,
        departure_to_date,
        arrival_from_date,
        arrival_to_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if flight_id is not None:
            
            _query_params.append(('flightId', flight_id))
            
        if from_airport is not None:
            
            _query_params.append(('fromAirport', from_airport))
            
        if to_airport is not None:
            
            _query_params.append(('toAirport', to_airport))
            
        if airline is not None:
            
            _query_params.append(('airline', airline))
            
        if departure_from_date is not None:
            if isinstance(departure_from_date, datetime):
                _query_params.append(
                    (
                        'departureFromDate',
                        departure_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departureFromDate', departure_from_date))
            
        if departure_to_date is not None:
            if isinstance(departure_to_date, datetime):
                _query_params.append(
                    (
                        'departureToDate',
                        departure_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departureToDate', departure_to_date))
            
        if arrival_from_date is not None:
            if isinstance(arrival_from_date, datetime):
                _query_params.append(
                    (
                        'arrivalFromDate',
                        arrival_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('arrivalFromDate', arrival_from_date))
            
        if arrival_to_date is not None:
            if isinstance(arrival_to_date, datetime):
                _query_params.append(
                    (
                        'arrivalToDate',
                        arrival_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('arrivalToDate', arrival_to_date))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/flights/schedules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        flights_query: Optional[FlightsQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlightsResponse:
        """Search flights

        Use this endpoint for general flight searches - past, present or future (scheduled) - based on departure/arrival location or individual flights and tail numbers. The search always needs to be restricted by date (either departure, arrival or both).

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param flights_query:
        :type flights_query: FlightsQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            flights_query=flights_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        flights_query: Optional[FlightsQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlightsResponse]:
        """Search flights

        Use this endpoint for general flight searches - past, present or future (scheduled) - based on departure/arrival location or individual flights and tail numbers. The search always needs to be restricted by date (either departure, arrival or both).

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param flights_query:
        :type flights_query: FlightsQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            flights_query=flights_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Request page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        flights_query: Optional[FlightsQuery] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search flights

        Use this endpoint for general flight searches - past, present or future (scheduled) - based on departure/arrival location or individual flights and tail numbers. The search always needs to be restricted by date (either departure, arrival or both).

        :param authorization:
        :type authorization: str
        :param page: Request page
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param flights_query:
        :type flights_query: FlightsQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            authorization=authorization,
            page=page,
            page_size=page_size,
            flights_query=flights_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_serialize(
        self,
        authorization,
        page,
        page_size,
        flights_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if flights_query is not None:
            _body_params = flights_query


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/flights/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


