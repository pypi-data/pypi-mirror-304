# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from radarbox.models.api_aircraft_statistic import ApiAircraftStatistic
from typing import Optional, Set
from typing_extensions import Self

class ApiAircraft(BaseModel):
    """
    ApiAircraft
    """ # noqa: E501
    mode_s: Optional[StrictStr] = Field(default=None, alias="modeS")
    registration: Optional[StrictStr] = None
    type_icao: Optional[StrictStr] = Field(default=None, alias="typeIcao")
    type_iata: Optional[StrictStr] = Field(default=None, alias="typeIata")
    type_description: Optional[StrictStr] = Field(default=None, alias="typeDescription")
    class_description: Optional[StrictStr] = Field(default=None, alias="classDescription")
    company_icao: Optional[StrictStr] = Field(default=None, alias="companyIcao")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    first_flight: Optional[datetime] = Field(default=None, alias="firstFlight")
    serial_number: Optional[StrictStr] = Field(default=None, alias="serialNumber")
    photos: Optional[List[StrictStr]] = None
    thumbnails: Optional[List[StrictStr]] = None
    aircraft_statitics: Optional[List[ApiAircraftStatistic]] = Field(default=None, alias="aircraftStatitics")
    decommissioned: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["modeS", "registration", "typeIcao", "typeIata", "typeDescription", "classDescription", "companyIcao", "companyName", "firstFlight", "serialNumber", "photos", "thumbnails", "aircraftStatitics", "decommissioned"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiAircraft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aircraft_statitics (list)
        _items = []
        if self.aircraft_statitics:
            for _item_aircraft_statitics in self.aircraft_statitics:
                if _item_aircraft_statitics:
                    _items.append(_item_aircraft_statitics.to_dict())
            _dict['aircraftStatitics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiAircraft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modeS": obj.get("modeS"),
            "registration": obj.get("registration"),
            "typeIcao": obj.get("typeIcao"),
            "typeIata": obj.get("typeIata"),
            "typeDescription": obj.get("typeDescription"),
            "classDescription": obj.get("classDescription"),
            "companyIcao": obj.get("companyIcao"),
            "companyName": obj.get("companyName"),
            "firstFlight": obj.get("firstFlight"),
            "serialNumber": obj.get("serialNumber"),
            "photos": obj.get("photos"),
            "thumbnails": obj.get("thumbnails"),
            "aircraftStatitics": [ApiAircraftStatistic.from_dict(_item) for _item in obj["aircraftStatitics"]] if obj.get("aircraftStatitics") is not None else None,
            "decommissioned": obj.get("decommissioned")
        })
        return _obj


