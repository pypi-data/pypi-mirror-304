# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from radarbox.models.api_taf_sky_condition import ApiTafSkyCondition
from typing import Optional, Set
from typing_extensions import Self

class ApiTafForecast(BaseModel):
    """
    Single forecast with a valid to and from date/time
    """ # noqa: E501
    valid_fom: Optional[datetime] = Field(default=None, alias="validFom")
    valid_until: Optional[datetime] = Field(default=None, alias="validUntil")
    wind_direction: Optional[StrictInt] = Field(default=None, alias="windDirection")
    wind_speed: Optional[StrictInt] = Field(default=None, alias="windSpeed")
    wind_gust: Optional[StrictInt] = Field(default=None, alias="windGust")
    visibility: Optional[Union[StrictFloat, StrictInt]] = None
    altimeter: Optional[Union[StrictFloat, StrictInt]] = None
    wx: Optional[StrictStr] = None
    sky_condition: Optional[List[ApiTafSkyCondition]] = Field(default=None, alias="skyCondition")
    icing_condition: Optional[StrictStr] = Field(default=None, alias="icingCondition")
    turbulence_condition: Optional[StrictStr] = Field(default=None, alias="turbulenceCondition")
    __properties: ClassVar[List[str]] = ["validFom", "validUntil", "windDirection", "windSpeed", "windGust", "visibility", "altimeter", "wx", "skyCondition", "icingCondition", "turbulenceCondition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiTafForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sky_condition (list)
        _items = []
        if self.sky_condition:
            for _item_sky_condition in self.sky_condition:
                if _item_sky_condition:
                    _items.append(_item_sky_condition.to_dict())
            _dict['skyCondition'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiTafForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validFom": obj.get("validFom"),
            "validUntil": obj.get("validUntil"),
            "windDirection": obj.get("windDirection"),
            "windSpeed": obj.get("windSpeed"),
            "windGust": obj.get("windGust"),
            "visibility": obj.get("visibility"),
            "altimeter": obj.get("altimeter"),
            "wx": obj.get("wx"),
            "skyCondition": [ApiTafSkyCondition.from_dict(_item) for _item in obj["skyCondition"]] if obj.get("skyCondition") is not None else None,
            "icingCondition": obj.get("icingCondition"),
            "turbulenceCondition": obj.get("turbulenceCondition")
        })
        return _obj


