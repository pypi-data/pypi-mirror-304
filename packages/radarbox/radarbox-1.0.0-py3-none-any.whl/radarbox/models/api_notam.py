# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from radarbox.models.api_notam_translation import ApiNotamTranslation
from typing import Optional, Set
from typing_extensions import Self

class ApiNotam(BaseModel):
    """
    NOTAMs are a way of local aviation authorities alerting pilots of potential hazards
    """ # noqa: E501
    number: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    notam_class: Optional[StrictStr] = Field(default=None, alias="notamClass")
    year: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    effective_start: Optional[datetime] = Field(default=None, alias="effectiveStart")
    effective_end: Optional[datetime] = Field(default=None, alias="effectiveEnd")
    icao_location: Optional[StrictStr] = Field(default=None, alias="icaoLocation")
    issued: Optional[datetime] = None
    affected_fir: Optional[StrictStr] = Field(default=None, alias="affectedFir")
    minimum_flight_level: Optional[StrictStr] = Field(default=None, alias="minimumFlightLevel")
    maximum_flight_level: Optional[StrictStr] = Field(default=None, alias="maximumFlightLevel")
    radius: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    translations: Optional[List[ApiNotamTranslation]] = None
    __properties: ClassVar[List[str]] = ["number", "id", "notamClass", "year", "type", "effectiveStart", "effectiveEnd", "icaoLocation", "issued", "affectedFir", "minimumFlightLevel", "maximumFlightLevel", "radius", "location", "text", "translations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiNotam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in translations (list)
        _items = []
        if self.translations:
            for _item_translations in self.translations:
                if _item_translations:
                    _items.append(_item_translations.to_dict())
            _dict['translations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiNotam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "id": obj.get("id"),
            "notamClass": obj.get("notamClass"),
            "year": obj.get("year"),
            "type": obj.get("type"),
            "effectiveStart": obj.get("effectiveStart"),
            "effectiveEnd": obj.get("effectiveEnd"),
            "icaoLocation": obj.get("icaoLocation"),
            "issued": obj.get("issued"),
            "affectedFir": obj.get("affectedFir"),
            "minimumFlightLevel": obj.get("minimumFlightLevel"),
            "maximumFlightLevel": obj.get("maximumFlightLevel"),
            "radius": obj.get("radius"),
            "location": obj.get("location"),
            "text": obj.get("text"),
            "translations": [ApiNotamTranslation.from_dict(_item) for _item in obj["translations"]] if obj.get("translations") is not None else None
        })
        return _obj


