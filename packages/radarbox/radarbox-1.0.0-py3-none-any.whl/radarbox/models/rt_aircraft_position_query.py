# coding: utf-8

"""
    RadarBox On Demand API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RtAircraftPositionQuery(BaseModel):
    """
    RtAircraftPositionQuery
    """ # noqa: E501
    registrations: Optional[List[StrictStr]] = None
    mode_s_hex_codes: Optional[List[StrictStr]] = Field(default=None, alias="modeSHexCodes")
    flight_ids: Optional[List[StrictStr]] = Field(default=None, alias="flightIds")
    airlines: Optional[List[StrictStr]] = None
    aircraft_types: Optional[List[StrictStr]] = Field(default=None, alias="aircraftTypes")
    inc_last_known_pos: Optional[StrictBool] = Field(default=None, alias="incLastKnownPos")
    min_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minLatitude")
    max_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxLatitude")
    min_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minLongitude")
    max_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxLongitude")
    from_airports: Optional[List[StrictStr]] = Field(default=None, alias="fromAirports")
    to_airports: Optional[List[StrictStr]] = Field(default=None, alias="toAirports")
    to_or_from_airports: Optional[List[StrictStr]] = Field(default=None, alias="toOrFromAirports")
    __properties: ClassVar[List[str]] = ["registrations", "modeSHexCodes", "flightIds", "airlines", "aircraftTypes", "incLastKnownPos", "minLatitude", "maxLatitude", "minLongitude", "maxLongitude", "fromAirports", "toAirports", "toOrFromAirports"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RtAircraftPositionQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RtAircraftPositionQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "registrations": obj.get("registrations"),
            "modeSHexCodes": obj.get("modeSHexCodes"),
            "flightIds": obj.get("flightIds"),
            "airlines": obj.get("airlines"),
            "aircraftTypes": obj.get("aircraftTypes"),
            "incLastKnownPos": obj.get("incLastKnownPos"),
            "minLatitude": obj.get("minLatitude"),
            "maxLatitude": obj.get("maxLatitude"),
            "minLongitude": obj.get("minLongitude"),
            "maxLongitude": obj.get("maxLongitude"),
            "fromAirports": obj.get("fromAirports"),
            "toAirports": obj.get("toAirports"),
            "toOrFromAirports": obj.get("toOrFromAirports")
        })
        return _obj


