<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>3. Package reference</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="package-reference">
<h1><span class="section-number">3. </span>Package reference</h1>
<p>For greater convenience, the modules remain hidden inside the package. These modules are exposed for development
purposes only.</p>
<section id="module-ndict_tools.exception">
<span id="exceptions"></span><h2><span class="section-number">3.1. </span>Exceptions</h2>
<p>This module provides specific exception classes for nested dictionaries.
These exceptions extend the standard <strong>Exception</strong>, <strong>KeyError</strong> and <strong>AttributeError</strong> classes for future developments.</p>
<dl class="py exception">
<dt class="sig sig-object py" id="ndict_tools.exception.StackedAttributeError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.exception.</span></span><span class="sig-name descname"><span class="pre">StackedAttributeError</span></span></dt>
<dd><p>This exception is raised when a key is not compatible with stacked dictionary attributes.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="ndict_tools.exception.StackedDictionaryError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.exception.</span></span><span class="sig-name descname"><span class="pre">StackedDictionaryError</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span><span class="w"> </span><span class="p"><span class="pre">|</span></span><span class="w"> </span><span class="pre">None</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">error</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Exception raised when a stacked dictionary is invalid.</p>
<p>StackedDictionaryError exception class.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>message</strong> (<em>str</em>) – a message describing the error.</p></li>
<li><p><strong>error</strong> (<em>int</em>) – an integer describing the error.</p></li>
</ul>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p>None</p>
</dd>
</dl>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="ndict_tools.exception.StackedKeyError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.exception.</span></span><span class="sig-name descname"><span class="pre">StackedKeyError</span></span></dt>
<dd><p>Exception raised when a key is not compatible with a stacked dictionary.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="ndict_tools.exception.NestedDictionaryException">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.exception.</span></span><span class="sig-name descname"><span class="pre">NestedDictionaryException</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span><span class="w"> </span><span class="p"><span class="pre">|</span></span><span class="w"> </span><span class="pre">None</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">error</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Raised when a nested dictionary is invalid.</p>
<p>StackedDictionaryError exception class.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>message</strong> (<em>str</em>) – a message describing the error.</p></li>
<li><p><strong>error</strong> (<em>int</em>) – an integer describing the error.</p></li>
</ul>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p>None</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-ndict_tools.tools">
<span id="tools"></span><h2><span class="section-number">3.2. </span>Tools</h2>
<p>This module provides an intermediate technical class and tools for manipulating nested dictionaries.</p>
<p>Although this module is hidden from the package’s external view, its contents are important. The <code class="docutils literal notranslate"><span class="pre">_StackedDict</span></code> object
class orchestrates the basic attributes, functions and methods required to initialize and manage nested dictionaries.</p>
<p>This class could have been eliminated in favor of building all methods and tools into the main module containing the
<code class="docutils literal notranslate"><span class="pre">NestedDictionary</span></code> object class. However, this choice will enable us to build stacks of different dictionaries in the
future, without necessarily using the properties specific to these dictionaries.</p>
<dl class="py function">
<dt class="sig sig-object py" id="ndict_tools.tools.unpack_items">
<span class="sig-prename descclassname"><span class="pre">ndict_tools.tools.</span></span><span class="sig-name descname"><span class="pre">unpack_items</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This functions de-stacks items from a nested dictionary</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>dictionary</strong> (<em>dict</em>)</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>generator that yields items from a nested dictionary</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>generator</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="ndict_tools.tools.from_dict">
<span class="sig-prename descclassname"><span class="pre">ndict_tools.tools.</span></span><span class="sig-name descname"><span class="pre">from_dict</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This recursive function is used to transform a dictionary into a stacked dictionary.</p>
<p>This function enhances and replaces the previous from_dict() function in core module of this package.
It allows you to create an object subclasses of a _StackedDict with initialization options if requested and
attributes to be set.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>dictionary</strong> (<em>dict</em>) – dictionary to transform</p></li>
<li><p><strong>class_name</strong> (<em>object</em>) – name of the class to return</p></li>
<li><p><strong>class_options</strong> (<em>dict</em>) – <p>options to pass to the class or attributes of the class to be set</p>
<ul>
<li><p>init : parameters to initialize instances of the class, this should be from <code class="docutils literal notranslate"><span class="pre">__init__</span></code> function of the class</p></li>
<li><p>attributes : attributes to set the class attributes</p></li>
</ul>
</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>stacked dictionary or of subclasses of _StackedDict</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p><a class="reference internal" href="#ndict_tools.tools._StackedDict" title="ndict_tools.tools._StackedDict">_StackedDict</a></p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><a class="reference internal" href="#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if attribute called is not an attribute of the hierarchy of classes</p>
</dd>
</dl>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.tools.</span></span><span class="sig-name descname"><span class="pre">_StackedDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This class is an internal class for stacking nested dictionaries. This class is technical and is used to manage
the processing of nested dictionaries. It inherits from defaultdict.</p>
<p>At instantiation, it has two mandatory parameters for its creation:</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>indent</strong>, which is used to format the object’s display.</p></li>
<li><p><strong>default</strong>, which initializes the default_factory attribute of its parent class defaultdict.</p></li>
</ul>
</div></blockquote>
<p>These parameters are passed using the kwargs dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>args</strong> (<em>iterator</em>)</p></li>
<li><p><strong>kwargs</strong> (<em>dict</em>)</p></li>
</ul>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.__str__">
<span class="sig-name descname"><span class="pre">__str__</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Converts a nested dictionary to a string in json format</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a string in json format</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>str</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.unpacked_items">
<span class="sig-name descname"><span class="pre">unpacked_items</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method de-stacks items from a nested dictionary. It calls internal unpack_items() function.</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>generator that yields items from a nested dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>generator</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.unpacked_keys">
<span class="sig-name descname"><span class="pre">unpacked_keys</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method de-stacks keys from a nested dictionary and return them as keys. It calls internal unpack_items()
function.</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>generator that yields keys from a nested dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>generator</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.unpacked_values">
<span class="sig-name descname"><span class="pre">unpacked_values</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method de-stacks values from a nested dictionary and return them as values. It calls internal
unpack_items() function.</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>generator that yields values from a nested dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>generator</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.to_dict">
<span class="sig-name descname"><span class="pre">to_dict</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method converts a nested dictionary to a classical dictionary</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>dict</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.tools._StackedDict.update">
<span class="sig-name descname"><span class="pre">update</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Updates a stacked dictionary with key/value pairs.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>kwargs</strong> (<em>dict</em>) – key/value pairs where values are _StackedDict instances.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>None</p>
</dd>
<dt class="field-odd">Raises<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><a class="reference internal" href="#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if any of the key/value pairs cannot be updated:</p></li>
<li><p><strong>KeyError</strong> – if key/value are missing or invalid.</p></li>
</ul>
</dd>
</dl>
</dd></dl>

</dd></dl>

</section>
<section id="module-ndict_tools.core">
<span id="core"></span><h2><span class="section-number">3.3. </span>Core</h2>
<p>This module provides tools and class for creating nested dictionaries, since standard python does not have nested
dictionaries.</p>
<dl class="py class">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.core.</span></span><span class="sig-name descname"><span class="pre">NestedDictionary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Nested dictionary class.</p>
<p>This class is designed as a stacked dictionary. It represents a nest of dictionaries, that is to say that each
key is a value or a nested dictionary. And so on…</p>
<p>This function initializes a nested dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>args</strong> (<em>Iterable</em>) – the first one of the list must be a dictionary to instantiate an object.</p></li>
<li><p><strong>kwargs</strong> (<em>dict</em>) – <p>enrichments settings and</p>
<ul>
<li><p>indent : indentation of the printable nested dictionary (used by json.dumps() function)</p></li>
<li><p>strict : strict mode (False by default) define default answer to unknown key</p></li>
</ul>
</p></li>
</ul>
</dd>
</dl>
<p class="rubric">Example</p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary({'first':</span> <span class="pre">1,'second':</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;},</span> <span class="pre">'third':</span> <span class="pre">3,</span> <span class="pre">'fourth':</span> <span class="pre">4})</span></code></p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary(zip(['first','second',</span> <span class="pre">'third',</span> <span class="pre">'fourth'],</span>
<span class="pre">[1,</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;},</span> <span class="pre">3,</span> <span class="pre">4]))</span></code></p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary([('first',</span> <span class="pre">1),</span> <span class="pre">('second',</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;}),</span>
<span class="pre">('third',</span> <span class="pre">3),</span> <span class="pre">('fourth',</span> <span class="pre">4)])</span></code></p>
<dl class="py attribute">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.indent">
<span class="sig-name descname"><span class="pre">indent</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">int</span></em><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">0</span></em></dt>
<dd><p>indent is used to print the dictionary with json indentation</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.default_factory">
<span class="sig-name descname"><span class="pre">default_factory</span></span></dt>
<dd><p>Factory for default value called by __missing__().</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.__str__">
<span class="sig-name descname"><span class="pre">__str__</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Converts a nested dictionary to a string in json format</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a string in json format</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>str</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.update">
<span class="sig-name descname"><span class="pre">update</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Updates a stacked dictionary with key/value pairs.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>dictionary</strong> (<em>dict</em>) – a simple dict.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>None</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.occurrences">
<span class="sig-name descname"><span class="pre">occurrences</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the Number of occurrences of a key in a stacked dictionary including 0 if the key is not a keys in a
stacked dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – A possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>Number of occurrences or 0</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>int</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.is_key">
<span class="sig-name descname"><span class="pre">is_key</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Checks if a key is stacked or not.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – A possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>True if key is a stacked key, False otherwise</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>bool</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.key_list">
<span class="sig-name descname"><span class="pre">key_list</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>returns the list of unpacked keys containing the key from the stacked dictionary. If the key is not in the
dictionary, it raises StackedKeyError (not a key).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – a possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A list of unpacked keys containing the key from the stacked dictionary.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><a class="reference internal" href="#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if a key is not in a stacked dictionary.</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.items_list">
<span class="sig-name descname"><span class="pre">items_list</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>returns the list of unpacked items associated to the key from the stacked dictionary. If the key is not in the
dictionary, it raises StackedKeyError (not a key).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – a possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A list of unpacked items associated the key from the stacked dictionary.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><a class="reference internal" href="#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if a key is not in a stacked dictionary.</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.core.NestedDictionary.to_dict">
<span class="sig-name descname"><span class="pre">to_dict</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method converts a nested dictionary to a classical dictionary</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>dict</p>
</dd>
</dl>
</dd></dl>

</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>