<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>2. Usage</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="usage">
<h1><span class="section-number">2. </span>Usage</h1>
<section id="principle">
<h2><span class="section-number">2.1. </span>Principle</h2>
<p>The principle is quite simple, just as a dictionary can be the value of a dictionary key. If it is a dictionary, a
NestedDictionary is necessarily the value of the key of a NestedDictionary, and so on.</p>
<p>However, unlike a conventional dictionary, nested keys will be exposed as tuples. Even so, they can still be used
as conventional keys.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span><span class="nv">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">({</span><span class="s1">&#39;first&#39;</span>:<span class="w"> </span><span class="m">1</span>,
<span class="go">                        &#39;second&#39;: {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;},</span>
<span class="go">                        &#39;third&#39;: 3,</span>
<span class="go">                        &#39;fourth&#39;: 4})</span>

<span class="go">a&#39;s keys are :</span>
<span class="go">[(&#39;first&#39;,), (&#39;second&#39;, &#39;1&#39;), (&#39;second&#39;, &#39;2&#39;), (&#39;second&#39;, &#39;3&#39;), (&#39;third&#39;,), (&#39;fourth&#39;,)]</span>

<span class="gp">$ </span>a<span class="o">[</span><span class="s1">&#39;second&#39;</span><span class="o">][</span><span class="s1">&#39;1&#39;</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;2:1&quot;</span>
</pre></div>
</div>
</section>
<section id="behavior">
<h2><span class="section-number">2.2. </span>Behavior</h2>
<p>Nested dictionaries inherit from <a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a><span class="link-target"> [https://docs.python.org/3/library/collections.html#collections.defaultdict]</span>. The default_factory attribute characterizes the behavior of this class:</p>
<p>If the nested dictionary is to behave strictly like a dictionary, then the default_factory attribute is set to None.
If you request the value of a key that doesn’t exist, you’ll get a KeyError. The configuration parameter is
<code class="docutils literal notranslate"><span class="pre">strict=True</span></code></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">ndict_tools</span> <span class="kn">import</span> <span class="n">NestedDictionary</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span> <span class="o">=</span> <span class="n">NestedDictionary</span><span class="p">({</span><span class="s1">&#39;first&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="go">                           &#39;second&#39;: {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;},</span>
<span class="go">                           &#39;third&#39;: 3,</span>
<span class="go">                           &#39;fourth&#39;: 4},</span>
<span class="go">                           strict=True)</span>
<span class="go">nd.default_factory</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span><span class="p">[</span><span class="s1">&#39;fifth&#39;</span><span class="p">]</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;/snap/pycharm-professional/401/plugins/python/helpers/pydev/pydevconsole.py&quot;</span>, line <span class="m">364</span>, in <span class="n">runcode</span>
<span class="w">    </span><span class="n">coro</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span>
  File <span class="nb">&quot;&lt;input&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">KeyError</span>: <span class="n">&#39;fifth&#39;</span>
</pre></div>
</div>
<p>If the nested dictionary is to have flexible behavior, then the default_factory attribute is set to NestedDictionary.
If you request a key that doesn’t exist, a NestedDictionary instance will be created accordingly and returned. The
configuration parameter is <code class="docutils literal notranslate"><span class="pre">strict=False</span></code> or <strong>no parameter</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">ndict_tools</span> <span class="kn">import</span> <span class="n">NestedDictionary</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span> <span class="o">=</span> <span class="n">NestedDictionary</span><span class="p">({</span><span class="s1">&#39;first&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="go">                           &#39;second&#39;: {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;},</span>
<span class="go">                           &#39;third&#39;: 3,</span>
<span class="go">                           &#39;fourth&#39;: 4},</span>
<span class="go">                           strict=False)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span><span class="o">.</span><span class="n">default_factory</span>
<span class="go">&lt;class &#39;ndict_tools.core.NestedDictionary&#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span><span class="p">[</span><span class="s1">&#39;fifth&#39;</span><span class="p">]</span>
<span class="go">NestedDictionary(&lt;class &#39;ndict_tools.core.NestedDictionary&#39;&gt;, {})</span>
</pre></div>
</div>
<p>And with <strong>no parameter</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">ndict_tools</span> <span class="kn">import</span> <span class="n">NestedDictionary</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span> <span class="o">=</span> <span class="n">NestedDictionary</span><span class="p">({</span><span class="s1">&#39;first&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="go">                           &#39;second&#39;: {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;},</span>
<span class="go">                           &#39;third&#39;: 3,</span>
<span class="go">                           &#39;fourth&#39;: 4})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span><span class="o">.</span><span class="n">default_factory</span>
<span class="go">&lt;class &#39;ndict_tools.core.NestedDictionary&#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nd</span><span class="p">[</span><span class="s1">&#39;fifth&#39;</span><span class="p">]</span>
<span class="go">NestedDictionary(&lt;class &#39;ndict_tools.core.NestedDictionary&#39;&gt;, {})</span>
</pre></div>
</div>
</section>
<section id="examples">
<h2><span class="section-number">2.3. </span>Examples</h2>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span><span class="nv">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">({</span><span class="s1">&#39;first&#39;</span>:<span class="w"> </span><span class="m">1</span>,
<span class="go">                        &#39;second&#39;: {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;},</span>
<span class="go">                        &#39;third&#39;: 3,</span>
<span class="go">                        &#39;fourth&#39;: 4})</span>
<span class="gp">$ </span><span class="nv">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">(</span>zip<span class="o">([</span><span class="s1">&#39;first&#39;</span>,<span class="w"> </span><span class="s1">&#39;second&#39;</span>,<span class="w"> </span><span class="s1">&#39;third&#39;</span>,<span class="w"> </span><span class="s1">&#39;fourth&#39;</span><span class="o">]</span>,
<span class="go">                           [1, {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;}, 3, 4]))</span>
<span class="gp">$ </span><span class="nv">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">([(</span><span class="s1">&#39;first&#39;</span>,<span class="w"> </span><span class="m">1</span><span class="o">)</span>,
<span class="go">                        (&#39;second&#39;, {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;}),</span>
<span class="go">                        (&#39;third&#39;, 3),</span>
<span class="go">                        (&#39;fourth&#39;, 4)])</span>
<span class="gp">$ </span><span class="nv">d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">([(</span><span class="s1">&#39;third&#39;</span>,<span class="w"> </span><span class="m">3</span><span class="o">)</span>,
<span class="go">                        (&#39;first&#39;, 1),</span>
<span class="go">                        (&#39;second&#39;, {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;}),</span>
<span class="go">                        (&#39;fourth&#39;, 4)])</span>
<span class="gp">$ </span><span class="nv">e</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>NestedDictionary<span class="o">([(</span><span class="s1">&#39;first&#39;</span>,<span class="w"> </span><span class="m">1</span><span class="o">)</span>,<span class="w"> </span><span class="o">(</span><span class="s1">&#39;fourth&#39;</span>,<span class="w"> </span><span class="m">4</span><span class="o">)]</span>,
<span class="go">                       third = 3,</span>
<span class="go">                       second = {&#39;1&#39;: &quot;2:1&quot;, &#39;2&#39;: &quot;2:2&quot;, &#39;3&#39;: &quot;3:2&quot;})</span>

<span class="go">a == b == c == d == e</span>
</pre></div>
</div>
</section>
<section id="module-ndict_tools">
<span id="class-attributes-and-methods"></span><h2><span class="section-number">2.4. </span>Class attributes and methods</h2>
<dl class="py class">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ndict_tools.</span></span><span class="sig-name descname"><span class="pre">NestedDictionary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Nested dictionary class.</p>
<p>This class is designed as a stacked dictionary. It represents a nest of dictionaries, that is to say that each
key is a value or a nested dictionary. And so on…</p>
<p>This function initializes a nested dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>args</strong> (<em>Iterable</em>) – the first one of the list must be a dictionary to instantiate an object.</p></li>
<li><p><strong>kwargs</strong> (<em>dict</em>) – <p>enrichments settings and</p>
<ul>
<li><p>indent : indentation of the printable nested dictionary (used by json.dumps() function)</p></li>
<li><p>strict : strict mode (False by default) define default answer to unknown key</p></li>
</ul>
</p></li>
</ul>
</dd>
</dl>
<p class="rubric">Example</p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary({'first':</span> <span class="pre">1,'second':</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;},</span> <span class="pre">'third':</span> <span class="pre">3,</span> <span class="pre">'fourth':</span> <span class="pre">4})</span></code></p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary(zip(['first','second',</span> <span class="pre">'third',</span> <span class="pre">'fourth'],</span>
<span class="pre">[1,</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;},</span> <span class="pre">3,</span> <span class="pre">4]))</span></code></p>
<p><code class="docutils literal notranslate"><span class="pre">NestedDictionary([('first',</span> <span class="pre">1),</span> <span class="pre">('second',</span> <span class="pre">{'1':</span> <span class="pre">&quot;2:1&quot;,</span> <span class="pre">'2':</span> <span class="pre">&quot;2:2&quot;,</span> <span class="pre">'3':</span> <span class="pre">&quot;3:2&quot;}),</span>
<span class="pre">('third',</span> <span class="pre">3),</span> <span class="pre">('fourth',</span> <span class="pre">4)])</span></code></p>
<dl class="py attribute">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.indent">
<span class="sig-name descname"><span class="pre">indent</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">int</span></em><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">0</span></em></dt>
<dd><p>indent is used to print the dictionary with json indentation</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.default_factory">
<span class="sig-name descname"><span class="pre">default_factory</span></span></dt>
<dd><p>Factory for default value called by __missing__().</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.__str__">
<span class="sig-name descname"><span class="pre">__str__</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Converts a nested dictionary to a string in json format</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a string in json format</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>str</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.update">
<span class="sig-name descname"><span class="pre">update</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Updates a stacked dictionary with key/value pairs.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>dictionary</strong> (<em>dict</em>) – a simple dict.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>None</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.occurrences">
<span class="sig-name descname"><span class="pre">occurrences</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the Number of occurrences of a key in a stacked dictionary including 0 if the key is not a keys in a
stacked dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – A possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>Number of occurrences or 0</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>int</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.is_key">
<span class="sig-name descname"><span class="pre">is_key</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Checks if a key is stacked or not.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – A possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>True if key is a stacked key, False otherwise</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>bool</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.key_list">
<span class="sig-name descname"><span class="pre">key_list</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>returns the list of unpacked keys containing the key from the stacked dictionary. If the key is not in the
dictionary, it raises StackedKeyError (not a key).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – a possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A list of unpacked keys containing the key from the stacked dictionary.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><a class="reference internal" href="api.xhtml#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if a key is not in a stacked dictionary.</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.items_list">
<span class="sig-name descname"><span class="pre">items_list</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>returns the list of unpacked items associated to the key from the stacked dictionary. If the key is not in the
dictionary, it raises StackedKeyError (not a key).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>key</strong> (<em>Any</em>) – a possible key in a stacked dictionary.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A list of unpacked items associated the key from the stacked dictionary.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><a class="reference internal" href="api.xhtml#ndict_tools.exception.StackedKeyError" title="ndict_tools.exception.StackedKeyError"><strong>StackedKeyError</strong></a> – if a key is not in a stacked dictionary.</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="ndict_tools.NestedDictionary.to_dict">
<span class="sig-name descname"><span class="pre">to_dict</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method converts a nested dictionary to a classical dictionary</p>
<dl class="field-list simple">
<dt class="field-odd">Returns<span class="colon">:</span></dt>
<dd class="field-odd"><p>a dictionary</p>
</dd>
<dt class="field-even">Return type<span class="colon">:</span></dt>
<dd class="field-even"><p>dict</p>
</dd>
</dl>
</dd></dl>

</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>