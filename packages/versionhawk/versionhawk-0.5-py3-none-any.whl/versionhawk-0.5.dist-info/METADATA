Metadata-Version: 2.1
Name: versionhawk
Version: 0.5
Summary: ü¶Ö Version Hawk by Andrew A Levin
Author-email: Andrew Levin <author@example.com>
Maintainer-email: "A. Great Maintainer" <maintainer@example.com>
Project-URL: Homepage, https://github.com/andrewalevin
Project-URL: Bug Reports, https://github.com/andrewalevin
Project-URL: Funding, https://donate.pypi.org
Project-URL: Say Thanks!, https://github.com/andrewalevin
Project-URL: Source, https://github.com/andrewalevin
Keywords: versionhawk
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: packaging
Provides-Extra: dev
Requires-Dist: check-manifest ; extra == 'dev'
Provides-Extra: test
Requires-Dist: coverage ; extra == 'test'



# ü¶Ö Version Hawk

Version Hawk is a command-line tool for managing and generating version tags for Python packages on PyPI and GitHub repositories. It allows you to retrieve existing version tags from both platforms and generate new version numbers based on your project's release history.

## Features

- **Retrieve Versions from PyPI**: Get all version tags for a specified PyPI package.
- **Retrieve Releases from GitHub**: Fetch release tags from a GitHub repository.
- **Generate New Version Tags**: Automatically generate a new version tag based on existing versions.
- **Flexible Input**: Accepts various input formats including:
  - URLs for GitHub repositories (e.g., `https://github.com/username/repo`)
  - URLs for PyPI packages (e.g., `https://pypi.org/project/package`)
  - GitHub owner/repo format (e.g., `username/repo`)
  - Direct package names (e.g., `package`)

## Installation

To use Version Hawk, you need to have Python 3.6 or higher. You can clone the repository and install the required dependencies using `pip`:

```bash
git clone https://github.com/yourusername/versionhawk.git
cd versionhawk
pip install -r requirements.txt
```


## Usage

Run the tool from the command line:

```bash
python version_hawk.py <input>
```


Input Options

	‚Ä¢	GitHub Repository URL:
	‚Ä¢	Example: https://github.com/psf/requests
	‚Ä¢	PyPI Package URL:
	‚Ä¢	Example: https://pypi.org/project/requests/
	‚Ä¢	Owner/Repo Format:
	‚Ä¢	Example: psf/requests
	‚Ä¢	Direct Package Name:
	‚Ä¢	Example: requests

Listing Versions

To list all versions of a package or releases of a repository, use the --versions flag:

```bash
python version_hawk.py <input> --versions
```

## Example

```bash
# Get all versions from PyPI for the 'requests' package
python version_hawk.py requests --versions

# Get all releases from GitHub for the 'psf/requests' repository
python version_hawk.py psf/requests --versions

# Generate a new version based on existing tags
python version_hawk.py https://github.com/psf/requests
```

## Testing

You can run the unit tests to ensure that everything is working correctly. Make sure you have unittest available, then execute:


```bash
python -m unittest discover tests
```

### Contributing

Contributions are welcome! If you have suggestions for improvements or new features, please open an issue or submit a pull request.

### License

This project is licensed under the MIT License. See the LICENSE file for details.

### Acknowledgements

	‚Ä¢	Requests for HTTP requests.
	‚Ä¢	argparse for command-line argument parsing.
	‚Ä¢	packaging for version parsing.


### Key Sections Explained

1. **Features**: Outlines what the tool can do.
2. **Installation**: Provides steps to set up the project.
3. **Usage**: Explains how to run the tool and its input options.
4. **Example**: Shows practical usage examples.
5. **Testing**: Instructions for running unit tests.
6. **Contributing**: Encourages community contributions.
7. **License**: Mentions the license type.

Feel free to modify any part of the README to better fit your project! If you have additional features or sections to add, let me know!





VersionHawk is a tool for managing the versions of Python packages based on semantic versioning and the current date. It automatically suggests a new version tag if previous ones are already taken and allows you to fetch a list of all existing versions of a package.

## ‚ú® Features

	‚Ä¢	Generate a new version: Suggests a unique version tag based on the current date and time.
	‚Ä¢	View all versions: Optionally fetches a list of all existing versions of a package on PyPI.
	‚Ä¢	User-friendly command-line interface: Easily run it from the terminal.

## üîß Installation

You can install VersionHawk using pip:


pip install versionhawk

## üöÄ Usage

Once installed, you can run VersionHawk through the versionhawk command in your terminal.

## üÜï Generate a New Version

To generate a new version for a package on PyPI, use the following command:


versionhawk <package_name>

Example:

versionhawk requests

## üìÑ View All Versions

To fetch a list of all existing versions of a package on PyPI, use the --versions flag:

versionhawk <package_name> --versions

Example:

versionhawk requests --versions

## ‚öôÔ∏è How It Works

VersionHawk uses the current date and time to suggest a new version. It checks the following patterns in order:

	‚Ä¢	Year.Month (e.g., 2024.10)
	‚Ä¢	Year.Month.Week Number in Month (e.g., 2024.10.3)
	‚Ä¢	Year.Month.Day (e.g., 2024.10.22)
	‚Ä¢	Year.Month.Day.Hour (e.g., 2024.10.22.20)
	‚Ä¢	Year.Month.Day.Hour.Minutes (e.g., 2024.10.22.20.01)
	‚Ä¢	Year.Month.Day.Hour.Minutes.Seconds (e.g., 2024.10.22.20.01.30)

VersionHawk checks these patterns against existing versions and suggests the first available unique tag.

## üí° Example Usage

Let‚Äôs say the current date is 2024-10-22 20:01, and the requests package already has versions up to 2024.10.22.20.01. VersionHawk will suggest the next available version, such as 2024.10.22.20.01.30, if earlier versions are taken.

## üì¶ Dependencies

VersionHawk requires the following dependencies to work:

	‚Ä¢	requests ‚Äî to fetch version information from PyPI.
	‚Ä¢	packaging ‚Äî to correctly sort versions.

These dependencies are automatically installed when you install VersionHawk.

## üìú License

This project is licensed under the MIT License. See the LICENSE file for more details.
