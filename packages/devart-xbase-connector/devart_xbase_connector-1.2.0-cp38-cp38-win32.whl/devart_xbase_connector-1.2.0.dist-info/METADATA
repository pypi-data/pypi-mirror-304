Metadata-Version: 2.1
Name: devart-xbase-connector
Version: 1.2.0
Summary: New level of functionality and performance in data access via Python
Home-page: https://devart.com
Author: Devart
Author-email: support@devart.com
License: Other/Proprietary License
Project-URL: Homepage, http://devart.com/python/xbase
Project-URL: Download, http://devart.com/python/xbase/download.html
Project-URL: History, http://devart.com/python/xbase/revision_history.html
Project-URL: License, https://www.devart.com/python/eula.html
Project-URL: Documentation, http://docs.devart.com/python/xbase/overview.htm
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# Python Connector for xBase #

Python Connector for xBase is a connectivity solution for accessing FoxPro,
Visual FoxPro, dBase, and other databases in DBF file formats from Python
applications. It fully implements the Python DB API 2.0 specification.
The connector is distributed as a wheel package for Windows, macOS, and Linux.

Direct connection

The connector enables you to establish a direct connection to Visual FoxPro,
dBase, and other xBase databases eliminating the need for the client library.
A direct connection increases the speed of data transmission between a Python
application and an xBase database and simplifies the deployment.

Local indexing

The connector offers an internal data indexing mechanism that is way more
efficient than native DBF indexes for complex queries.

Retrieval of corrupted data

You can choose to ignore corrupted data and metadata errors in DBF tables.
Corrupted data is skipped, while intact data is properly retrieved.

## Using the connector ##

To retrieve data from a database:

Import the module.
```
import devart.xbase
```

Connect to a database using the `connect()` module method and obtain a `connection` object.
```
my_connection = devart.xbase.connect(
    Database="path_to_db"
)
```

Create a `cursor` object using the `cursor()` connection method.
```
my_cursor = my_connection.cursor()
```

Execute the SQL statement using the `execute()` cursor method.
```
my_cursor.execute("SELECT * FROM employees")
```

Retrieve the result set using one of the `fetch*()` cursor methods.
```
for row in my_cursor.fetchall(): 
    print(row)
```

## Ordering and activating the license ##

You can purchase a license for the connector on the ordering page:             
https://www.devart.com/python/xbase/ordering.html

To activate the license, follow the instructions in the documentation:             
https://docs.devart.com/python/xbase/activate-a-license.htm

## What's new ##

Python Connector for xBase 1.2

- Added support for Python 3.13
- Added support for the BITTEST SQL function
