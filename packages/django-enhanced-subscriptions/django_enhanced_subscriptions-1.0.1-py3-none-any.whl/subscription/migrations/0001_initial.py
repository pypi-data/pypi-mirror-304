# Generated by Django 5.1.2 on 2024-10-22 19:44

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Feature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "code",
                    models.SlugField(
                        help_text="Unique code used to check feature access in code",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "feature_type",
                    models.CharField(
                        choices=[
                            ("boolean", "BOOLEAN"),
                            ("quota", "QUOTA"),
                            ("rate", "RATE"),
                            ("usage", "USAGE"),
                        ],
                        default="boolean",
                        max_length=20,
                    ),
                ),
                (
                    "pricing_model",
                    models.CharField(
                        choices=[
                            ("flat", "FLAT"),
                            ("tiered", "TIERED"),
                            ("volume", "VOLUME"),
                            ("package", "PACKAGE"),
                        ],
                        default="flat",
                        max_length=20,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        help_text="Unit of measurement for quota/usage features",
                        max_length=50,
                    ),
                ),
                (
                    "reset_on_billing",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to reset usage counters on billing",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlanTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        help_text="the tag name", max_length=64, unique=True
                    ),
                ),
            ],
            options={
                "ordering": ("tag",),
            },
        ),
        migrations.CreateModel(
            name="PlanFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this feature is enabled for the plan",
                    ),
                ),
                (
                    "quota",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum allowed quantity for quota features",
                        null=True,
                    ),
                ),
                (
                    "rate_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of operations allowed per time window",
                        null=True,
                    ),
                ),
                (
                    "rate_window",
                    models.DurationField(
                        blank=True, help_text="Time window for rate limiting", null=True
                    ),
                ),
                (
                    "overage_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost per unit when exceeding quota",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_features",
                        to="subscription.feature",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PricingTier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_quantity",
                    models.IntegerField(help_text="Starting quantity for this tier"),
                ),
                (
                    "end_quantity",
                    models.IntegerField(
                        blank=True,
                        help_text="Ending quantity for this tier (null for unlimited)",
                        null=True,
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per unit in this tier",
                        max_digits=10,
                    ),
                ),
                (
                    "flat_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Fixed fee for this tier",
                        max_digits=10,
                    ),
                ),
                (
                    "plan_feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_tiers",
                        to="subscription.planfeature",
                    ),
                ),
            ],
            options={
                "ordering": ["start_quantity"],
            },
        ),
        migrations.CreateModel(
            name="SubscriptionErrorLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "error_type",
                    models.CharField(
                        choices=[
                            ("payment_failed", "PAYMENT_FAILED"),
                            ("insufficient_funds", "INSUFFICIENT_FUNDS"),
                            ("validation_error", "VALIDATION_ERROR"),
                            ("refund_error", "REFUND_ERROR"),
                            ("state_transition_error", "STATE_TRANSITION_ERROR"),
                            ("system_error", "SYSTEM_ERROR"),
                        ],
                        max_length=50,
                    ),
                ),
                ("subscription_id", models.UUIDField()),
                ("user_id", models.UUIDField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("details", models.JSONField()),
                ("retry_count", models.IntegerField(default=0)),
                ("resolved", models.BooleanField(default=False)),
                ("resolution_timestamp", models.DateTimeField(null=True)),
                (
                    "retry_strategy",
                    models.CharField(
                        choices=[
                            ("immediate", "IMMEDIATE"),
                            ("exponential_backoff", "EXPONENTIAL_BACKOFF"),
                            ("fixed_interval", "FIXED_INTERVAL"),
                            ("manual", "MANUAL"),
                        ],
                        default="exponential_backoff",
                        max_length=50,
                    ),
                ),
                ("next_retry_time", models.DateTimeField(null=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["subscription_id", "resolved"],
                        name="subscriptio_subscri_67d577_idx",
                    ),
                    models.Index(
                        fields=["error_type", "resolved"],
                        name="subscriptio_error_t_ea0883_idx",
                    ),
                    models.Index(
                        fields=["next_retry_time"],
                        name="subscriptio_next_re_412144_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "plan_name",
                    models.CharField(
                        help_text="the name of the subscription plan", max_length=128
                    ),
                ),
                (
                    "is_feature_based",
                    models.BooleanField(
                        default=False,
                        help_text="whether this plan is regular of feature based",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="slug to reference the subscription plan",
                        max_length=128,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "plan_description",
                    models.CharField(
                        blank=True,
                        help_text="a description of the subscription plan",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "grace_period",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="how many days after the subscription ends before the subscription expires",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="any tags associated with this plan",
                        related_name="plans",
                        to="subscription.plantag",
                    ),
                ),
            ],
            options={
                "ordering": ("plan_name",),
                "permissions": (
                    ("subscriptions", "Can interact with subscription details"),
                ),
            },
        ),
        migrations.AddField(
            model_name="planfeature",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plan_features",
                to="subscription.subscriptionplan",
            ),
        ),
        migrations.CreateModel(
            name="PlanCost",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="slug to reference these cost details",
                        max_length=128,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "recurrence_period",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="how often the plan is billed (per recurrence unit)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "recurrence_unit",
                    models.CharField(
                        choices=[
                            ("once", "once"),
                            ("second", "second"),
                            ("minute", "minute"),
                            ("hour", "hour"),
                            ("day", "day"),
                            ("week", "week"),
                            ("month", "month"),
                            ("year", "year"),
                        ],
                        default="month",
                        max_length=50,
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="the cost per recurrence of the plan",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        help_text="the subscription plan for these cost details",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="costs",
                        to="subscription.subscriptionplan",
                    ),
                ),
            ],
            options={
                "ordering": ("recurrence_unit", "recurrence_period", "cost"),
            },
        ),
        migrations.CreateModel(
            name="UserSubscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_billing_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="the date to start billing this subscription",
                        null=True,
                        verbose_name="billing start date",
                    ),
                ),
                (
                    "date_billing_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="the date to finish billing this subscription",
                        null=True,
                        verbose_name="billing start end",
                    ),
                ),
                (
                    "date_billing_last",
                    models.DateTimeField(
                        blank=True,
                        help_text="the last date this plan was billed",
                        null=True,
                        verbose_name="last billing date",
                    ),
                ),
                (
                    "date_billing_next",
                    models.DateTimeField(
                        blank=True,
                        help_text="the next date billing is due",
                        null=True,
                        verbose_name="next start date",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="whether this subscription is active or not",
                    ),
                ),
                (
                    "cancelled",
                    models.BooleanField(
                        default=False,
                        help_text="whether this subscription is cancelled or not",
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        help_text="the plan costs and billing frequency for this user",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription",
                        to="subscription.plancost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="the user this subscription applies to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("user", "date_billing_start"),
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Current balance in the wallet",
                        max_digits=19,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        help_text="The user who owns this wallet",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallet",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="WalletTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=4, help_text="Transaction amount", max_digits=19
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("deposit", "DEPOSIT"),
                            ("subscription", "SUBSCRIPTION"),
                            ("refund", "REFUND"),
                            ("cancellation", "CANCELLATION"),
                        ],
                        help_text="Type of transaction",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "SUCCESS"),
                            ("failed", "FAILED"),
                            ("pending", "PENDING"),
                            ("refunded", "REFUNDED"),
                            ("cancelled", "CANCELLED"),
                        ],
                        help_text="Status of the transaction",
                        max_length=20,
                    ),
                ),
                (
                    "balance_after",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Wallet balance after this transaction",
                        max_digits=19,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the transaction",
                        max_length=255,
                    ),
                ),
                (
                    "subscription_details",
                    models.JSONField(
                        blank=True,
                        help_text="Additional details for subscription transactions",
                        null=True,
                    ),
                ),
                (
                    "refund_details",
                    models.JSONField(
                        blank=True,
                        help_text="Additional details for refund transactions",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "related_transaction",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related transaction (for refunds)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="refunds",
                        to="subscription.wallettransaction",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        help_text="The wallet this transaction belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="subscription.wallet",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.AlterUniqueTogether(
            name="planfeature",
            unique_together={("plan", "feature")},
        ),
        migrations.CreateModel(
            name="FeatureUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(default=0)),
                ("last_reset", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_records",
                        to="subscription.feature",
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_usage",
                        to="subscription.usersubscription",
                    ),
                ),
            ],
            options={
                "unique_together": {("subscription", "feature")},
            },
        ),
    ]
