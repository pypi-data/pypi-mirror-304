:py:mod:`pocketpose.models.wholebody`
=====================================

.. py:module:: pocketpose.models.wholebody


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   blazepose/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pocketpose.models.wholebody.TFLiteModel
   pocketpose.models.wholebody.BlazePose
   pocketpose.models.wholebody.BlazePoseLite
   pocketpose.models.wholebody.BlazePoseFull
   pocketpose.models.wholebody.BlazePoseHeavy




Attributes
~~~~~~~~~~

.. autoapisummary::

   pocketpose.models.wholebody.model_registry


.. py:class:: TFLiteModel(model_path: str, model_url: str, **kwargs)


   Bases: :py:obj:`pocketpose.models.interfaces.imodel.IModel`

   Interface for all TensorFlow Lite models. 

   We assume that the model has a single input, but it can have multiple outputs.

   .. py:method:: process_image(image)

      Default implementation of process_image() for models that don't need preprocessing.

      This method can be overridden by subclasses to implement model-specific preprocessing.

      Args:
          image (np.ndarray): The image to prepare for prediction. The image is a numpy
                              array with shape (1, height, width, channels) and dtype
                              uint8 (range [0, 255]). 


   .. py:method:: get_output(output_idx: int) -> numpy.ndarray

      Returns the output tensor of the model.

      Args:
          output_idx (int): The index of the output tensor to return.

      Returns:
          The output tensor as a numpy array.


   .. py:method:: predict(image: numpy.ndarray) -> Any

      Predicts the pose of the image.

      Args:
          image (np.ndarray): The image to predict the pose of. The image has
                              the shape and dtype expected by the model.

      Returns:
          The prediction returned by the model. This can be a single tensor or
          a tuple of tensors, depending on the model.



.. py:data:: model_registry

   

.. py:class:: BlazePose(model_path: str, model_url: str, input_size: tuple)


   Bases: :py:obj:`pocketpose.models.interfaces.TFLiteModel`

   Base class for the BlazePose models. 

   .. py:attribute:: NUM_KEYPOINTS
      :value: 33

      

   .. py:attribute:: NUM_LANDMARKS
      :value: 39

      

   .. py:attribute:: LANDMARKS_DIM
      :value: 5

      

   .. py:attribute:: HEATMAPS_DIM
      :value: 39

      

   .. py:method:: process_image(image)

      Default implementation of process_image() for models that don't need preprocessing.

      This method can be overridden by subclasses to implement model-specific preprocessing.

      Args:
          image (np.ndarray): The image to prepare for prediction. The image is a numpy
                              array with shape (1, height, width, channels) and dtype
                              uint8 (range [0, 255]). 


   .. py:method:: _calculate_keypoints(landmark_points, heatmap, index, original_size)


   .. py:method:: postprocess_prediction(prediction, original_size)

      Postprocess the prediction.

      Args:
          prediction (list): List of outputs from the model.
          original_size (tuple): Original size of the image as (height, width).



.. py:class:: BlazePoseLite


   Bases: :py:obj:`BlazePose`

   BlazePose-Lite model. 


.. py:class:: BlazePoseFull


   Bases: :py:obj:`BlazePose`

   BlazePose-Full model. 


.. py:class:: BlazePoseHeavy


   Bases: :py:obj:`BlazePose`

   BlazePose-Heavy model. 


