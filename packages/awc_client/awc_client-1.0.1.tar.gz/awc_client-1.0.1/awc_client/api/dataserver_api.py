# coding: utf-8

"""
    AviationWeather.gov API

    New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.

    The version of the OpenAPI document: 3.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated

from awc_client.api_client import ApiClient, RequestSerialized
from awc_client.api_response import ApiResponse
from awc_client.rest import RESTResponseType


class DataserverApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def dataserver_airep(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        radial_distance: Annotated[Optional[StrictStr], Field(description="Circular bounds defined by latitude, longitude and radial distance in statute miles\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Dataserver for AIREPs and PIREPs

        Return aircraft data

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param radial_distance: Circular bounds defined by latitude, longitude and radial distance in statute miles\"
        :type radial_distance: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_airep_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            radial_distance=radial_distance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dataserver_airep_with_http_info(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        radial_distance: Annotated[Optional[StrictStr], Field(description="Circular bounds defined by latitude, longitude and radial distance in statute miles\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Dataserver for AIREPs and PIREPs

        Return aircraft data

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param radial_distance: Circular bounds defined by latitude, longitude and radial distance in statute miles\"
        :type radial_distance: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_airep_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            radial_distance=radial_distance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dataserver_airep_without_preload_content(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        radial_distance: Annotated[Optional[StrictStr], Field(description="Circular bounds defined by latitude, longitude and radial distance in statute miles\"")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dataserver for AIREPs and PIREPs

        Return aircraft data

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param radial_distance: Circular bounds defined by latitude, longitude and radial distance in statute miles\"
        :type radial_distance: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_airep_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            radial_distance=radial_distance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dataserver_airep_serialize(
        self,
        start_time,
        end_time,
        hours_before_now,
        format,
        bounding_box,
        radial_distance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if hours_before_now is not None:
            
            _query_params.append(('hoursBeforeNow', hours_before_now))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if bounding_box is not None:
            
            _query_params.append(('boundingBox', bounding_box))
            
        if radial_distance is not None:
            
            _query_params.append(('radialDistance', radial_distance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data/dataserver?requestType=retrieve&dataSource=aircraftreports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dataserver_gairmet(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Dataserver for G-AIRMETs

        Return G-AIRMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_gairmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dataserver_gairmet_with_http_info(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Dataserver for G-AIRMETs

        Return G-AIRMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_gairmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dataserver_gairmet_without_preload_content(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dataserver for G-AIRMETs

        Return G-AIRMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_gairmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dataserver_gairmet_serialize(
        self,
        start_time,
        end_time,
        hours_before_now,
        format,
        bounding_box,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if hours_before_now is not None:
            
            _query_params.append(('hoursBeforeNow', hours_before_now))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if bounding_box is not None:
            
            _query_params.append(('boundingBox', bounding_box))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data/dataserver?requestType=retrieve&dataSource=gairmets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dataserver_metars(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent METAR")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent METAR per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Dataserver for METARs

        METAR reports

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent METAR
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent METAR per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_metars_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dataserver_metars_with_http_info(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent METAR")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent METAR per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Dataserver for METARs

        METAR reports

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent METAR
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent METAR per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_metars_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dataserver_metars_without_preload_content(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent METAR")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent METAR per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dataserver for METARs

        METAR reports

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent METAR
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent METAR per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_metars_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dataserver_metars_serialize(
        self,
        station_string,
        start_time,
        end_time,
        hours_before_now,
        format,
        most_recent,
        most_recent_for_each_station,
        bounding_box,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if station_string is not None:
            
            _query_params.append(('stationString', station_string))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if hours_before_now is not None:
            
            _query_params.append(('hoursBeforeNow', hours_before_now))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if most_recent is not None:
            
            _query_params.append(('mostRecent', most_recent))
            
        if most_recent_for_each_station is not None:
            
            _query_params.append(('mostRecentForEachStation', most_recent_for_each_station))
            
        if bounding_box is not None:
            
            _query_params.append(('boundingBox', bounding_box))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data/dataserver?requestType=retrieve&dataSource=metars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dataserver_sigmet(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Dataserver for AIRMETs and SIGMETs

        Return AIRMETs and SIGMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_sigmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dataserver_sigmet_with_http_info(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Dataserver for AIRMETs and SIGMETs

        Return AIRMETs and SIGMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_sigmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dataserver_sigmet_without_preload_content(
        self,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dataserver for AIRMETs and SIGMETs

        Return AIRMETs and SIGMETs

        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_sigmet_serialize(
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dataserver_sigmet_serialize(
        self,
        start_time,
        end_time,
        hours_before_now,
        format,
        bounding_box,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if hours_before_now is not None:
            
            _query_params.append(('hoursBeforeNow', hours_before_now))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if bounding_box is not None:
            
            _query_params.append(('boundingBox', bounding_box))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data/dataserver?requestType=retrieve&dataSource=airsigmets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dataserver_tafs(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent TAF")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent TAF per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Dataserver for TAFs

        Return TAF data

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent TAF
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent TAF per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_tafs_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dataserver_tafs_with_http_info(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent TAF")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent TAF per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Dataserver for TAFs

        Return TAF data

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent TAF
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent TAF per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_tafs_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dataserver_tafs_without_preload_content(
        self,
        station_string: Annotated[Optional[StrictStr], Field(description="Station ID(s) Note: must specify stationString or bounding box (minLat, ...)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` ")] = None,
        hours_before_now: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of hours before now to search")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        most_recent: Annotated[Optional[StrictBool], Field(description="Single most recent TAF")] = None,
        most_recent_for_each_station: Annotated[Optional[StrictStr], Field(description="Most recent TAF per station")] = None,
        bounding_box: Annotated[Optional[StrictStr], Field(description="Geographic bounding box (lat0, lon0, lat1, lon1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dataserver for TAFs

        Return TAF data

        :param station_string: Station ID(s) Note: must specify stationString or bounding box (minLat, ...)
        :type station_string: str
        :param start_time: Start time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type start_time: str
        :param end_time: End time  * `yyyymmdd_hhmm`  * `yyyy-mm-ddThh:mm:ssZ` 
        :type end_time: str
        :param hours_before_now: Number of hours before now to search
        :type hours_before_now: float
        :param format: Output format
        :type format: str
        :param most_recent: Single most recent TAF
        :type most_recent: bool
        :param most_recent_for_each_station: Most recent TAF per station
        :type most_recent_for_each_station: str
        :param bounding_box: Geographic bounding box (lat0, lon0, lat1, lon1)
        :type bounding_box: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dataserver_tafs_serialize(
            station_string=station_string,
            start_time=start_time,
            end_time=end_time,
            hours_before_now=hours_before_now,
            format=format,
            most_recent=most_recent,
            most_recent_for_each_station=most_recent_for_each_station,
            bounding_box=bounding_box,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dataserver_tafs_serialize(
        self,
        station_string,
        start_time,
        end_time,
        hours_before_now,
        format,
        most_recent,
        most_recent_for_each_station,
        bounding_box,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if station_string is not None:
            
            _query_params.append(('stationString', station_string))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if hours_before_now is not None:
            
            _query_params.append(('hoursBeforeNow', hours_before_now))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if most_recent is not None:
            
            _query_params.append(('mostRecent', most_recent))
            
        if most_recent_for_each_station is not None:
            
            _query_params.append(('mostRecentForEachStation', most_recent_for_each_station))
            
        if bounding_box is not None:
            
            _query_params.append(('boundingBox', bounding_box))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data/dataserver?requestType=retrieve&dataSource=tafs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


