#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# cluster_utils documentation build configuration file, created by
# sphinx-quickstart on Wed Oct 27 15:27:32 2021.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

from __future__ import annotations

import re
import typing

import docutils.nodes
import sphinx.domains.python

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "myst_parser",
    "sphinx_immaterial",
]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']
templates_path: typing.List[str] = []

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "cluster_utils"
copyright = (  # noqa: A001
    "2018, Autonomous Learning Group, Distributed Intelligence, University of Tübingen"
)
author = "Autonomous Learning Group, Distributed Intelligence, University of Tübingen"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
release = "3.0.0"
# The short X.Y version.
version = "3.0"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store", "README.md"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_immaterial"

# Material theme options
html_theme_options = {
    "site_url": "https://martius-lab.github.io/cluster_utils",
    "repo_url": "https://github.com/martius-lab/cluster_utils",
    "palette": {"primary": "blue-grey", "accent": "orange"},
    "globaltoc_includehidden": False,
    "globaltoc_collapse": True,
    "features": [
        "navigation.expand",
        # "navigation.tabs",
        # "toc.integrate",
        "navigation.sections",
        # "navigation.instant",
        # "header.autohide",
        "navigation.top",
        # "navigation.tracking",
        # "search.highlight",
        "search.share",
        "toc.follow",
        "toc.sticky",
        "content.tabs.link",
        # "announce.dismiss",
    ],
}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
# This is theme-specific.
# html_sidebars = {}


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']
html_static_path: typing.List[str] = []


intersphinx_mapping = {"python": ("https://docs.python.org/3", None)}


object_description_options = [
    ("std:confval", dict(toc_icon_class="data", toc_icon_text="C")),
]


def setup(app):
    def confval_parse_format(env, sig, node):
        # Parse confval values for add_object_type().  Possible signatures are:
        # - foo
        # - foo: type
        # - foo = default_value
        # - foo: type = default_value

        # From Sphinx docs:
        # If you provide parse_node, it must be a function that takes a string and a
        # docutils node, and it must populate the node with children parsed from the
        # string. It must then return the name of the item to be used in
        # crossreferencing and index entries. See the conf.py file in the source for
        # this documentation for an example

        m = re.match(r"([a-zA-Z0-9_.]+)\s*(:([^=]+))?\s*(=(.+))?", sig)
        assert m is not None

        name = m.group(1)
        value_type = m.group(3)
        default_value = m.group(5)

        name_parts = name.rsplit(".", maxsplit=1)
        if len(name_parts) > 1:
            node += sphinx.addnodes.desc_classname(name_parts[0])
        node += sphinx.addnodes.desc_name(name_parts[-1], name_parts[-1])

        if value_type is not None:
            node += sphinx.addnodes.desc_sig_punctuation(" : ", " : ")
            node += sphinx.addnodes.desc_type("", value_type)

        if default_value is not None:
            node += sphinx.addnodes.desc_sig_punctuation(" = ", " = ")

            node += docutils.nodes.literal(
                default_value,
                default_value,
                language="toml",
                classes=["python", "code", "highlight"],
            )

        return name

    # Add custom object type for configuration values.  See ./configuration.rst on how
    # it is used.
    app.add_object_type(
        "confval",
        "confval",
        objname="configuration value",
        indextemplate="pair: %s; configuration value",
        parse_node=confval_parse_format,
    )
