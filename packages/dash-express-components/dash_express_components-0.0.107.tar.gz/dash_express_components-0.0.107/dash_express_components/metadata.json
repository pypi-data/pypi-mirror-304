{
  "src/lib/components/ConfigReceiver.react.js": {
    "description": "A config receiver listening for `window.postMessage()`\n\n@hideconstructor\n\n@example\n rec = dxc.ConfigReceiver(\n          id=\"plotConfig\",\n          token=\"test\"\n )\n\n window.postMessage({config: \"Test\", token:\"test\" })\n@public",
    "displayName": "ConfigReceiver",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks.\n@type {string}"
      },
      "token": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A token used to define the configuration across frames.\n@type {string}"
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Prop The resulting configuration of the plot.\n@type {Object}"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.\n@private"
      }
    }
  },
  "src/lib/components/Configurator.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/configurator.png\"/>\n</div>\n\n\nThe configurator component helps to define plot definitions based on the\nmetadata of a dataframe.\nDifferent configuration parts like `Filter`, `Transform` or `Plotter`\nare combined in a single accordion component.\n\nThe metadata is used to compute the available parameters after data \ntransformations and newly available colums are adjusted automatically.\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\n dxc.Configurator(\n          id=\"plotConfig\",\n          meta=meta,\n )\n@public",
    "displayName": "Configurator",
    "methods": [
      {
        "name": "fix_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_sub_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "config_dict",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_meta",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_meta",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_props",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "graphId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks.\n@type {string}"
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata the plotter selection is based on.\n@type {Object}"
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The resulting configuration of the plot.\n@type {Object}"
      },
      "currentConfig": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The current configuration of the plot.\n@type {Object}"
      },
      "showFilter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Filter panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showTransform": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Transform panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showPlotter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Plot panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showMetadata": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Metadata panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showParameterization": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Parameterization panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showStore": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Store panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showUpdate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the update plot button\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.\n@private"
      }
    }
  },
  "src/lib/components/DataGraph.react.js": {
    "description": "",
    "displayName": "DataGraph",
    "methods": [
      {
        "name": "checkData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleGraphSetProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "updatedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getDefaultDefParams",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getMeta",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getFigure",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "defParams",
            "type": null
          },
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "groupData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          },
          {
            "name": "params",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isNumerical",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "defParams": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{ \"no_data\": [1, 2, 3] }",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/Filter.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/filter.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/filter-modal.png\"/>\n</div>\n\n\nThe filter component allows filters to be set on individual columns.\n\nThese are all combined with and.\n\nThere are the options like >, <, = for numerical, as well as isin etc. for categorical columns.\nPossible options are given by the `meta` props.\n\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Filter(\n  id=\"filter\",\n  meta=meta\n)\n@public",
    "displayName": "Filter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filter_to_string",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_filter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Graph.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph-table.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph-modal.png\"/>\n</div>\n\n\nThe `Graph` component is a combination of the original dash `Graph` and the dash `data_table`.\n\nIt can not only be used to render a plotly.js-powered data visualization,\nbut also shows a searchable table, if only data is submitted.\n\nIn addition, there is the possibility to add plot parameters as `defParams` and \nthe dataframe `meta` data.  \nThis automatically adds a configurator modal, which can be opened via a button\nat the bottom right.\n\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Graph(\n    id=\"fig\",\n    meta=meta,\n    defParams={}\n)\n@public",
    "displayName": "Graph",
    "methods": [
      {
        "name": "filterMeta",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "meta",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isGraph",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "sendSavedData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "image",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "saveClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "inIframe",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "usePlotApi",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_figure_from_defParams",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input_params",
            "type": null
          },
          {
            "name": "initial",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "clearState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dataKey",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n@type {string}"
      },
      "defParams": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Configuration to describe the plot features"
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata the plotter selection is based on.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "plotApi": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Url to the plot Api",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plotly.com/javascript/reference\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{\n    data: [],\n    layout: {},\n    frames: [],\n}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The data selected in the plot or in the table"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "saveClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "enable/disable saveClick button",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "longCallback": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "enable/disable long callbacks",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "editButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "enable/disable edit button",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "currentConfig": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The current configuration of the plot.\n@type {Object}"
      },
      "showFilter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Filter panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showTransform": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Transform panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "hiddenColumns": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "hidden column names (array of strings)",
        "defaultValue": {
          "value": "[\"_id\", \"index\"]",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Localstore.react.js": {
    "description": "",
    "displayName": "Localstore",
    "methods": [
      {
        "name": "getStore",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveStore",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_store",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLoadClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleLoadShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_load_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/MetaCheck.react.js": {
    "description": "Helper to show the metadata of the data inside a component.\n\nCan be usefull, to check how a data transformation works.\n\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/metacheck.png\"/>\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.MetaCheck(\n???\n)\n@public",
    "displayName": "MetaCheck",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Parameterize.react.js": {
    "description": "",
    "displayName": "Parameterize",
    "methods": [
      {
        "name": "handleAddClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleAddShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveParams",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_parameters",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_add_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_col_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "col",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_manual_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          },
          {
            "name": "type",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Plotter.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/plotter.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/plotter-modal.png\"/>\n</div>\n\nThe `Plotter` component helps to define the right plot parameters in the style of plotly.express.\n\nThere are several different plot types, and some of them are given directly by plotly.express, like:\n<ul style=\"margin-left: 20px;\">\n  <li>scatter</li>\n  <li>box</li>\n  <li>violin</li>\n  <li>bar</li>\n  <li>scatter_matrix</li>\n</ul>\n\nOthers are computed more indirect, like:\n<ul style=\"margin-left: 20px;\">\n  <li>imshow</li>\n  <li>bar_count</li>\n  <li>histogram_line</li>\n  <li>probability</li>\n  <li>table</li>\n</ul>\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Plotter(\n???\n)\n@public",
    "displayName": "Plotter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/RequestStore.react.js": {
    "description": "Easily keep data on the client side with this component.\nThe data is not inserted in the DOM.\nData can be in memory, localStorage or sessionStorage.\nThe data will be kept with the id as key.\nThe data will be collected from the url with additional info from the config\nWe use a longCallback feature, if set",
    "displayName": "RequestStore",
    "methods": [
      {
        "name": "fetchData",
        "docblock": null,
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "url",
            "type": null
          },
          {
            "name": "config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onStorageChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "storage_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'local'",
              "computed": false
            },
            {
              "value": "'session'",
              "computed": false
            },
            {
              "value": "'memory'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'memory'",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            },
            {
              "name": "number"
            },
            {
              "name": "string"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "clear_data": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "modified_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "url": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "config": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "longCallback": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Transform.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform-modal.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform-types.png\"/>\n</div>\n\nThe `Transform` component helps to create user defined data transformations.\nCurrently basic transformations are available, like:\n\n<ul style=\"margin-left: 20px;\">\n   <li><b>eval</b></li>\n   <li><b>groupby([...]).aggr([...])</b></li>\n   <li><b>melt</b></li>\n   <li><b>wide_to_long</b></li>\n   <li><b>replace</b></li>\n   <li><b>rename</b></li>\n</ul>\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Transform(\n   id=\"transform\",\n   meta=meta\n)\n@public",
    "displayName": "Transform",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChooseClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChooseShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_transform_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_choose_modal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_core/CoreGraph.react.js": {
    "description": "CoreGraph just wraps the Graph of dash_core_components.",
    "displayName": "CoreGraph",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n@type {string}",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plotly.com/javascript/reference\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{\n    data: [],\n    layout: {},\n    frames: [],\n}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/_plot/Bar.react.js": {
    "description": "",
    "displayName": "Bar",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/BarCount.react.js": {
    "description": "",
    "displayName": "BarCount",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Box.react.js": {
    "description": "",
    "displayName": "Box",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/HistogramLine.react.js": {
    "description": "",
    "displayName": "HistogramLine",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Imshow.react.js": {
    "description": "",
    "displayName": "Imshow",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/PlotterBase.react.js": {
    "description": "",
    "displayName": "PlotterBase",
    "methods": [
      {
        "name": "copy_params",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "typename",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "init_check_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "base_config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "preferSimple",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "o",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setStateConfig",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "multiSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "multiSelect_ExtraOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "singleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "singleSelect_ExtraOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "range_ManualInputArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "option_varnames",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "range_ManualString",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggle_single",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "bar_option",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggle_optionsbar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "optionsbar",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "optionsBar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionsbar",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "commonOptionBarControlls",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "numOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available options without grouping"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Probability.react.js": {
    "description": "",
    "displayName": "Probability",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Scatter.react.js": {
    "description": "",
    "displayName": "Scatter",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/ScatterMatrix.react.js": {
    "description": "",
    "displayName": "ScatterMatrix",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Table.react.js": {
    "description": "",
    "displayName": "Table",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_plot/Violin.react.js": {
    "description": "",
    "displayName": "Violin",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/AggrTransform.react.js": {
    "description": "",
    "displayName": "AggrTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "update_cfg",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/AsType.react.js": {
    "description": "",
    "displayName": "AsType",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/Base.react.js": {
    "description": "",
    "displayName": "Base",
    "methods": [
      {
        "name": "update_meta_out",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_meta_out",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_get_grColOpts",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "meta",
            "type": null
          },
          {
            "name": "options",
            "type": null
          },
          {
            "name": "grouping",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_columns",
        "docblock": "A helper to compute the column dropdown options based on the column metadata\nWe also filter continous and categorical variables, since some options only\nwork with one of them.\n@param meta \n@returns",
        "modifiers": [],
        "params": [
          {
            "name": "meta",
            "description": null,
            "type": null,
            "optional": false
          }
        ],
        "returns": null,
        "description": "A helper to compute the column dropdown options based on the column metadata\nWe also filter continous and categorical variables, since some options only\nwork with one of them."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/BinTransform.react.js": {
    "description": "",
    "displayName": "BinTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/CategoryLookup.react.js": {
    "description": "",
    "displayName": "CategoryLookup",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/CombinecatTransform.react.js": {
    "description": "",
    "displayName": "CombinecatTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/DropnaTransform.react.js": {
    "description": "",
    "displayName": "DropnaTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/EvalTransform.react.js": {
    "description": "",
    "displayName": "EvalTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "fix_variable_name",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "str",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/FilterIqrTransform.react.js": {
    "description": "",
    "displayName": "FilterIqrTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/GroupedSample.react.js": {
    "description": "",
    "displayName": "GroupedSample",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/MeltTransform.react.js": {
    "description": "",
    "displayName": "MeltTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/RenameTransform.react.js": {
    "description": "",
    "displayName": "RenameTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/StrSplitTransform.react.js": {
    "description": "",
    "displayName": "StrSplitTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/SubComponentBase.js": {
    "description": "",
    "displayName": "SubComponentBase",
    "methods": [
      {
        "name": "setStateConfig",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": "use the config to compute a new transformed meta\n@param {} input \n@returns",
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input"
          }
        ],
        "returns": null,
        "description": "use the config to compute a new transformed meta"
      },
      {
        "name": "get_dummy_meta_entry",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "type",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_col_or_median",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/WideToLong.react.js": {
    "description": "",
    "displayName": "WideToLong",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "sep_split",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "str",
            "type": null
          },
          {
            "name": "sep",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "update_cfg",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/_sub/ZerosToNanTransform.react.js": {
    "description": "",
    "displayName": "ZerosToNanTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  }
}