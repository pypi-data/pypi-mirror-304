# coding: utf-8

"""
    FINBOURNE Luminesce Web API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.16.765
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from luminesce.configuration import Configuration


class CaseStatementItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'filter': 'str',
        'source': 'str',
        'target': 'str',
        'is_target_non_literal': 'bool'
    }

    attribute_map = {
        'filter': 'filter',
        'source': 'source',
        'target': 'target',
        'is_target_non_literal': 'isTargetNonLiteral'
    }

    required_map = {
        'filter': 'required',
        'source': 'required',
        'target': 'required',
        'is_target_non_literal': 'optional'
    }

    def __init__(self, filter=None, source=None, target=None, is_target_non_literal=None, local_vars_configuration=None):  # noqa: E501
        """CaseStatementItem - a model defined in OpenAPI"
        
        :param filter:  The operator in the case statement SQL expression (required)
        :type filter: str
        :param source:  The expression that is on the LHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target (required)
        :type source: str
        :param target:  The expression that is on the RHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target (required)
        :type target: str
        :param is_target_non_literal:  The Target can be a literal value or a non literal (field) and  hence will be interpreted differently.  This can be determined from the UI and passed down as a true / false
        :type is_target_non_literal: bool

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._filter = None
        self._source = None
        self._target = None
        self._is_target_non_literal = None
        self.discriminator = None

        self.filter = filter
        self.source = source
        self.target = target
        if is_target_non_literal is not None:
            self.is_target_non_literal = is_target_non_literal

    @property
    def filter(self):
        """Gets the filter of this CaseStatementItem.  # noqa: E501

        The operator in the case statement SQL expression  # noqa: E501

        :return: The filter of this CaseStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CaseStatementItem.

        The operator in the case statement SQL expression  # noqa: E501

        :param filter: The filter of this CaseStatementItem.  # noqa: E501
        :type filter: str
        """
        if self.local_vars_configuration.client_side_validation and filter is None:  # noqa: E501
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                filter is not None and len(filter) < 1):
            raise ValueError("Invalid value for `filter`, length must be greater than or equal to `1`")  # noqa: E501

        self._filter = filter

    @property
    def source(self):
        """Gets the source of this CaseStatementItem.  # noqa: E501

        The expression that is on the LHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target  # noqa: E501

        :return: The source of this CaseStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CaseStatementItem.

        The expression that is on the LHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target  # noqa: E501

        :param source: The source of this CaseStatementItem.  # noqa: E501
        :type source: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) < 1):
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def target(self):
        """Gets the target of this CaseStatementItem.  # noqa: E501

        The expression that is on the RHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target  # noqa: E501

        :return: The target of this CaseStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CaseStatementItem.

        The expression that is on the RHS of the operator  A typical case statement would look like:  CASE Field {Filter} Source THEN Target  # noqa: E501

        :param target: The target of this CaseStatementItem.  # noqa: E501
        :type target: str
        """
        if self.local_vars_configuration.client_side_validation and target is None:  # noqa: E501
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target is not None and len(target) < 1):
            raise ValueError("Invalid value for `target`, length must be greater than or equal to `1`")  # noqa: E501

        self._target = target

    @property
    def is_target_non_literal(self):
        """Gets the is_target_non_literal of this CaseStatementItem.  # noqa: E501

        The Target can be a literal value or a non literal (field) and  hence will be interpreted differently.  This can be determined from the UI and passed down as a true / false  # noqa: E501

        :return: The is_target_non_literal of this CaseStatementItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_target_non_literal

    @is_target_non_literal.setter
    def is_target_non_literal(self, is_target_non_literal):
        """Sets the is_target_non_literal of this CaseStatementItem.

        The Target can be a literal value or a non literal (field) and  hence will be interpreted differently.  This can be determined from the UI and passed down as a true / false  # noqa: E501

        :param is_target_non_literal: The is_target_non_literal of this CaseStatementItem.  # noqa: E501
        :type is_target_non_literal: bool
        """

        self._is_target_non_literal = is_target_non_literal

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaseStatementItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CaseStatementItem):
            return True

        return self.to_dict() != other.to_dict()
