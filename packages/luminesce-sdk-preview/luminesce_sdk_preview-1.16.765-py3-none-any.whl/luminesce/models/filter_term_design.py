# coding: utf-8

"""
    FINBOURNE Luminesce Web API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.16.765
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from luminesce.configuration import Configuration


class FilterTermDesign(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'operator': 'QueryDesignerBinaryOperator',
        'value': 'str'
    }

    attribute_map = {
        'operator': 'operator',
        'value': 'value'
    }

    required_map = {
        'operator': 'required',
        'value': 'required'
    }

    def __init__(self, operator=None, value=None, local_vars_configuration=None):  # noqa: E501
        """FilterTermDesign - a model defined in OpenAPI"
        
        :param operator:  (required)
        :type operator: luminesce.QueryDesignerBinaryOperator
        :param value:  The value to compare against (always as a string, but will be formatted to the correct type) (required)
        :type value: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operator = None
        self._value = None
        self.discriminator = None

        self.operator = operator
        self.value = value

    @property
    def operator(self):
        """Gets the operator of this FilterTermDesign.  # noqa: E501


        :return: The operator of this FilterTermDesign.  # noqa: E501
        :rtype: luminesce.QueryDesignerBinaryOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this FilterTermDesign.


        :param operator: The operator of this FilterTermDesign.  # noqa: E501
        :type operator: luminesce.QueryDesignerBinaryOperator
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this FilterTermDesign.  # noqa: E501

        The value to compare against (always as a string, but will be formatted to the correct type)  # noqa: E501

        :return: The value of this FilterTermDesign.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FilterTermDesign.

        The value to compare against (always as a string, but will be formatted to the correct type)  # noqa: E501

        :param value: The value of this FilterTermDesign.  # noqa: E501
        :type value: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                value is not None and len(value) > 2048):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2048`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                value is not None and len(value) < 0):
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterTermDesign):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterTermDesign):
            return True

        return self.to_dict() != other.to_dict()
