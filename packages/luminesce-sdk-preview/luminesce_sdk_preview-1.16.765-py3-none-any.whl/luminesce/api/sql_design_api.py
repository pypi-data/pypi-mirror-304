# coding: utf-8

"""
    FINBOURNE Luminesce Web API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.16.765
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from luminesce.api_client import ApiClient
from luminesce.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from luminesce.models.case_statement_design import CaseStatementDesign
from luminesce.models.convert_to_view_data import ConvertToViewData
from luminesce.models.error_highlight_request import ErrorHighlightRequest
from luminesce.models.error_highlight_response import ErrorHighlightResponse
from luminesce.models.file_reader_builder_def import FileReaderBuilderDef
from luminesce.models.file_reader_builder_response import FileReaderBuilderResponse
from luminesce.models.inlined_property_design import InlinedPropertyDesign
from luminesce.models.intellisense_request import IntellisenseRequest
from luminesce.models.intellisense_response import IntellisenseResponse
from luminesce.models.lusid_problem_details import LusidProblemDetails
from luminesce.models.query_design import QueryDesign
from luminesce.models.scalar_parameter import ScalarParameter
from luminesce.models.writer_design import WriterDesign


class SqlDesignApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_provider_template_for_export(self, provider, content_type, **kwargs):  # noqa: E501
        """GetProviderTemplateForExport: Makes a fields template for file importing via a writer  # noqa: E501

        Generates a template file for all the writable fields for a given provider returned in CSV or Excel (xlsx) format (as a file to be downloaded)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_provider_template_for_export(provider, content_type, async_req=True)
        >>> result = thread.get()

        :param provider: Name of the provider for which this template is for (required)
        :type provider: str
        :param content_type: File content type for the Template. csv or excel (required)
        :type content_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: file
        """
        kwargs['_return_http_data_only'] = True
        return self.get_provider_template_for_export_with_http_info(provider, content_type, **kwargs)  # noqa: E501

    def get_provider_template_for_export_with_http_info(self, provider, content_type, **kwargs):  # noqa: E501
        """GetProviderTemplateForExport: Makes a fields template for file importing via a writer  # noqa: E501

        Generates a template file for all the writable fields for a given provider returned in CSV or Excel (xlsx) format (as a file to be downloaded)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_provider_template_for_export_with_http_info(provider, content_type, async_req=True)
        >>> result = thread.get()

        :param provider: Name of the provider for which this template is for (required)
        :type provider: str
        :param content_type: File content type for the Template. csv or excel (required)
        :type content_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (file, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'provider',
            'content_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_template_for_export" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'provider' is set
        if self.api_client.client_side_validation and ('provider' not in local_var_params or  # noqa: E501
                                                        local_var_params['provider'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `provider` when calling `get_provider_template_for_export`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `get_provider_template_for_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider' in local_var_params and local_var_params['provider'] is not None:  # noqa: E501
            query_params.append(('provider', local_var_params['provider']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('contentType', local_var_params['content_type']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "file",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/providertemplateforexport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_case_statement_design_sql_to_design(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutCaseStatementDesignSqlToDesign: Convert SQL to a case statement design object  # noqa: E501

        Converts a SQL query to a CaseStatementDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_case_statement_design_sql_to_design(async_req=True)
        >>> result = thread.get()

        :param body: SQL to attempt to create an case statement Design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CaseStatementDesign
        """
        kwargs['_return_http_data_only'] = True
        return self.put_case_statement_design_sql_to_design_with_http_info(**kwargs)  # noqa: E501

    def put_case_statement_design_sql_to_design_with_http_info(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutCaseStatementDesignSqlToDesign: Convert SQL to a case statement design object  # noqa: E501

        Converts a SQL query to a CaseStatementDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_case_statement_design_sql_to_design_with_http_info(async_req=True)
        >>> result = thread.get()

        :param body: SQL to attempt to create an case statement Design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (CaseStatementDesign, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_case_statement_design_sql_to_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "CaseStatementDesign",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/tocasestatementdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_case_statement_design_to_sql(self, case_statement_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutCaseStatementDesignToSql: Convert a case statement design object to SQL  # noqa: E501

        Generates a SQL case statement query from a structured CaseStatementDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_case_statement_design_to_sql(case_statement_design, async_req=True)
        >>> result = thread.get()

        :param case_statement_design: CaseStatementDesign object to try and create a SQL query from (required)
        :type case_statement_design: CaseStatementDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_case_statement_design_to_sql_with_http_info(case_statement_design, **kwargs)  # noqa: E501

    def put_case_statement_design_to_sql_with_http_info(self, case_statement_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutCaseStatementDesignToSql: Convert a case statement design object to SQL  # noqa: E501

        Generates a SQL case statement query from a structured CaseStatementDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_case_statement_design_to_sql_with_http_info(case_statement_design, async_req=True)
        >>> result = thread.get()

        :param case_statement_design: CaseStatementDesign object to try and create a SQL query from (required)
        :type case_statement_design: CaseStatementDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'case_statement_design'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_case_statement_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'case_statement_design' is set
        if self.api_client.client_side_validation and ('case_statement_design' not in local_var_params or  # noqa: E501
                                                        local_var_params['case_statement_design'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `case_statement_design` when calling `put_case_statement_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case_statement_design' in local_var_params:
            body_params = local_var_params['case_statement_design']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/fromcasestatementdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_file_read_design_to_sql(self, file_reader_builder_def, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutFileReadDesignToSql: Make file read SQL from a design object  # noqa: E501

        Generates SQL from a FileReaderBuilderDef object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_file_read_design_to_sql(file_reader_builder_def, async_req=True)
        >>> result = thread.get()

        :param file_reader_builder_def: Structured file read design object to generate SQL from (required)
        :type file_reader_builder_def: FileReaderBuilderDef
        :param execute_query: Should the generated query be executed to build preview data or determine errors.>
        :type execute_query: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FileReaderBuilderResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.put_file_read_design_to_sql_with_http_info(file_reader_builder_def, **kwargs)  # noqa: E501

    def put_file_read_design_to_sql_with_http_info(self, file_reader_builder_def, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutFileReadDesignToSql: Make file read SQL from a design object  # noqa: E501

        Generates SQL from a FileReaderBuilderDef object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_file_read_design_to_sql_with_http_info(file_reader_builder_def, async_req=True)
        >>> result = thread.get()

        :param file_reader_builder_def: Structured file read design object to generate SQL from (required)
        :type file_reader_builder_def: FileReaderBuilderDef
        :param execute_query: Should the generated query be executed to build preview data or determine errors.>
        :type execute_query: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (FileReaderBuilderResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'file_reader_builder_def',
            'execute_query'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_file_read_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file_reader_builder_def' is set
        if self.api_client.client_side_validation and ('file_reader_builder_def' not in local_var_params or  # noqa: E501
                                                        local_var_params['file_reader_builder_def'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `file_reader_builder_def` when calling `put_file_read_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'execute_query' in local_var_params and local_var_params['execute_query'] is not None:  # noqa: E501
            query_params.append(('executeQuery', local_var_params['execute_query']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file_reader_builder_def' in local_var_params:
            body_params = local_var_params['file_reader_builder_def']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "FileReaderBuilderResponse",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/fromfilereaddesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_inlined_properties_design_sql_to_design(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Make an inlined properties design from SQL  # noqa: E501

        Generates a SQL-inlined-properties-design object from SQL string, if possible.  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_inlined_properties_design_sql_to_design(async_req=True)
        >>> result = thread.get()

        :param body: SQL query to attempt to generate the inlined properties design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlinedPropertyDesign
        """
        kwargs['_return_http_data_only'] = True
        return self.put_inlined_properties_design_sql_to_design_with_http_info(**kwargs)  # noqa: E501

    def put_inlined_properties_design_sql_to_design_with_http_info(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutInlinedPropertiesDesignSqlToDesign: Make an inlined properties design from SQL  # noqa: E501

        Generates a SQL-inlined-properties-design object from SQL string, if possible.  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_inlined_properties_design_sql_to_design_with_http_info(async_req=True)
        >>> result = thread.get()

        :param body: SQL query to attempt to generate the inlined properties design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (InlinedPropertyDesign, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_inlined_properties_design_sql_to_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "InlinedPropertyDesign",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/toinlinedpropertiesdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_inlined_properties_design_to_sql(self, inlined_property_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Make inlined properties SQL from a design object  # noqa: E501

        Generates inlined properties SQL from a structured design  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_inlined_properties_design_to_sql(inlined_property_design, async_req=True)
        >>> result = thread.get()

        :param inlined_property_design: Inlined properties Designer specification to generate SQL from (required)
        :type inlined_property_design: InlinedPropertyDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_inlined_properties_design_to_sql_with_http_info(inlined_property_design, **kwargs)  # noqa: E501

    def put_inlined_properties_design_to_sql_with_http_info(self, inlined_property_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutInlinedPropertiesDesignToSql: Make inlined properties SQL from a design object  # noqa: E501

        Generates inlined properties SQL from a structured design  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_inlined_properties_design_to_sql_with_http_info(inlined_property_design, async_req=True)
        >>> result = thread.get()

        :param inlined_property_design: Inlined properties Designer specification to generate SQL from (required)
        :type inlined_property_design: InlinedPropertyDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'inlined_property_design'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_inlined_properties_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inlined_property_design' is set
        if self.api_client.client_side_validation and ('inlined_property_design' not in local_var_params or  # noqa: E501
                                                        local_var_params['inlined_property_design'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inlined_property_design` when calling `put_inlined_properties_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inlined_property_design' in local_var_params:
            body_params = local_var_params['inlined_property_design']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/frominlinedpropertiesdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_intellisense(self, intellisense_request, **kwargs):  # noqa: E501
        """PutIntellisense: Make intellisense prompts given an SQL snip-it  # noqa: E501

        Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid SQL) and cursor location  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_intellisense(intellisense_request, async_req=True)
        >>> result = thread.get()

        :param intellisense_request: SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from. (required)
        :type intellisense_request: IntellisenseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IntellisenseResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.put_intellisense_with_http_info(intellisense_request, **kwargs)  # noqa: E501

    def put_intellisense_with_http_info(self, intellisense_request, **kwargs):  # noqa: E501
        """PutIntellisense: Make intellisense prompts given an SQL snip-it  # noqa: E501

        Generate a set of possible intellisense prompts given a SQL snip-it (in need not yet be valid SQL) and cursor location  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_intellisense_with_http_info(intellisense_request, async_req=True)
        >>> result = thread.get()

        :param intellisense_request: SQL and a row/colum position within it from which to determine intellisense options for the user to potentially choose from. (required)
        :type intellisense_request: IntellisenseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (IntellisenseResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'intellisense_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_intellisense" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'intellisense_request' is set
        if self.api_client.client_side_validation and ('intellisense_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['intellisense_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `intellisense_request` when calling `put_intellisense`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'intellisense_request' in local_var_params:
            body_params = local_var_params['intellisense_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "IntellisenseResponse",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/intellisense', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_intellisense_error(self, error_highlight_request, **kwargs):  # noqa: E501
        """PutIntellisenseError: Get error ranges from SQL  # noqa: E501

        Generate a set of error ranges, if any, in the given SQL (expressed as Lines)  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_intellisense_error(error_highlight_request, async_req=True)
        >>> result = thread.get()

        :param error_highlight_request: SQL (by line) to syntax check and return error ranges from within, if any. (required)
        :type error_highlight_request: ErrorHighlightRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ErrorHighlightResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.put_intellisense_error_with_http_info(error_highlight_request, **kwargs)  # noqa: E501

    def put_intellisense_error_with_http_info(self, error_highlight_request, **kwargs):  # noqa: E501
        """PutIntellisenseError: Get error ranges from SQL  # noqa: E501

        Generate a set of error ranges, if any, in the given SQL (expressed as Lines)  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_intellisense_error_with_http_info(error_highlight_request, async_req=True)
        >>> result = thread.get()

        :param error_highlight_request: SQL (by line) to syntax check and return error ranges from within, if any. (required)
        :type error_highlight_request: ErrorHighlightRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (ErrorHighlightResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'error_highlight_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_intellisense_error" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'error_highlight_request' is set
        if self.api_client.client_side_validation and ('error_highlight_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['error_highlight_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `error_highlight_request` when calling `put_intellisense_error`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'error_highlight_request' in local_var_params:
            body_params = local_var_params['error_highlight_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "ErrorHighlightResponse",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/intellisenseError', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_query_design_to_sql(self, query_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutQueryDesignToSql: Make SQL from a structured query design  # noqa: E501

        Generates SQL from a QueryDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_query_design_to_sql(query_design, async_req=True)
        >>> result = thread.get()

        :param query_design: Structured Query design object to generate SQL from (required)
        :type query_design: QueryDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_query_design_to_sql_with_http_info(query_design, **kwargs)  # noqa: E501

    def put_query_design_to_sql_with_http_info(self, query_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutQueryDesignToSql: Make SQL from a structured query design  # noqa: E501

        Generates SQL from a QueryDesign object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_query_design_to_sql_with_http_info(query_design, async_req=True)
        >>> result = thread.get()

        :param query_design: Structured Query design object to generate SQL from (required)
        :type query_design: QueryDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'query_design'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_query_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query_design' is set
        if self.api_client.client_side_validation and ('query_design' not in local_var_params or  # noqa: E501
                                                        local_var_params['query_design'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `query_design` when calling `put_query_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query_design' in local_var_params:
            body_params = local_var_params['query_design']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/fromdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_query_to_format(self, body, **kwargs):  # noqa: E501
        """PutQueryToFormat: Format SQL into a more readable form  # noqa: E501

         This formats SQL (given a set of options as to how to do so), a.k.a. Pretty-Print the SQL. It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. ```sql select x,y,z from a inner join b on a.x=b.x where x>y or y!=z ``` becomes ```sql select x, y, z from a inner join b    on a.x = b.x where x > y    or y != z ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_query_to_format(body, async_req=True)
        >>> result = thread.get()

        :param body: LuminesceSql to Pretty-Print. Even if it doesn't parse an attempt will be made to format it (required)
        :type body: str
        :param trailing_commas: Should commas be after an expression (as opposed to before)
        :type trailing_commas: bool
        :param uppercase_keywords: Should key words be capitalized
        :type uppercase_keywords: bool
        :param break_join_on_sections: Should clauses on joins be given line breaks?
        :type break_join_on_sections: bool
        :param space_after_expanded_comma: Should comma-lists have spaces after the commas?
        :type space_after_expanded_comma: bool
        :param keyword_standardization: Should the \"nicest\" key words be used? (e.g. JOIN -> INNER JOIN)
        :type keyword_standardization: bool
        :param expand_comma_lists: Should comma-lists (e.g. select a,b,c) have line breaks added?
        :type expand_comma_lists: bool
        :param expand_in_lists: Should IN-lists have line breaks added?
        :type expand_in_lists: bool
        :param expand_boolean_expressions: Should boolean expressions have line breaks added?
        :type expand_boolean_expressions: bool
        :param expand_between_conditions: Should between conditions have line breaks added?
        :type expand_between_conditions: bool
        :param expand_case_statements: Should case-statements have line breaks added?
        :type expand_case_statements: bool
        :param max_line_width: Maximum number of characters to allow on one line (if possible)
        :type max_line_width: int
        :param space_before_trailing_single_line_comments: Should the be a space before trailing single line comments?
        :type space_before_trailing_single_line_comments: bool
        :param multiline_comment_extra_line_break: Should an additional line break be added after multi-line comments?
        :type multiline_comment_extra_line_break: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_query_to_format_with_http_info(body, **kwargs)  # noqa: E501

    def put_query_to_format_with_http_info(self, body, **kwargs):  # noqa: E501
        """PutQueryToFormat: Format SQL into a more readable form  # noqa: E501

         This formats SQL (given a set of options as to how to do so), a.k.a. Pretty-Print the SQL. It takes some SQL (or a fragment thereof, it need not fully parse as yet and certainly need not execute correctly) and returns the reformatted version. e.g. ```sql select x,y,z from a inner join b on a.x=b.x where x>y or y!=z ``` becomes ```sql select x, y, z from a inner join b    on a.x = b.x where x > y    or y != z ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_query_to_format_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: LuminesceSql to Pretty-Print. Even if it doesn't parse an attempt will be made to format it (required)
        :type body: str
        :param trailing_commas: Should commas be after an expression (as opposed to before)
        :type trailing_commas: bool
        :param uppercase_keywords: Should key words be capitalized
        :type uppercase_keywords: bool
        :param break_join_on_sections: Should clauses on joins be given line breaks?
        :type break_join_on_sections: bool
        :param space_after_expanded_comma: Should comma-lists have spaces after the commas?
        :type space_after_expanded_comma: bool
        :param keyword_standardization: Should the \"nicest\" key words be used? (e.g. JOIN -> INNER JOIN)
        :type keyword_standardization: bool
        :param expand_comma_lists: Should comma-lists (e.g. select a,b,c) have line breaks added?
        :type expand_comma_lists: bool
        :param expand_in_lists: Should IN-lists have line breaks added?
        :type expand_in_lists: bool
        :param expand_boolean_expressions: Should boolean expressions have line breaks added?
        :type expand_boolean_expressions: bool
        :param expand_between_conditions: Should between conditions have line breaks added?
        :type expand_between_conditions: bool
        :param expand_case_statements: Should case-statements have line breaks added?
        :type expand_case_statements: bool
        :param max_line_width: Maximum number of characters to allow on one line (if possible)
        :type max_line_width: int
        :param space_before_trailing_single_line_comments: Should the be a space before trailing single line comments?
        :type space_before_trailing_single_line_comments: bool
        :param multiline_comment_extra_line_break: Should an additional line break be added after multi-line comments?
        :type multiline_comment_extra_line_break: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body',
            'trailing_commas',
            'uppercase_keywords',
            'break_join_on_sections',
            'space_after_expanded_comma',
            'keyword_standardization',
            'expand_comma_lists',
            'expand_in_lists',
            'expand_boolean_expressions',
            'expand_between_conditions',
            'expand_case_statements',
            'max_line_width',
            'space_before_trailing_single_line_comments',
            'multiline_comment_extra_line_break'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_query_to_format" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `put_query_to_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trailing_commas' in local_var_params and local_var_params['trailing_commas'] is not None:  # noqa: E501
            query_params.append(('trailingCommas', local_var_params['trailing_commas']))  # noqa: E501
        if 'uppercase_keywords' in local_var_params and local_var_params['uppercase_keywords'] is not None:  # noqa: E501
            query_params.append(('uppercaseKeywords', local_var_params['uppercase_keywords']))  # noqa: E501
        if 'break_join_on_sections' in local_var_params and local_var_params['break_join_on_sections'] is not None:  # noqa: E501
            query_params.append(('breakJoinOnSections', local_var_params['break_join_on_sections']))  # noqa: E501
        if 'space_after_expanded_comma' in local_var_params and local_var_params['space_after_expanded_comma'] is not None:  # noqa: E501
            query_params.append(('spaceAfterExpandedComma', local_var_params['space_after_expanded_comma']))  # noqa: E501
        if 'keyword_standardization' in local_var_params and local_var_params['keyword_standardization'] is not None:  # noqa: E501
            query_params.append(('keywordStandardization', local_var_params['keyword_standardization']))  # noqa: E501
        if 'expand_comma_lists' in local_var_params and local_var_params['expand_comma_lists'] is not None:  # noqa: E501
            query_params.append(('expandCommaLists', local_var_params['expand_comma_lists']))  # noqa: E501
        if 'expand_in_lists' in local_var_params and local_var_params['expand_in_lists'] is not None:  # noqa: E501
            query_params.append(('expandInLists', local_var_params['expand_in_lists']))  # noqa: E501
        if 'expand_boolean_expressions' in local_var_params and local_var_params['expand_boolean_expressions'] is not None:  # noqa: E501
            query_params.append(('expandBooleanExpressions', local_var_params['expand_boolean_expressions']))  # noqa: E501
        if 'expand_between_conditions' in local_var_params and local_var_params['expand_between_conditions'] is not None:  # noqa: E501
            query_params.append(('expandBetweenConditions', local_var_params['expand_between_conditions']))  # noqa: E501
        if 'expand_case_statements' in local_var_params and local_var_params['expand_case_statements'] is not None:  # noqa: E501
            query_params.append(('expandCaseStatements', local_var_params['expand_case_statements']))  # noqa: E501
        if 'max_line_width' in local_var_params and local_var_params['max_line_width'] is not None:  # noqa: E501
            query_params.append(('maxLineWidth', local_var_params['max_line_width']))  # noqa: E501
        if 'space_before_trailing_single_line_comments' in local_var_params and local_var_params['space_before_trailing_single_line_comments'] is not None:  # noqa: E501
            query_params.append(('spaceBeforeTrailingSingleLineComments', local_var_params['space_before_trailing_single_line_comments']))  # noqa: E501
        if 'multiline_comment_extra_line_break' in local_var_params and local_var_params['multiline_comment_extra_line_break'] is not None:  # noqa: E501
            query_params.append(('multilineCommentExtraLineBreak', local_var_params['multiline_comment_extra_line_break']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/pretty', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_sql_to_extract_scalar_parameters(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToExtractScalarParameters: Extract scalar parameter information from SQL  # noqa: E501

        Extracts information about all the scalar parameters defined in the given SQL statement  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_extract_scalar_parameters(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the design object from (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[ScalarParameter]
        """
        kwargs['_return_http_data_only'] = True
        return self.put_sql_to_extract_scalar_parameters_with_http_info(body, **kwargs)  # noqa: E501

    def put_sql_to_extract_scalar_parameters_with_http_info(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToExtractScalarParameters: Extract scalar parameter information from SQL  # noqa: E501

        Extracts information about all the scalar parameters defined in the given SQL statement  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_extract_scalar_parameters_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the design object from (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (list[ScalarParameter], int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sql_to_extract_scalar_parameters" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `put_sql_to_extract_scalar_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "list[ScalarParameter]",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/extractscalarparameters', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_sql_to_file_read_design(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToFileReadDesign: Make a design object from file-read SQL  # noqa: E501

        Generates a SQL-file-read-design object from SQL string, if possible.  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_file_read_design(async_req=True)
        >>> result = thread.get()

        :param determine_available_sources: Should the available sources be determined from `Sys.Registration`
        :type determine_available_sources: bool
        :param body: SQL query to generate the file read design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FileReaderBuilderDef
        """
        kwargs['_return_http_data_only'] = True
        return self.put_sql_to_file_read_design_with_http_info(**kwargs)  # noqa: E501

    def put_sql_to_file_read_design_with_http_info(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToFileReadDesign: Make a design object from file-read SQL  # noqa: E501

        Generates a SQL-file-read-design object from SQL string, if possible.  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_file_read_design_with_http_info(async_req=True)
        >>> result = thread.get()

        :param determine_available_sources: Should the available sources be determined from `Sys.Registration`
        :type determine_available_sources: bool
        :param body: SQL query to generate the file read design object from
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (FileReaderBuilderDef, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'determine_available_sources',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sql_to_file_read_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'determine_available_sources' in local_var_params and local_var_params['determine_available_sources'] is not None:  # noqa: E501
            query_params.append(('determineAvailableSources', local_var_params['determine_available_sources']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "FileReaderBuilderDef",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/tofilereaddesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_sql_to_query_design(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToQueryDesign: Make a SQL-design object from SQL if possible  # noqa: E501

        Generates a QueryDesign object from simple SQL if possible  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_query_design(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the design object from (required)
        :type body: str
        :param validate_with_metadata: Should the table be validated against the users' view of Sys.Field to fill in DataTypes, etc.?
        :type validate_with_metadata: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueryDesign
        """
        kwargs['_return_http_data_only'] = True
        return self.put_sql_to_query_design_with_http_info(body, **kwargs)  # noqa: E501

    def put_sql_to_query_design_with_http_info(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToQueryDesign: Make a SQL-design object from SQL if possible  # noqa: E501

        Generates a QueryDesign object from simple SQL if possible  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_query_design_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the design object from (required)
        :type body: str
        :param validate_with_metadata: Should the table be validated against the users' view of Sys.Field to fill in DataTypes, etc.?
        :type validate_with_metadata: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (QueryDesign, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body',
            'validate_with_metadata'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sql_to_query_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `put_sql_to_query_design`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_with_metadata' in local_var_params and local_var_params['validate_with_metadata'] is not None:  # noqa: E501
            query_params.append(('validateWithMetadata', local_var_params['validate_with_metadata']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "QueryDesign",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/todesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_sql_to_view_design(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToViewDesign: Make a view-design from view creation SQL  # noqa: E501

        Converts SQL which creates a view into a structured ConvertToViewData object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_view_design(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL Query to generate the ConvertToViewData object from (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConvertToViewData
        """
        kwargs['_return_http_data_only'] = True
        return self.put_sql_to_view_design_with_http_info(body, **kwargs)  # noqa: E501

    def put_sql_to_view_design_with_http_info(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToViewDesign: Make a view-design from view creation SQL  # noqa: E501

        Converts SQL which creates a view into a structured ConvertToViewData object  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_view_design_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL Query to generate the ConvertToViewData object from (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (ConvertToViewData, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sql_to_view_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `put_sql_to_view_design`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "ConvertToViewData",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/toviewdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_sql_to_writer_design(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToWriterDesign: Make a SQL-writer-design object from SQL  # noqa: E501

        Generates a SQL-writer-design object (WriterDesign) from a SQL query, if possible  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_writer_design(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the writer design object from (required)
        :type body: str
        :param merge_additional_mapping_fields: Should `Sys.Field` be used to find additional potential fields to map from? (not always possible)
        :type merge_additional_mapping_fields: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WriterDesign
        """
        kwargs['_return_http_data_only'] = True
        return self.put_sql_to_writer_design_with_http_info(body, **kwargs)  # noqa: E501

    def put_sql_to_writer_design_with_http_info(self, body, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutSqlToWriterDesign: Make a SQL-writer-design object from SQL  # noqa: E501

        Generates a SQL-writer-design object (WriterDesign) from a SQL query, if possible  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_sql_to_writer_design_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: SQL query to generate the writer design object from (required)
        :type body: str
        :param merge_additional_mapping_fields: Should `Sys.Field` be used to find additional potential fields to map from? (not always possible)
        :type merge_additional_mapping_fields: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WriterDesign, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'body',
            'merge_additional_mapping_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sql_to_writer_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `put_sql_to_writer_design`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'merge_additional_mapping_fields' in local_var_params and local_var_params['merge_additional_mapping_fields'] is not None:  # noqa: E501
            query_params.append(('mergeAdditionalMappingFields', local_var_params['merge_additional_mapping_fields']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "WriterDesign",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/towriterdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_view_design_to_sql(self, convert_to_view_data, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutViewDesignToSql: Make view creation sql from a view-design  # noqa: E501

        Converts a ConvertToView specification into SQL that creates a view  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_view_design_to_sql(convert_to_view_data, async_req=True)
        >>> result = thread.get()

        :param convert_to_view_data: Structured Query design object to generate SQL from (required)
        :type convert_to_view_data: ConvertToViewData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_view_design_to_sql_with_http_info(convert_to_view_data, **kwargs)  # noqa: E501

    def put_view_design_to_sql_with_http_info(self, convert_to_view_data, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutViewDesignToSql: Make view creation sql from a view-design  # noqa: E501

        Converts a ConvertToView specification into SQL that creates a view  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_view_design_to_sql_with_http_info(convert_to_view_data, async_req=True)
        >>> result = thread.get()

        :param convert_to_view_data: Structured Query design object to generate SQL from (required)
        :type convert_to_view_data: ConvertToViewData
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'convert_to_view_data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_view_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'convert_to_view_data' is set
        if self.api_client.client_side_validation and ('convert_to_view_data' not in local_var_params or  # noqa: E501
                                                        local_var_params['convert_to_view_data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `convert_to_view_data` when calling `put_view_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'convert_to_view_data' in local_var_params:
            body_params = local_var_params['convert_to_view_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/fromviewdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_writer_design_to_sql(self, writer_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutWriterDesignToSql: Make writer SQL from a writer-design object  # noqa: E501

        Generates writer SQL from a valid WriterDesign structure  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_writer_design_to_sql(writer_design, async_req=True)
        >>> result = thread.get()

        :param writer_design: Structured Writer Design design object to generate Writer SQL from (required)
        :type writer_design: WriterDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_writer_design_to_sql_with_http_info(writer_design, **kwargs)  # noqa: E501

    def put_writer_design_to_sql_with_http_info(self, writer_design, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] PutWriterDesignToSql: Make writer SQL from a writer-design object  # noqa: E501

        Generates writer SQL from a valid WriterDesign structure  > This method is generally only intended for IDE generation purposes.  > It is largely internal to the Finbourne web user interfaces and subject to change without notice.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_writer_design_to_sql_with_http_info(writer_design, async_req=True)
        >>> result = thread.get()

        :param writer_design: Structured Writer Design design object to generate Writer SQL from (required)
        :type writer_design: WriterDesign
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (str, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'writer_design'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_writer_design_to_sql" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'writer_design' is set
        if self.api_client.client_side_validation and ('writer_design' not in local_var_params or  # noqa: E501
                                                        local_var_params['writer_design'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `writer_design` when calling `put_writer_design_to_sql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'writer_design' in local_var_params:
            body_params = local_var_params['writer_design']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.16.765'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "str",
            400: "LusidProblemDetails",
            403: "LusidProblemDetails",
        }

        return self.api_client.call_api(
            '/api/Sql/fromwriterdesign', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
